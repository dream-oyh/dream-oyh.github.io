import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as l,d as s,b as a,e as t}from"./app-56HcBvhI.js";const i="/images/data_structure/graph/Untitled.png",m="/images/data_structure/graph/Untitled 1.png",r="/images/data_structure/graph/Untitled 2.png",p="/images/data_structure/graph/Untitled 3.png",c="/images/data_structure/graph/Untitled 4.png",o={},h=s("h1",{id:"ðŸ—º-graph",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#ðŸ—º-graph"},[s("span",null,"ðŸ—º Graph")])],-1),d=s("p",null,[s("strong",null,"Graph:"),a(" A graph G is an ordered pair of a set V of vertices and a set E of edges.")],-1),g=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"G"),s("mo",null,"="),s("mo",{stretchy:"false"},"("),s("mi",null,"V"),s("mo",{separator:"true"},","),s("mi",null,"E"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"}," G=(V,E) ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"G"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"E"),s("span",{class:"mclose"},")")])])])])],-1),u=s("p",null,[s("strong",null,"Logistic View:")],-1),y=s("figure",null,[s("img",{src:i,alt:"",width:"200",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),v=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"âˆ£"),s("mi",null,"V"),s("mi",{mathvariant:"normal"},"âˆ£")]),s("annotation",{encoding:"application/x-tex"},"|V|")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"âˆ£"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"mord"},"âˆ£")])])]),a(": a number of vertices")],-1),x=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"âˆ£"),s("mi",null,"E"),s("mi",{mathvariant:"normal"},"âˆ£")]),s("annotation",{encoding:"application/x-tex"},"|E|")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"âˆ£"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"E"),s("span",{class:"mord"},"âˆ£")])])]),a(": a number of edges")],-1),w=t('<p><strong>Connection</strong>: Between two vertices, the connection can be directed or undirected.</p><p>Sometimes we gave edges weight. This graph is called <strong>weighted graph</strong>.</p><p><strong>Walk</strong>: a sequence of vertices where each adjacent pair is connected by an edge.</p><p><strong>Path</strong>: a walk in which no vertices (and thus no edges) are repeated.</p><p><strong>Trail</strong>: a walk in which no edges are repeated.</p><p><strong>Strong connected graphs</strong>: For a directed graph, if there is a path from any vertex to any other vertex.</p><p><strong>Closed walk</strong>: a walk starts and ends at same vertex.</p><p><strong>Simple cycle</strong>: no repetition other than start and end.</p><p><strong>Acyclic graph</strong>: a graph with no cycle, like a tree.</p><h2 id="how-to-store-a-graph" tabindex="-1"><a class="header-anchor" href="#how-to-store-a-graph"><span>How to store a graph</span></a></h2><h3 id="vertex-and-edge-list" tabindex="-1"><a class="header-anchor" href="#vertex-and-edge-list"><span>Vertex and edge list</span></a></h3><p>We use string to store the vertex name. Use dynamic arrays to store the edges and the their weights.</p><figure><img src="'+m+'" alt="" width="300" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>But this maybe cause costly time complexity.</p>',14),k=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"Operation"),s("th",null,"Time Complexity")])]),s("tbody",null,[s("tr",null,[s("td",null,"Finding adjacent nodes"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",{mathvariant:"normal"},"âˆ£"),s("mi",null,"E"),s("mi",{mathvariant:"normal"},"âˆ£"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"v"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")"),s("mo",null,"â†’"),s("mi",null,"c"),s("mi",null,"o"),s("mi",null,"s"),s("mi",null,"t"),s("mi",null,"l"),s("mi",null,"y")]),s("annotation",{encoding:"application/x-tex"},"O(|E|)=O(v^2) \\rightarrow costly")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"âˆ£"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"E"),s("span",{class:"mord"},"âˆ£"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"â†’"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal"},"cos"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"tl"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y")])])])])]),s("tr",null,[s("td",null,"Check if given nodes are connected"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",{mathvariant:"normal"},"âˆ£"),s("mi",null,"E"),s("mi",{mathvariant:"normal"},"âˆ£"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"v"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")"),s("mo",null,"â†’"),s("mi",null,"c"),s("mi",null,"o"),s("mi",null,"s"),s("mi",null,"t"),s("mi",null,"l"),s("mi",null,"y")]),s("annotation",{encoding:"application/x-tex"},"O(|E|)=O(v^2) \\rightarrow costly")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"âˆ£"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"E"),s("span",{class:"mord"},"âˆ£"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"â†’"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal"},"cos"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"tl"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y")])])])])])])],-1),f=s("h3",{id:"adjacency-matrix",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#adjacency-matrix"},[s("span",null,"Adjacency Matrix")])],-1),b=s("p",null,"We use a vertex list and an adjacency matrix to store a graph.",-1),_=s("figure",null,[s("img",{src:r,alt:"",width:"400",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),M=s("p",null,"The elements in the adjacency matrix are defined as below.",-1),j=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"A"),s("mrow",null,[s("mi",null,"i"),s("mi",null,"j")])]),s("mo",null,"="),s("mrow",null,[s("mo",{fence:"true"},"{"),s("mtable",{rowspacing:"0.16em",columnalign:"center center",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mn",null,"0"),s("mo",{separator:"true"},",")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mtext",null,"if"),s("mtext",null,"â€‰"),s("mi",{mathvariant:"normal"},"âˆƒ"),s("mtext",null,"â€‰"),s("mtext",null,"edgeÂ fromÂ iÂ toÂ j")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mn",null,"1"),s("mo",{separator:"true"},",")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mtext",null,"otherwise")])])])])])]),s("annotation",{encoding:"application/x-tex"}," A_{ij} = \\left\\{ \\begin{matrix} 0, & \\text{if}\\,\\exists\\, \\text{edge from i to j}\\\\ 1, & \\text{otherwise} \\end{matrix}\\right. ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9694em","vertical-align":"-0.2861em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"A"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05724em"}},"ij")])])])]),s("span",{class:"vlist-s"},"â€‹")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2861em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.4em","vertical-align":"-0.95em"}}),s("span",{class:"minner"},[s("span",{class:"mopen delimcenter",style:{top:"0em"}},[s("span",{class:"delimsizing size3"},"{")]),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.45em"}},[s("span",{style:{top:"-3.61em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"0"),s("span",{class:"mpunct"},",")])]),s("span",{style:{top:"-2.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"1"),s("span",{class:"mpunct"},",")])])]),s("span",{class:"vlist-s"},"â€‹")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.95em"}},[s("span")])])])]),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.45em"}},[s("span",{style:{top:"-3.61em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord text"},[s("span",{class:"mord"},"if")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"âˆƒ"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"edgeÂ fromÂ iÂ toÂ j")])])]),s("span",{style:{top:"-2.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord text"},[s("span",{class:"mord"},"otherwise")])])])]),s("span",{class:"vlist-s"},"â€‹")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.95em"}},[s("span")])])])])])]),s("span",{class:"mclose nulldelimiter"})])])])])])],-1),O=s("p",null,[a("For the weighted graph, the "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"A"),s("mrow",null,[s("mi",null,"i"),s("mi",null,"j")])])]),s("annotation",{encoding:"application/x-tex"},"A_{ij}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9694em","vertical-align":"-0.2861em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"A"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05724em"}},"ij")])])])]),s("span",{class:"vlist-s"},"â€‹")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2861em"}},[s("span")])])])])])])])]),a(" will be defined as below.")],-1),z=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"A"),s("mrow",null,[s("mi",null,"i"),s("mi",null,"j")])]),s("mo",null,"="),s("mrow",null,[s("mo",{fence:"true"},"{"),s("mtable",{rowspacing:"0.16em",columnalign:"center center",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mi",null,"Ï‰"),s("mo",{separator:"true"},",")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mtext",null,"if"),s("mtext",null,"â€‰"),s("mi",{mathvariant:"normal"},"âˆƒ"),s("mtext",null,"â€‰"),s("mtext",null,"edgeÂ fromÂ iÂ toÂ j")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mi",{mathvariant:"normal"},"âˆž"),s("mo",{separator:"true"},",")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mtext",null,"otherwise")])])])])])]),s("annotation",{encoding:"application/x-tex"}," A_{ij} = \\left\\{ \\begin{matrix} \\omega, & \\text{if}\\,\\exists\\, \\text{edge from i to j}\\\\ \\infty, & \\text{otherwise} \\end{matrix}\\right. ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9694em","vertical-align":"-0.2861em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"A"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05724em"}},"ij")])])])]),s("span",{class:"vlist-s"},"â€‹")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2861em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.4em","vertical-align":"-0.95em"}}),s("span",{class:"minner"},[s("span",{class:"mopen delimcenter",style:{top:"0em"}},[s("span",{class:"delimsizing size3"},"{")]),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.45em"}},[s("span",{style:{top:"-3.61em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"Ï‰"),s("span",{class:"mpunct"},",")])]),s("span",{style:{top:"-2.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"âˆž"),s("span",{class:"mpunct"},",")])])]),s("span",{class:"vlist-s"},"â€‹")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.95em"}},[s("span")])])])]),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.45em"}},[s("span",{style:{top:"-3.61em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord text"},[s("span",{class:"mord"},"if")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"âˆƒ"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"edgeÂ fromÂ iÂ toÂ j")])])]),s("span",{style:{top:"-2.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord text"},[s("span",{class:"mord"},"otherwise")])])])]),s("span",{class:"vlist-s"},"â€‹")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.95em"}},[s("span")])])])])])]),s("span",{class:"mclose nulldelimiter"})])])])])])],-1),V=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"Operation"),s("th",null,"Time Complexity")])]),s("tbody",null,[s("tr",null,[s("td",null,"Finding adjacent nodes"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"v"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(v)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),s("span",{class:"mclose"},")")])])])])]),s("tr",null,[s("td",null,"Check if given nodes are connected"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),a("(Use hash table to match the vertex name with its index)")])])])],-1),E=s("p",null,[a("We effectively reduce the time-cost, but take huge space-cost. In this method, the unconnected edge information is redundant. If the graph is dense, this method may be effective, but if the graph is sparse, a amount of the space is wasted. While "),s("strong",null,"most graph in the reality is sparse"),a(", that is the number of edges is much smaller than the square of the number of the vertices.")],-1),A=s("h3",{id:"adjacency-list-representation",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#adjacency-list-representation"},[s("span",null,"Adjacency list representation")])],-1),L=s("figure",null,[s("img",{src:p,alt:"",width:"200",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),G=s("p",null,[a("Instead of storing whether the node is connected or not, we choose to store the index of which nodes the targeted node connects to. Showed in the above figure, the first row represents the zeroth node connects to the first, the second and the third node. Specifically, what is the first node? We can search it in the Vertex List. So, by building adjacency list, we can reduce the space complexity from "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"v"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(v^2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])]),a(" to "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"e"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(e)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mclose"},")")])])]),a(", which is the smallest memory consumption because in the realistic world, the most graphs are sparse, "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"âˆ£"),s("mi",null,"E"),s("mi",{mathvariant:"normal"},"âˆ£"),s("mo",null,"<"),s("mo",null,"<"),s("mi",{mathvariant:"normal"},"âˆ£"),s("mi",null,"V"),s("msup",null,[s("mi",{mathvariant:"normal"},"âˆ£"),s("mn",null,"2")])]),s("annotation",{encoding:"application/x-tex"},"|E|<<|V|^2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"âˆ£"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"E"),s("span",{class:"mord"},"âˆ£"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"<<"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"âˆ£"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"mord"},[s("span",{class:"mord"},"âˆ£"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])])]),a(". We can use pointer to store the adjacency in C++ like the code below.")],-1),T=t(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token operator">*</span>A<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
A<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
A<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can use <code>A</code> array to store eight pointers. Each pointer points to a integral array, which stores indices the targeted node connects to.</p>`,2),C=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"Operation"),s("th",null,"Time Complexity")])]),s("tbody",null,[s("tr",null,[s("td",null,"Finding adjacent nodes"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"v"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(v)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),s("span",{class:"mclose"},")")])])])])]),s("tr",null,[s("td",null,"Check if given nodes are connected"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"v"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(v)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),s("span",{class:"mclose"},")")])])]),a("â€”by linear search")])]),s("tr",null,[s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"l"),s("mi",null,"o"),s("msub",null,[s("mi",null,"g"),s("mn",null,"2")]),s("mi",null,"v"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(log_2v)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0359em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"â€‹")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),s("span",{class:"mclose"},")")])])]),a("â€” by binary search")]),s("td")])])],-1),U=s("p",null,"It looks like we donâ€™t save the time by using adjacency list, but the time complexity is calculated in the worst performance. If the matrix is much sparse, the difference between two method will show.",-1),S=s("p",null,"Moreover, if we want to store, insert or delete some elements, the array maybe ineffective. Linked List can be used to store data dynamically. And if we wanna store a weighted graph, we just need to change the linked list structure, such as create a new cell to store a weight, matched with the node. Furthermore, if we want to enhance the performance of the adjacency list, we can use the binary search tree to replace the linked list. That will be more interesting!!",-1),B=s("figure",null,[s("img",{src:c,alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),W=[h,d,g,u,y,v,x,w,k,f,b,_,M,j,O,z,V,E,A,L,G,T,C,U,S,B];function F(N,Z){return n(),l("div",null,W)}const H=e(o,[["render",F],["__file","graph.html.vue"]]),P=JSON.parse('{"path":"/code/data_structure/graph.html","title":"ðŸ—º Graph","lang":"zh-CN","frontmatter":{"date":"2024-06-22T00:00:00.000Z","description":"ðŸ—º Graph Graph: A graph G is an ordered pair of a set V of vertices and a set E of edges. G=(V,E) Logistic View: âˆ£Vâˆ£: a number of vertices âˆ£Eâˆ£: a number of edges Connection: Bet...","head":[["meta",{"property":"og:url","content":"https://dream-oyh.github.io/code/data_structure/graph.html"}],["meta",{"property":"og:site_name","content":"Dream_oyh çš„ blog"}],["meta",{"property":"og:title","content":"ðŸ—º Graph"}],["meta",{"property":"og:description","content":"ðŸ—º Graph Graph: A graph G is an ordered pair of a set V of vertices and a set E of edges. G=(V,E) Logistic View: âˆ£Vâˆ£: a number of vertices âˆ£Eâˆ£: a number of edges Connection: Bet..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://dream-oyh.github.io/images/data_structure/graph/Untitled.png =200x"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-22T06:39:51.000Z"}],["meta",{"property":"article:author","content":"OYH"}],["meta",{"property":"article:published_time","content":"2024-06-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-22T06:39:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ðŸ—º Graph\\",\\"image\\":[\\"https://dream-oyh.github.io/images/data_structure/graph/Untitled.png =200x\\",\\"https://dream-oyh.github.io/images/data_structure/graph/Untitled%201.png =300x\\",\\"https://dream-oyh.github.io/images/data_structure/graph/Untitled%202.png =400x\\",\\"https://dream-oyh.github.io/images/data_structure/graph/Untitled%203.png =200x\\",\\"https://dream-oyh.github.io/images/data_structure/graph/Untitled%204.png\\"],\\"datePublished\\":\\"2024-06-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-22T06:39:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OYH\\",\\"email\\":\\"19859860010@163.com\\"}]}"]]},"headers":[{"level":2,"title":"How to store a graph","slug":"how-to-store-a-graph","link":"#how-to-store-a-graph","children":[{"level":3,"title":"Vertex and edge list","slug":"vertex-and-edge-list","link":"#vertex-and-edge-list","children":[]},{"level":3,"title":"Adjacency Matrix","slug":"adjacency-matrix","link":"#adjacency-matrix","children":[]},{"level":3,"title":"Adjacency list representation","slug":"adjacency-list-representation","link":"#adjacency-list-representation","children":[]}]}],"git":{"createdTime":1719038391000,"updatedTime":1719038391000,"contributors":[{"name":"dream-oyh","email":"1399541701@qq.com","commits":1}]},"readingTime":{"minutes":2.35,"words":704},"filePathRelative":"code/data_structure/graph.md","localizedDate":"2024å¹´6æœˆ22æ—¥","excerpt":"\\n<p><strong>Graph:</strong> A graph G is an ordered pair of a set V of vertices and a set E of edges.</p>\\n<p v-pre=\\"\\" class=\\"katex-block\\"><span class=\\"katex-display\\"><span class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\" display=\\"block\\"><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy=\\"false\\">(</mo><mi>V</mi><mo separator=\\"true\\">,</mo><mi>E</mi><mo stretchy=\\"false\\">)</mo></mrow><annotation encoding=\\"application/x-tex\\">\\nG=(V,E)\\n</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.6833em;\\"></span><span class=\\"mord mathnormal\\">G</span><span class=\\"mspace\\" style=\\"margin-right:0.2778em;\\"></span><span class=\\"mrel\\">=</span><span class=\\"mspace\\" style=\\"margin-right:0.2778em;\\"></span></span><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mopen\\">(</span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.22222em;\\">V</span><span class=\\"mpunct\\">,</span><span class=\\"mspace\\" style=\\"margin-right:0.1667em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.05764em;\\">E</span><span class=\\"mclose\\">)</span></span></span></span></span></p>","autoDesc":true}');export{H as comp,P as data};
