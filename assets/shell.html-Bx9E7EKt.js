import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,d as s,b as n,a,e as l}from"./app-ICMsqYQG.js";const p={},d=s("h1",{id:"shell",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#shell"},[s("span",null,"Shell")])],-1),r=s("h2",{id:"学习",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#学习"},[s("span",null,"学习")])],-1),h={href:"https://missing-semester-cn.github.io/",target:"_blank",rel:"noopener noreferrer"},m=l(`<p>本文采用 Bourne Again Shell（bash）来学习 Shell 命令行的使用。</p><h2 id="shell-的本质" tabindex="-1"><a class="header-anchor" href="#shell-的本质"><span>Shell 的本质</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">date</span> <span class="token comment"># 输出时间</span>
<span class="token builtin class-name">echo</span> <span class="token operator">&lt;</span>str<span class="token operator">&gt;</span> <span class="token comment"># 输出字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Shell 的本质是编程环境，具备变量、条件、循环和函数，当要求 shell 执行指定命令时，但是该变量不是 shell 指定关键字，则其会去寻找 <code>$path</code> 环境变量，它会列出当 shell 接收到某条指令时进行程序搜索的路径。Shell 通过空格分割指令，因此如果指令中包含空格，则需要用引号括起来。</p><blockquote><p>但是引号的含义并不相同，<code>&#39;</code>定义的字符串为原义字符串，其中的变量不会被转义，<code>&quot;</code>定义的字符串会被变量值替代。</p></blockquote><p><code>$path</code>会提供一系列由<code>:</code>分割的系列目录，基于名字搜索该程序，当找到该程序时便执行。确定某程序的路径可以使用 <code>which &lt;command&gt;</code> 命令来查询。</p>`,6),u=s("p",null,[s("code",null,"man <command>"),n(" 该指令会接受指令名作为参数，并且返回他的用户手册。注意，使用"),s("code",null,"q"),n("可以退出手册。")],-1),v={href:"https://tldr.sh/",target:"_blank",rel:"noopener noreferrer"},b=l(`<h3 id="shell-导航" tabindex="-1"><a class="header-anchor" href="#shell-导航"><span>Shell 导航</span></a></h3><p>平常计算机上常用的文件路径由斜杠分割，windows 用 <code>\\</code> 分割，Linux 和 MacOS 上用 <code>/</code> 分割。</p><p>Linux 系统上的<code>/</code>代表根目录。Windows 上的每个盘<code>C:\\</code>也是根目录，以前两者开头的路径是<strong>绝对路径</strong>，其他的都是<strong>相对路径</strong>。相对路径中<code>.</code>表示的是当前目录，而<code>..</code>表示的是上级目录。</p><p>导航基本指令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">pwd</span> <span class="token comment"># 显示当前工作目录</span>
<span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>dir<span class="token operator">&gt;</span> <span class="token comment"># 切换到指定目录</span>
<span class="token function">ls</span> <span class="token comment"># 显示当前目录下的文件</span>
<span class="token function">mkdir</span> <span class="token operator">&lt;</span>dir<span class="token operator">&gt;</span> <span class="token comment"># 创建目录</span>
<span class="token function">rmdir</span> <span class="token operator">&lt;</span>dir<span class="token operator">&gt;</span> <span class="token comment"># 删除目录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="重定向输入输出流" tabindex="-1"><a class="header-anchor" href="#重定向输入输出流"><span>重定向输入输出流</span></a></h3><p>信息在计算机上通过输入输出流传递，一般而言，输入流是键盘，输出流是显示屏。</p><p>最简单的输入输出流重定向是<code>&gt; file</code>和<code>&lt; file</code>。<code>echo</code>和<code>cat</code>能够使输入输出流重定向到指定文件。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> hello <span class="token operator">&gt;</span> hello.txt <span class="token comment"># 写入文件</span>
<span class="token function">cat</span> hello.txt <span class="token comment"># 显示文件内容</span>
<span class="token function">cat</span> <span class="token operator">&lt;</span> hello.txt <span class="token comment"># 读取文件</span>
<span class="token function">cat</span> <span class="token operator">&lt;</span> hello.txt <span class="token operator">&gt;</span> hello2.txt <span class="token comment"># 读出文件并写入新文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="shell-脚本" tabindex="-1"><a class="header-anchor" href="#shell-脚本"><span>Shell 脚本</span></a></h2><h3 id="变量赋值" tabindex="-1"><a class="header-anchor" href="#变量赋值"><span>变量赋值</span></a></h3><p><code>foo=bar</code></p><p>该语句即可将<code>bar</code>字符串赋值给<code>foo</code>变量，值得注意的是，<code>=</code><strong>两侧不能有空格</strong> 。</p><h3 id="条件、循环、函数语句" tabindex="-1"><a class="header-anchor" href="#条件、循环、函数语句"><span>条件、循环、函数语句</span></a></h3><p>在 Shell 脚本中，Shell 像主流编程软件一样可以使用条件语句、循环语句和函数语句。</p><h4 id="条件语句" tabindex="-1"><a class="header-anchor" href="#条件语句"><span>条件语句：</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">if</span> commands<span class="token punctuation">;</span> <span class="token keyword">then</span>
  commands
<span class="token punctuation">[</span>elif commands<span class="token punctuation">;</span> <span class="token keyword">then</span>
  commands<span class="token punctuation">]</span>
<span class="token punctuation">[</span>else
  commands<span class="token punctuation">]</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>test</code>语句也可实现条件判断：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">test</span> <span class="token operator">&lt;</span>commands<span class="token operator">&gt;</span> <span class="token comment"># 写法一，表达式为真，test 命令执行成功，返回0，否则返回1.</span>
<span class="token punctuation">[</span> commands <span class="token punctuation">]</span>  <span class="token comment"># 写法二，同上，注意命令和[]的空格</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span> commands <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment"># 写法三，同上，但是支持正则判断</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">逻辑运算</p><p>Shell 中的逻辑运算采用<code>&amp;&amp;</code> 与 <code>||</code></p></div><h4 id="循环语句" tabindex="-1"><a class="header-anchor" href="#循环语句"><span>循环语句</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">variable</span> <span class="token keyword">in</span> list  
<span class="token keyword">do</span>  
commands  
<span class="token keyword">done</span>
<span class="token comment"># 或者</span>
<span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span> expression1<span class="token punctuation">;</span> expression2<span class="token punctuation">;</span> expression3 <span class="token punctuation">))</span></span>  <span class="token comment"># 注意空格 </span>
<span class="token keyword">do</span>  
commands  
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="定义函数" tabindex="-1"><a class="header-anchor" href="#定义函数"><span>定义函数</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function-name function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">&lt;</span>commands<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bash 使用了很多特殊的变量来表示参数、错误代码和相关变量。</p><details class="hint-container details"><summary>特殊变量</summary><ul><li><code>$0</code> - 脚本名</li><li><code>$1</code> 到 <code>$9</code> - 脚本的参数</li><li><code>$@</code> - 所有参数</li><li><code>$#</code> - 参数个数</li><li><code>$?</code> - 前一个命令的返回值</li><li><code>$$</code> - 当前脚本的进程识别码</li><li><code>!!</code> - 完整的上一条命令</li><li><code>$_</code> - 上一条命令的最后一个参数</li></ul></details><p>命令行通常以<code>STDOUT</code>来返回输出值，以<code>STDERR</code>来返回错误值和错误码，便于脚本以更加友好的方式报告错误，返回值为<code>0</code>表示正常进行，任何非<code>0</code>的值都表示有错误发生</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Shell 中<code>true</code>代表返回值是<code>0</code>，<code>false</code>代表返回值是<code>1</code>。</p></div><h3 id="命令替换" tabindex="-1"><a class="header-anchor" href="#命令替换"><span>命令替换</span></a></h3><p><code>$( CMD )</code>这样的方式会让<code>CMD</code>命令的输出结果，替换掉<code>$( CMD )</code>，这样就可以实现命令的嵌套。</p><p>如：<code>for files in $( ls )</code>就可以遍历文件夹下的所有文件。</p><h3 id="通配" tabindex="-1"><a class="header-anchor" href="#通配"><span>通配</span></a></h3><ul><li>通配符 Bash 执行脚本时，往往会提供一连串形式类似的参数，通配符的出现很好的解决了这个问题，可以使用<code>?</code>或<code>*</code>来匹配任意的一个或多个字符，这和正则表达式有点像，但是并不相同。</li></ul><blockquote><p>正则表达式中的<code>?</code>与<code>*</code>是对前一个字符的限定，而此处的通配符是对该位上的字符匹配。</p></blockquote><ul><li>花括号 当你有一系列的指令，其中包含一段公共子串时，可以用花括号来自动展开这些命令。这在批量移动或转换文件时非常方便。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cp</span> /path/to/project/<span class="token punctuation">{</span>foo,bar,baz<span class="token punctuation">}</span>.sh /newpath
<span class="token comment"># 会展开为</span>
<span class="token function">cp</span> /path/to/project/foo.sh /path/to/project/bar.sh /path/to/project/baz.sh /newpath

<span class="token comment"># 也可以结合通配使用</span>
<span class="token function">mv</span> *<span class="token punctuation">{</span>.py,.sh<span class="token punctuation">}</span> folder
<span class="token comment"># 会移动所有 *.py 和 *.sh 文件=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="shebang" tabindex="-1"><a class="header-anchor" href="#shebang"><span>shebang</span></a></h3><p><code>#!</code> 被称为 shebang，它出现在脚本的第一行，用于指定脚本的解释器，它会利用环境变量中的程序来解析该脚本，这样就提高来您的脚本的可移植性。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/local/bin/python</span>
<span class="token function">import</span> sys
<span class="token keyword">for</span> <span class="token for-or-select variable">arg</span> <span class="token keyword">in</span> reversed<span class="token punctuation">(</span>sys.argv<span class="token punctuation">[</span><span class="token number">1</span>:<span class="token punctuation">]</span><span class="token punctuation">)</span>:
    print<span class="token punctuation">(</span>arg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>shebang</code> 定义了脚本的解释器，也就是说让<code>.sh</code>脚本不一定使用<code>bash</code>语言编写，而可以通过<code>shebang</code>来调用不同的环境变量，使用不同的解释器来编译脚本。</p><h3 id="查找文件find" tabindex="-1"><a class="header-anchor" href="#查找文件find"><span>查找文件<code>find</code></span></a></h3><p><code>find</code>命令可以用来递归搜索符合条件的文件，是 Shell 上绝佳的文件查找工具，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查找所有名称为src的文件夹</span>
<span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> src <span class="token parameter variable">-type</span> d
<span class="token comment"># 查找所有文件夹路径中包含test的python文件</span>
<span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-path</span> <span class="token string">&#39;*/test/*.py&#39;</span> <span class="token parameter variable">-type</span> f
<span class="token comment"># 查找前一天修改的所有文件</span>
<span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-mtime</span> <span class="token parameter variable">-1</span>
<span class="token comment"># 查找所有大小在500k至10M的tar.gz文件</span>
<span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-size</span> +500k <span class="token parameter variable">-size</span> <span class="token parameter variable">-10M</span> <span class="token parameter variable">-name</span> <span class="token string">&#39;*.tar.gz&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查找代码grep" tabindex="-1"><a class="header-anchor" href="#查找代码grep"><span>查找代码<code>grep</code></span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">grep</span> <span class="token parameter variable">-C</span> <span class="token comment"># 获取查找结果的上下文</span>
<span class="token function">grep</span> <span class="token parameter variable">-C</span> <span class="token number">5</span> <span class="token comment"># 输出匹配结果的前后五行</span>
<span class="token function">grep</span> <span class="token parameter variable">-V</span> <span class="token comment"># 反选</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查找所有使用了 requests 库的文件</span>
rg <span class="token parameter variable">-t</span> py <span class="token string">&#39;import requests&#39;</span>
<span class="token comment"># 查找所有没有写 shebang 的文件（包含隐藏文件）</span>
rg <span class="token parameter variable">-u</span> --files-without-match <span class="token string">&quot;^#!&quot;</span>
<span class="token comment"># 查找所有的foo字符串，并打印其之后的5行</span>
rg foo <span class="token parameter variable">-A</span> <span class="token number">5</span>
<span class="token comment"># 打印匹配的统计信息（匹配的行和文件的数量）</span>
rg <span class="token parameter variable">--stats</span> PATTERN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46);function k(g,f){const e=o("ExternalLinkIcon");return c(),i("div",null,[d,r,s("p",null,[s("a",h,[n("The Missing"),a(e)])]),m,s("blockquote",null,[u,s("p",null,[n("有时候用户手册内的指令太过详实，可以采用"),s("a",v,[n("TLDR Pages"),a(e)]),n("作为替代品。")])]),b])}const _=t(p,[["render",k],["__file","shell.html.vue"]]),S=JSON.parse('{"path":"/code/shell.html","title":"Shell","lang":"zh-CN","frontmatter":{"date":"2024-02-16T00:00:00.000Z","icon":"powershell","category":["计算机","底层"],"tag":"教程","description":"Shell 学习 The Missing 本文采用 Bourne Again Shell（bash）来学习 Shell 命令行的使用。 Shell 的本质 Shell 的本质是编程环境，具备变量、条件、循环和函数，当要求 shell 执行指定命令时，但是该变量不是 shell 指定关键字，则其会去寻找 $path 环境变量，它会列出当 shell 接收...","head":[["meta",{"property":"og:url","content":"https://dream-oyh.github.io/code/shell.html"}],["meta",{"property":"og:site_name","content":"Dream_oyh 的 blog"}],["meta",{"property":"og:title","content":"Shell"}],["meta",{"property":"og:description","content":"Shell 学习 The Missing 本文采用 Bourne Again Shell（bash）来学习 Shell 命令行的使用。 Shell 的本质 Shell 的本质是编程环境，具备变量、条件、循环和函数，当要求 shell 执行指定命令时，但是该变量不是 shell 指定关键字，则其会去寻找 $path 环境变量，它会列出当 shell 接收..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T14:32:00.000Z"}],["meta",{"property":"article:author","content":"OYH"}],["meta",{"property":"article:tag","content":"教程"}],["meta",{"property":"article:published_time","content":"2024-02-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T14:32:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Shell\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-17T14:32:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OYH\\",\\"email\\":\\"19859860010@163.com\\"}]}"]]},"headers":[{"level":2,"title":"学习","slug":"学习","link":"#学习","children":[]},{"level":2,"title":"Shell 的本质","slug":"shell-的本质","link":"#shell-的本质","children":[{"level":3,"title":"Shell 导航","slug":"shell-导航","link":"#shell-导航","children":[]},{"level":3,"title":"重定向输入输出流","slug":"重定向输入输出流","link":"#重定向输入输出流","children":[]}]},{"level":2,"title":"Shell 脚本","slug":"shell-脚本","link":"#shell-脚本","children":[{"level":3,"title":"变量赋值","slug":"变量赋值","link":"#变量赋值","children":[]},{"level":3,"title":"条件、循环、函数语句","slug":"条件、循环、函数语句","link":"#条件、循环、函数语句","children":[]},{"level":3,"title":"命令替换","slug":"命令替换","link":"#命令替换","children":[]},{"level":3,"title":"通配","slug":"通配","link":"#通配","children":[]},{"level":3,"title":"shebang","slug":"shebang","link":"#shebang","children":[]},{"level":3,"title":"查找文件find","slug":"查找文件find","link":"#查找文件find","children":[]},{"level":3,"title":"查找代码grep","slug":"查找代码grep","link":"#查找代码grep","children":[]}]}],"git":{"createdTime":1708053243000,"updatedTime":1708180320000,"contributors":[{"name":"dream同学0","email":"1399541701@qq.com","commits":2},{"name":"dream_linux","email":"1399541701@qq.com","commits":1}]},"readingTime":{"minutes":5.33,"words":1598},"filePathRelative":"code/shell.md","localizedDate":"2024年2月16日","excerpt":"\\n<h2>学习</h2>\\n<p><a href=\\"https://missing-semester-cn.github.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">The Missing</a></p>\\n<p>本文采用 Bourne Again Shell（bash）来学习 Shell 命令行的使用。</p>\\n<h2>Shell 的本质</h2>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">date</span> <span class=\\"token comment\\"># 输出时间</span>\\n<span class=\\"token builtin class-name\\">echo</span> <span class=\\"token operator\\">&lt;</span>str<span class=\\"token operator\\">&gt;</span> <span class=\\"token comment\\"># 输出字符串</span>\\n</code></pre></div>","autoDesc":true}');export{_ as comp,S as data};
