import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as l,c as r,d as e,b as o,a as t,e as d}from"./app-Dn1MxM32.js";const a={},s=e("h1",{id:"vscode",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#vscode"},[e("span",null,"VSCode")])],-1),u=e("h2",{id:"arduino-开发环境配置",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#arduino-开发环境配置"},[e("span",null,"Arduino 开发环境配置")])],-1),p=e("p",null,"踩了无数的坑之后，终于把 Arduino 开发板的配置搞定了。",-1),m=e("p",null,"Arduino 作为入手成本很低的嵌入式开发工具，很受 biginner 欢迎，但是您能不能把编辑器做好一点（微笑），原生的编辑器设计我不敢恭维，没有自动补全，没有 formatter，差劲的代码高亮，这些都让开发变得极其困难。秉持着 All in VSCode 的原则，我尝试了一下将 Arduino 开发环境也集成进 VSCode，结果一折腾就是半天，现将经验整理如下。",-1),h=e("p",null,"安装环境",-1),g=e("li",null,"安装 VSCode",-1),_={href:"https://www.arduino.cc/en/software",target:"_blank",rel:"noopener noreferrer"},v=e("blockquote",null,[e("p",null,[e("strong",null,"踩坑 (?)")]),e("p",null,[o("这里我到现在也没法确定我是不是被这一步的版本所害，总之在最后，我下载的是"),e("code",null,"1.8.19"),o("版本的 IDE，如果我下载最新版的就没法用（但是做到最后，我又感觉下最新版的应该也可以用，有没有小伙伴替我踩踩坑）")])],-1),b=d(`<li><p>安装插件</p><ul><li>VSCode 中安装<code>arduino</code>插件</li></ul></li><li><p>配置插件</p><ul><li><code>arduino.enableUSBDetection</code> true</li><li><code>arduino.useArduinoCli</code> true <blockquote><p>在 setting 中配置这俩即可，arduino 配置时必须保证<code>arduino.Path</code>和<code>arduino.Command Path</code>是空的，而勾选<code>useArduinoCli</code>则意味着采用扩展捆绑的编辑器，所以和之前下载的版本应该是没有关系的（但是不代表不要下载 IDE，下载 IDE 过程中会把 arduino 编译器下载到 C 盘中，等会儿会用到）。</p></blockquote></li></ul></li><li><p>配置 <code>C/C++</code> 环境</p><blockquote><p>我最大的踩坑就在这，由于最开始不知道要配置 C/C++ 环境，才导致 arduino 直接就不可用</p></blockquote><ul><li>VSCode 中按<code>&lt;Ctrl-Shift-P&gt;</code>打开命令面板，选择<code>C/C++: 编辑配置（UI）</code>，添加配置名为<code>Arduino</code>，将下方的指定编译器改为：</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&quot;C:\\Users\\&lt;Username&gt;\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7\\bin\\avr-g++&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意其中的<code>&lt;Username&gt;</code>需要改成 windows 用户名。（在设置之前，最好查看一下该路径下是否存在<code>avr-g++.exe</code>，如果不存在，说明最开始安装<code>arduino IDE</code>时没有安装成功）</p><blockquote><p>这和前面 IDE 的安装路径无关，这个编译器默认是安装在这个路径下的，找就行了，安装过程中也无法修改他的安装路径。</p></blockquote><ul><li>将该配置页面下的<code>IntelliSense模式</code>改成<code>gcc-x64(legacy)</code><div class="hint-container important"><p class="hint-container-title">提示</p><p>此时，如果不出意外，在该文件夹内应该会出现<code>.vscode</code>文件夹，内部有<code>c_cpp_properities.json</code>文件，该文件内存储了我们刚刚输入的配置信息。这个也是<code>VSCode</code>的局部配置。之后会出现的<code>arduino.json</code>也同理，是局部配置。</p><blockquote><p>（知道叫这个名就行，区别于<code>settings.json</code>，这里面写的都是全局配置，局部配置只在其所在文件夹中生效）</p></blockquote><p>所以之后 arduino 项目的创建都得在该文件夹下进行。(建议重开一个文件夹专门用于 arduino 项目管理，并且把<code>.vscode</code>文件夹捎上)</p></div></li></ul></li><li><p>新建一个<code>.ino</code>程序，输入：</p></li>`,4),C=d(`<div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>void setup(){

}
void loop(){

} // 随便写点什么都可以

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>点击 VSCode 右下角<code>WIN32</code>，在跳出窗口中选择<code>Arduino</code>。</li><li>VSCode 中按<code>&lt;Ctrl-Shift-P&gt;</code>打开命令面板，选择<code>arduino:initialize</code>，运行指令后，根据具体情况在右下角的<code>&lt;Select Programmer&gt;</code> <code>&lt;Select Board Type&gt;</code> <code>&lt;Select Serial Port&gt;</code>，之后会发现<code>.vscode</code>文件夹中又生成了<code>arduino.json</code>文件。</li></ul><p>到此为止，环境就算配置成功了！</p>`,3),f={class:"hint-container details"},A=e("summary",null,"Warning 解决：[Warning] Output path is not specified. Unable to reuse previously compiled files. Verify could be slow.",-1),S={href:"https://arduino.stackexchange.com/questions/45347/warning-when-verifying-sketch-with-vs-code",target:"_blank",rel:"noopener noreferrer"},k=e("p",null,[o("需要在刚产生的"),e("code",null,"arduino.json"),o("文件里，添加"),e("code",null,'"output": "../ArduinoOutput"'),o("（这个路径可以自定义和更改），这样这个"),e("code",null,"warning"),o("就能解决了。 "),e("s",null,"添加时，注意不要漏了逗号")],-1),x={class:"hint-container details"},q=e("summary",null,"问题解决：Verify 后终端出现中文乱码",-1),y={href:"https://blog.csdn.net/weixin_42225355/article/details/104906950",target:"_blank",rel:"noopener noreferrer"},V=e("s",null,"你就说这个破 arduino 做的是什么东西啊，乱七八糟的问题一堆。。",-1);function w(D,I){const n=c("ExternalLinkIcon");return l(),r("div",null,[s,u,p,m,e("ul",null,[e("li",null,[h,e("ul",null,[g,e("li",null,[o("安装 "),e("a",_,[o("Arduino IDE"),t(n)]),v])])]),b]),C,e("details",f,[A,e("p",null,[o("在网上搜索后，找到了"),e("a",S,[o("参考文档"),t(n)])]),k]),e("details",x,[q,e("p",null,[o("参考"),e("a",y,[o("该文档"),t(n)]),o("修改即可 "),V])])])}const U=i(a,[["render",w],["__file","vscode.html.vue"]]),j=JSON.parse('{"path":"/code/vscode.html","title":"VSCode","lang":"zh-CN","frontmatter":{"icon":"vscode","category":"工具","tag":"教程","description":"VSCode Arduino 开发环境配置 踩了无数的坑之后，终于把 Arduino 开发板的配置搞定了。 Arduino 作为入手成本很低的嵌入式开发工具，很受 biginner 欢迎，但是您能不能把编辑器做好一点（微笑），原生的编辑器设计我不敢恭维，没有自动补全，没有 formatter，差劲的代码高亮，这些都让开发变得极其困难。秉持着 All i...","head":[["meta",{"property":"og:url","content":"https://dream-oyh.github.io/code/vscode.html"}],["meta",{"property":"og:site_name","content":"Dream_oyh 的 blog"}],["meta",{"property":"og:title","content":"VSCode"}],["meta",{"property":"og:description","content":"VSCode Arduino 开发环境配置 踩了无数的坑之后，终于把 Arduino 开发板的配置搞定了。 Arduino 作为入手成本很低的嵌入式开发工具，很受 biginner 欢迎，但是您能不能把编辑器做好一点（微笑），原生的编辑器设计我不敢恭维，没有自动补全，没有 formatter，差劲的代码高亮，这些都让开发变得极其困难。秉持着 All i..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-03T06:59:50.000Z"}],["meta",{"property":"article:author","content":"OYH"}],["meta",{"property":"article:tag","content":"教程"}],["meta",{"property":"article:modified_time","content":"2024-03-03T06:59:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"VSCode\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-03T06:59:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OYH\\",\\"email\\":\\"19859860010@163.com\\"}]}"]]},"headers":[{"level":2,"title":"Arduino 开发环境配置","slug":"arduino-开发环境配置","link":"#arduino-开发环境配置","children":[]}],"git":{"createdTime":1707929375000,"updatedTime":1709449190000,"contributors":[{"name":"dream同学0","email":"1399541701@qq.com","commits":4},{"name":"dream_linux","email":"1399541701@qq.com","commits":1}]},"readingTime":{"minutes":3.32,"words":995},"filePathRelative":"code/vscode.md","localizedDate":"2024年2月14日","excerpt":"\\n<h2>Arduino 开发环境配置</h2>\\n<p>踩了无数的坑之后，终于把 Arduino 开发板的配置搞定了。</p>\\n<p>Arduino 作为入手成本很低的嵌入式开发工具，很受 biginner 欢迎，但是您能不能把编辑器做好一点（微笑），原生的编辑器设计我不敢恭维，没有自动补全，没有 formatter，差劲的代码高亮，这些都让开发变得极其困难。秉持着 All in VSCode 的原则，我尝试了一下将 Arduino 开发环境也集成进 VSCode，结果一折腾就是半天，现将经验整理如下。</p>\\n<ul>\\n<li>\\n<p>安装环境</p>\\n<ul>\\n<li>安装 VSCode</li>\\n<li>安装 <a href=\\"https://www.arduino.cc/en/software\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Arduino IDE</a>\\n<blockquote>\\n<p><strong>踩坑 (?)</strong></p>\\n<p>这里我到现在也没法确定我是不是被这一步的版本所害，总之在最后，我下载的是<code>1.8.19</code>版本的 IDE，如果我下载最新版的就没法用（但是做到最后，我又感觉下最新版的应该也可以用，有没有小伙伴替我踩踩坑）</p>\\n</blockquote>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>安装插件</p>\\n<ul>\\n<li>VSCode 中安装<code>arduino</code>插件</li>\\n</ul>\\n</li>\\n<li>\\n<p>配置插件</p>\\n<ul>\\n<li><code>arduino.enableUSBDetection</code> true</li>\\n<li><code>arduino.useArduinoCli</code> true\\n<blockquote>\\n<p>在 setting 中配置这俩即可，arduino 配置时必须保证<code>arduino.Path</code>和<code>arduino.Command Path</code>是空的，而勾选<code>useArduinoCli</code>则意味着采用扩展捆绑的编辑器，所以和之前下载的版本应该是没有关系的（但是不代表不要下载 IDE，下载 IDE 过程中会把 arduino 编译器下载到 C 盘中，等会儿会用到）。</p>\\n</blockquote>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>配置 <code>C/C++</code> 环境</p>\\n<blockquote>\\n<p>我最大的踩坑就在这，由于最开始不知道要配置 C/C++ 环境，才导致 arduino 直接就不可用</p>\\n</blockquote>\\n<ul>\\n<li>VSCode 中按<code>&lt;Ctrl-Shift-P&gt;</code>打开命令面板，选择<code>C/C++: 编辑配置（UI）</code>，添加配置名为<code>Arduino</code>，将下方的指定编译器改为：</li>\\n</ul>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>\\"C:\\\\Users\\\\&lt;Username&gt;\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\arduino\\\\tools\\\\avr-gcc\\\\7.3.0-atmel3.6.1-arduino7\\\\bin\\\\avr-g++\\"\\n</code></pre></div><p>注意其中的<code>&lt;Username&gt;</code>需要改成 windows 用户名。（在设置之前，最好查看一下该路径下是否存在<code>avr-g++.exe</code>，如果不存在，说明最开始安装<code>arduino IDE</code>时没有安装成功）</p>\\n<blockquote>\\n<p>这和前面 IDE 的安装路径无关，这个编译器默认是安装在这个路径下的，找就行了，安装过程中也无法修改他的安装路径。</p>\\n</blockquote>\\n<ul>\\n<li>将该配置页面下的<code>IntelliSense模式</code>改成<code>gcc-x64(legacy)</code><div class=\\"hint-container important\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>此时，如果不出意外，在该文件夹内应该会出现<code>.vscode</code>文件夹，内部有<code>c_cpp_properities.json</code>文件，该文件内存储了我们刚刚输入的配置信息。这个也是<code>VSCode</code>的局部配置。之后会出现的<code>arduino.json</code>也同理，是局部配置。</p>\\n<blockquote>\\n<p>（知道叫这个名就行，区别于<code>settings.json</code>，这里面写的都是全局配置，局部配置只在其所在文件夹中生效）</p>\\n</blockquote>\\n<p>所以之后 arduino 项目的创建都得在该文件夹下进行。(建议重开一个文件夹专门用于 arduino 项目管理，并且把<code>.vscode</code>文件夹捎上)</p>\\n</div>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>新建一个<code>.ino</code>程序，输入：</p>\\n</li>\\n</ul>","autoDesc":true}');export{U as comp,j as data};
