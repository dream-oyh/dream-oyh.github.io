import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,o as s,c as d,d as e,b as o,a as t,w as r,e as n}from"./app-Dzo6kp7y.js";const p={},m=e("h1",{id:"vim-编辑器",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#vim-编辑器"},[e("span",null,"vim 编辑器")])],-1),h={href:"https://zh.wikipedia.org/wiki/Vim",target:"_blank",rel:"noopener noreferrer"},u=e("p",null,"Vim 是一个多模态编辑器：它对于插入文字和操纵文字有不同的模式。Vim 是可编程的（可以使用 Vimscript 或者像 Python 一样的其他程序语言），Vim 的接口本身也是一个程序语言：键入操作（以及其助记名）是命令，这些命令也是可组合的。Vim 避免了使用鼠标，因为那样太慢了；Vim 甚至避免用上下左右键因为那样需要太多的手指移动。",-1),v={href:"https://coolshell.cn/articles/5426.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://awesome-programming-books.github.io/vim/Vim%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7.pdf",target:"_blank",rel:"noopener noreferrer"},f=n(`<blockquote><p>I try to use vim for a short time, but it can&#39;t work for me effectively. I can&#39;t get accustomed to the strange operation of vim. In a few moments, I gave up. But! When I shift to the normal keyboard. I find that I can&#39;t work without vim. The sharp and rapid movement can let me locate quickly and acuurately. One difficult is that there are many conflicting keys, which I need to make some sets. The other is that it&#39;s troublesome to shift from Chinese to English.(<s>Well, that&#39;s dropout Chinese to wirte!(like this paragraph)</s>)</p></blockquote><p>以下的键位均为个人修改映射后的键位，原键位参考学习文档中的键位设置。</p><h2 id="vim-in-vscode" tabindex="-1"><a class="header-anchor" href="#vim-in-vscode"><span>Vim in VScode</span></a></h2><p>以下有标注“（修改）”的配置均为我的 Vim 编辑器在 VSCode 中的个性化修改，通过修改<code>settings.json</code>可以对键位进行调整，调整方式如下：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code> <span class="token comment">// 正常模式下的非递归按键绑定</span>
   <span class="token property">&quot;vim.normalModeKeyBindingsNonRecursive&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// 插入模式下的非递归按键绑定</span>
   <span class="token property">&quot;vim.insertModeKeyBindings&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
   <span class="token comment">// 命令模式下的非递归按键绑定</span>
   <span class="token property">&quot;vim.commandLineModeKeyBindingsNonRecursive&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
   <span class="token comment">// 可视模式下的非递归按键绑定</span>
   <span class="token property">&quot;vim.operatorPendingModeKeyBindings&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模式切换" tabindex="-1"><a class="header-anchor" href="#模式切换"><span>模式切换</span></a></h2><p>默认情况下，vim 处于正常模式，其左下角会显示当前模式。vim 一共有四种模式：</p><ul><li>正常模式（Normal mode）</li><li>插入模式（Insert mode）</li><li>命令模式（Command-line mode）</li><li>可视模式（Visual mode）——可以用于选择文本块<div class="hint-container tip"><p class="hint-container-title">vim 切换模式键位</p><ul><li><code>&lt;Esc&gt;</code>键 支持从任意模式返回正常模式</li><li><code>h</code> 切换至插入模式 (修改后)</li><li><code>R</code> 进入替换模式</li><li><code>v</code> 进入可视化（一般）模式</li><li><code>&lt;Shift-v&gt;</code> 进入可视（行）模式</li><li><code>Ctrl+v</code> 进入可视块模式</li><li><code>:</code> 进入命令模式</li></ul></div></li></ul><h2 id="正常模式" tabindex="-1"><a class="header-anchor" href="#正常模式"><span>正常模式</span></a></h2><h3 id="移动光标" tabindex="-1"><a class="header-anchor" href="#移动光标"><span>移动光标</span></a></h3><p>键位（均为修改后）：</p><ul><li><code>j</code>左移</li><li><code>k</code>下移</li><li><code>l</code>右移</li><li><code>i</code>上移</li></ul><h3 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作"><span>基本操作</span></a></h3><ul><li><code>h</code> 切换至 insert 模式，按<code>&lt;Esc&gt;</code>回到正常模式</li><li><code>x</code> 删当前光标的字符</li><li><code>dd</code> 删除当前行，并把当前删除行移动至剪贴板（相当于剪切）</li><li><code>:wq</code> 存盘 + 退出</li><li><code>p</code> 在光标位置<strong>之后</strong>粘贴</li><li><code>&lt;Shift-p&gt;</code> 在光标位置<strong>之前</strong>粘贴</li></ul><div class="hint-container tip"><p class="hint-container-title">VSCode Vim 与系统共用剪贴板</p><p>在<code>settings.json</code>中设置</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">&quot;vim.useSystemClipboard&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h3 id="进阶操作" tabindex="-1"><a class="header-anchor" href="#进阶操作"><span>进阶操作</span></a></h3><h4 id="插入模式进阶" tabindex="-1"><a class="header-anchor" href="#插入模式进阶"><span>插入模式进阶</span></a></h4><ul><li><code>a</code>在光标后操作</li><li><code>o</code>在当前行<strong>之后</strong>插入一个新行</li><li><code>&lt;Shift-o&gt;</code>在当前行<strong>之前</strong>插入一个新行</li><li><code>cw</code>清除从光标后到一个单词结尾的字符，并切换到插入模式</li></ul><h4 id="移动光标进阶" tabindex="-1"><a class="header-anchor" href="#移动光标进阶"><span>移动光标进阶</span></a></h4>`,19),k=e("li",null,[e("code",null,"0"),o("移动到行首")],-1),_=e("li",null,[e("code",null,"$"),o("移动到行尾")],-1),b=e("li",null,[e("code",null,"^"),o("移动到本行第一个非空白字符（非空白字符包括空格、tab、换行、回车等）")],-1),y=e("code",null,"/pattern",-1),V=e("code",null,"pattern",-1),q=e("code",null,"n",-1),x=n("<li><code>&lt;num&gt; &lt;Shift-g&gt;</code>到第几行</li><li><code>&lt;Shift-g&gt;</code>到最后一行</li><li><code>w</code>到下一个单词的开头</li><li><code>e</code>到下一个单词的结尾</li><li><code>%</code>匹配括号移动（前提是要把光标移动到括号上）</li><li><code>*</code>匹配光标所在单词，并移动到<strong>下一个</strong>匹配单词</li><li><code>#</code>匹配光标所在单词，并移动到<strong>上一个</strong>匹配单词</li><li><code>&lt;C-a&gt;</code>移动至文件首行 (修改)</li><li><code>fa</code> 到下一个为 a 的字符处，a 可以修改为其他字符</li><li><code>t,</code> 到逗号前的第一个字符，逗号可以变为其他字符</li><li><code>3fa</code> 移动到下一个 a 的字符处，并重复 3 次</li><li><code>3t,</code> 移动到逗号前的第一个字符，并重复 3 次</li><li><code>&lt;Shift-f&gt;</code>和<code>&lt;Shift-t&gt;</code>，和<code>f</code> <code>t</code>一样，只不过方向相反</li>",13),w=n('<div class="hint-container tip"><p class="hint-container-title">区域选择</p><p><code>&lt;action&gt; a &lt;object&gt;</code> 或 <code>&lt;action&gt;h&lt;object&gt;</code>(修改过)</p><p>前者选择（或复制或删除）到的内容会包括<code>&lt;object&gt;</code>符号本身，但是后者选择（或复制或删除）到的内容不包括<code>&lt;object&gt;</code>符号本身。</p><ul><li><code>&lt;action&gt;</code>可以是任何命令，如<code>d</code>删除，<code>y</code>拷贝，<code>v</code>以可视模式选择</li><li><code>&lt;object&gt;</code>可以是<code>w</code>一个单词、<code>s</code>一个句子，一个字符<code>&quot;</code> <code>&#39;</code> <code>(</code> <code>[</code> <code>{</code></li></ul><p>假设有一串字符<code>(map (+) (&quot;foo&quot;))</code>，光标现在在第一个 o 处</p><ul><li><code>vh&quot;</code>，会选择<code>foo</code></li><li><code>va&quot;</code>，会选择<code>&quot;foo&quot;</code></li><li><code>vh)</code>，会选择<code>&quot;foo&quot;</code></li><li><code>va)</code>，会选择<code>(&quot;foo&quot;)</code></li><li><code>v2h)</code>，会选择<code>map (+) (&quot;foo&quot;)</code></li><li><code>v2a)</code>，会选择<code>(map (+) (&quot;foo&quot;))</code></li></ul></div><h4 id="其他进阶操作" tabindex="-1"><a class="header-anchor" href="#其他进阶操作"><span>其他进阶操作</span></a></h4><ul><li><code>u</code>Undo</li><li><code>&lt;C-w&gt;</code> Redo(修改)</li><li>块选中模式下<code>S&lt;str&gt;</code>可为选中的文字两侧加括号/中括号/甚至是 html 标签</li></ul><div class="hint-container tip"><p class="hint-container-title">组合操作</p><p>配合前面的区域选择，<code>S&lt;str&gt;</code>操作可以选择任意区域内容并在两边加上指定的符号。</p></div><h4 id="组合操作" tabindex="-1"><a class="header-anchor" href="#组合操作"><span>组合操作</span></a></h4><ul><li><code>yyp</code> 复制当前行并粘贴至下一行</li><li><code>ye</code> 从当前位置拷贝到本单词的最后一个字符</li></ul>',6);function j(S,C){const i=a("ExternalLinkIcon"),c=a("RouteLink");return s(),d("div",null,[m,e("blockquote",null,[e("p",null,[o("Vim 是从 vi 发展出来的一个文本编辑器。其代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。——"),e("a",h,[o("维基百科"),t(i)])])]),u,e("p",null,[e("a",v,[o("学习"),t(i)])]),e("p",null,[e("a",g,[o("想啃书的话可以看看这里"),t(i)])]),f,e("ul",null,[k,_,b,e("li",null,[y,o(" 搜索"),V,o("字符串，如果有多个匹配，可以按"),q,o("键到下一个，支持"),t(c,{to:"/code/tips/regex.html"},{default:r(()=>[o("正则表达式")]),_:1})]),x]),w])}const I=l(p,[["render",j],["__file","vim.html.vue"]]),N=JSON.parse('{"path":"/code/vim.html","title":"vim 编辑器","lang":"zh-CN","frontmatter":{"date":"2024-02-16T00:00:00.000Z","icon":"vim","category":["计算机","底层"],"tag":"教程","description":"vim 编辑器 Vim 是从 vi 发展出来的一个文本编辑器。其代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。——维基百科 Vim 是一个多模态编辑器：它对于插入文字和操纵文字有不同的模式。Vim 是可编程的（可以使用 Vimscript 或者像 Python 一样的其他程序语言），Vim 的接口本身也是一个程序语言：键入操作...","head":[["meta",{"property":"og:url","content":"https://dream-oyh.github.io/code/vim.html"}],["meta",{"property":"og:site_name","content":"Dream_oyh 的 blog"}],["meta",{"property":"og:title","content":"vim 编辑器"}],["meta",{"property":"og:description","content":"vim 编辑器 Vim 是从 vi 发展出来的一个文本编辑器。其代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。——维基百科 Vim 是一个多模态编辑器：它对于插入文字和操纵文字有不同的模式。Vim 是可编程的（可以使用 Vimscript 或者像 Python 一样的其他程序语言），Vim 的接口本身也是一个程序语言：键入操作..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-25T13:33:05.000Z"}],["meta",{"property":"article:author","content":"OYH"}],["meta",{"property":"article:tag","content":"教程"}],["meta",{"property":"article:published_time","content":"2024-02-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-25T13:33:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vim 编辑器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-25T13:33:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OYH\\",\\"email\\":\\"19859860010@163.com\\"}]}"]]},"headers":[{"level":2,"title":"Vim in VScode","slug":"vim-in-vscode","link":"#vim-in-vscode","children":[]},{"level":2,"title":"模式切换","slug":"模式切换","link":"#模式切换","children":[]},{"level":2,"title":"正常模式","slug":"正常模式","link":"#正常模式","children":[{"level":3,"title":"移动光标","slug":"移动光标","link":"#移动光标","children":[]},{"level":3,"title":"基本操作","slug":"基本操作","link":"#基本操作","children":[]},{"level":3,"title":"进阶操作","slug":"进阶操作","link":"#进阶操作","children":[]}]}],"git":{"createdTime":1708053243000,"updatedTime":1708867985000,"contributors":[{"name":"dream同学0","email":"1399541701@qq.com","commits":5},{"name":"dream_linux","email":"1399541701@qq.com","commits":3}]},"readingTime":{"minutes":4.54,"words":1361},"filePathRelative":"code/vim.md","localizedDate":"2024年2月16日","excerpt":"\\n<blockquote>\\n<p>Vim 是从 vi 发展出来的一个文本编辑器。其代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。——<a href=\\"https://zh.wikipedia.org/wiki/Vim\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">维基百科</a></p>\\n</blockquote>\\n<p>Vim 是一个多模态编辑器：它对于插入文字和操纵文字有不同的模式。Vim 是可编程的（可以使用 Vimscript 或者像 Python 一样的其他程序语言），Vim 的接口本身也是一个程序语言：键入操作（以及其助记名）是命令，这些命令也是可组合的。Vim 避免了使用鼠标，因为那样太慢了；Vim 甚至避免用上下左右键因为那样需要太多的手指移动。</p>","autoDesc":true}');export{I as comp,N as data};
