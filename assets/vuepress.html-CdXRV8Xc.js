import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as l,c as r,a,d as e,b as s,e as o}from"./app-BlcQ1t8t.js";const c={},d=o(`<h1 id="问题列表" tabindex="-1"><a class="header-anchor" href="#问题列表"><span>问题列表</span></a></h1><h2 id="github-图床建立" tabindex="-1"><a class="header-anchor" href="#github-图床建立"><span>github 图床建立</span></a></h2><p>建立 tuchuang.sh 脚本，脚本内容如下（在 git bash 中运行命令）：</p><p>首先需要在 github 中创建 images 分支，作图床载体</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>文件目录地址<span class="token operator">&gt;</span> <span class="token comment">#我这里是docs/.vuepress/public/images    # 1.进入images文件目录下</span>
<span class="token function">git</span> init      <span class="token comment"># 2.创建仓库</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span>     <span class="token comment"># 3.添加目录下所有文件至暂存区</span>
<span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:dream-oyh/dream-oyh.github.io.git     <span class="token comment"># 4.连接远程仓库</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;注释&#39;</span>    <span class="token comment">#此处注释可改为$(date &quot;+%Y%m%d-%H:%M:%S&quot;)，以用系统时间代替</span>
<span class="token function">git</span> branch <span class="token parameter variable">-m</span> images
<span class="token function">git</span> push <span class="token parameter variable">-u</span> <span class="token parameter variable">-f</span> origin images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>origin</code> 可自行编辑，ssh 地址优先于 https 地址</p><p>这里需要用<code>-f</code>进行强制覆盖，<code>origin</code>应与上文中仓库名称相同</p><h2 id="博客部署及源码上传" tabindex="-1"><a class="header-anchor" href="#博客部署及源码上传"><span>博客部署及源码上传</span></a></h2><p>部署代码采用 bash 脚本，脚本代码如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> init
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;deploy:&#39;</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token string">&quot;+%Y%m%d-%H:%M:%S&quot;</span><span class="token variable">)</span></span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> code_hope
<span class="token function">git</span> push git@github.com:dream-oyh/dream-oyh.github.io.git code_hope

<span class="token function">pnpm</span> build
<span class="token builtin class-name">cd</span> src/.vuepress/dist
<span class="token function">git</span> init
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;deploy:&#39;</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token string">&quot;+%Y%m%d-%H:%M:%S&quot;</span><span class="token variable">)</span></span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> main_hope
<span class="token function">git</span> push git@github.com:dream-oyh/dream-oyh.github.io.git <span class="token parameter variable">-f</span> main_hope
<span class="token builtin class-name">exec</span> /bin/bash
<span class="token builtin class-name">cd</span> -
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="weak-map-key-错误信息" tabindex="-1"><a class="header-anchor" href="#weak-map-key-错误信息"><span>“weak map key”错误信息</span></a></h2><p>原因：使用了<code>&lt;/font&gt;</code>等未知 html 标签以及一些自定义组件标签。</p><p><code>&lt;/font&gt;</code>改用<code>&lt;/text&gt;</code>标签之后即可正常使用</p><p>错误代码如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>TypeError: Invalid value used as weak map key
    at WeakMap.set (&lt;anonymous&gt;)
    at normalizePropsOptions (C:\\Users\\oyh\\vuepress-starter\\node_modules\\@vue\\runtime-core\\dist\\runtime-core.cjs.prod.js:3179:15)
    at createComponentInstance (C:\\Users\\oyh\\vuepress-starter\\node_modules\\@vue\\runtime-core\\dist\\runtime-core.cjs.prod.js:5695:23)
    at renderComponentVNode (C:\\Users\\oyh\\vuepress-starter\\node_modules\\@vue\\server-renderer\\dist\\server-renderer.cjs.prod.js:168:22)
    at Object.ssrRenderComponent (C:\\Users\\oyh\\vuepress-starter\\node_modules\\@vue\\server-renderer\\dist\\server-renderer.cjs.prod.js:605:12)
    at _sfc_ssrRender$b (C:\\Users\\oyh\\vuepress-starter\\docs\\.vuepress\\.temp\\.server\\app.js:1362:24)
    at renderComponentSubTree (C:\\Users\\oyh\\vuepress-starter\\node_modules\\@vue\\server-renderer\\dist\\server-renderer.cjs.prod.js:250:13)
    at renderComponentVNode (C:\\Users\\oyh\\vuepress-starter\\node_modules\\@vue\\server-renderer\\dist\\server-renderer.cjs.prod.js:185:16)
    at renderVNode (C:\\Users\\oyh\\vuepress-starter\\node_modules\\@vue\\server-renderer\\dist\\server-renderer.cjs.prod.js:292:22)
    at renderComponentSubTree (C:\\Users\\oyh\\vuepress-starter\\node_modules\\@vue\\server-renderer\\dist\\server-renderer.cjs.prod.js:256:13)

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在-vuepress-中插入思维导图" tabindex="-1"><a class="header-anchor" href="#在-vuepress-中插入思维导图"><span>在 vuepress 中插入思维导图</span></a></h2>`,16),u=e("p",null,"在 vscode 中下载“markmap”插件，如下图所示：",-1),m=e("div",{style:{"text-align":"center"}},[e("img",{alt:"markmap插件",src:"https://cdn.statically.io/gh/dream-oyh/dream-oyh.github.io/images/vuepress_1.png",width:"60%",height:"60%"})],-1),h=e("p",null,"新建一个.md 或.mm 文档，用于构建思维导图 html 文件",-1),g=e("p",null,"点击 vscode 右上角思维导图图标（若没有该图标，则是未成功安装插件）",-1),v=e("div",{style:{"text-align":"center"}},[e("img",{alt:"markmap思维导图图标",src:"https://cdn.statically.io/gh/dream-oyh/dream-oyh.github.io/images/vuepress_2.png"})],-1),b=e("p",null,"即可打开思维导图窗口进行绘制",-1),k=e("p",null,[s("绘制完成后，点击右下角"),e("code",null,"export"),s("，生成 html 文件")],-1),f=e("p",null,"将 html 文件移动至 docs/.vuepress/public/markmap/中",-1),_=o(`<p>利用 iframe 标签在你的 markdown 中插入思维导图</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$withBase(&#39;/markmap/xxx.html&#39;)<span class="token punctuation">&quot;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100%<span class="token punctuation">&quot;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>800<span class="token punctuation">&quot;</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Yes<span class="token punctuation">&quot;</span></span> <span class="token attr-name">leftmargin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">topmargin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="思维导图语法" tabindex="-1"><a class="header-anchor" href="#思维导图语法"><span>思维导图语法</span></a></h3><p>所有 markdown 所具有的文本编辑语法都可以使用</p><p>思维导图构建语法见下图</p><div style="text-align:center;"><img alt="思维导图语法" src="https://cdn.statically.io/gh/dream-oyh/dream-oyh.github.io/images/vuepress_3.png"></div><h2 id="转移-blog-本地文件至-ubuntu" tabindex="-1"><a class="header-anchor" href="#转移-blog-本地文件至-ubuntu"><span>转移 Blog 本地文件至 Ubuntu</span></a></h2><p>由于之前在本地搭建了 Blog，现在若需要在 Ubuntu 系统上编辑时，需要调整 <code>node.js</code>版本，具体步骤如下：</p><ol><li>先删除本地文件内<code>node_modules</code>文件夹</li><li>执行<code>npm i</code>重新安装即可。</li></ol><h2 id="npm-配置镜像源" tabindex="-1"><a class="header-anchor" href="#npm-配置镜像源"><span>npm 配置镜像源</span></a></h2><p>采用阿里镜像源：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmmirror.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>若要撤销，变更回 npm 官方镜像源</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmjs.org
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="vuepress-theme-hope-waline-评论配置问题" tabindex="-1"><a class="header-anchor" href="#vuepress-theme-hope-waline-评论配置问题"><span>vuepress-theme-hope Waline 评论配置问题</span></a></h2>`,15),y=e("p",null,[s("参照官方文档配置 Waline 评论插件后，出现了"),e("code",null,"failed to fetch"),s("报错，在检查 Vercel 服务器，LeanCloud 数据存储服务的配置后，均未发现与官方文档配置不一致之处，还未找到原因。")],-1),x=e("code",null,"Giscus",-1),q={href:"https://plugin-comment2.vuejs.press/zh/guide/giscus.html",target:"_blank",rel:"noopener noreferrer"},j=e("h2",{id:"博客部署至-cloudflare-pages",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#博客部署至-cloudflare-pages"},[e("span",null,"博客部署至 Cloudflare Pages")])],-1),C=e("p",null,"先将博客静态文件上传至 github repo（仓库名不重要）的 main 分支（其他分支也行）",-1),w={href:"https://pages.cloudflare.com/",target:"_blank",rel:"noopener noreferrer"},T=e("code",null,"Project name",-1),U=e("code",null,"dream-oyh",-1),N=e("code",null,"build",-1),B=e("code",null,"Save and deploy",-1);function S(V,P){const n=i("Badge"),t=i("ExternalLinkIcon");return l(),r("div",null,[d,a(n,{text:"step1"}),u,m,a(n,{text:"step2"}),h,g,v,b,a(n,{text:"step3"}),k,a(n,{text:"step4"}),f,a(n,{text:"step5"}),_,a(n,{text:"未解决！"}),y,e("p",null,[s("因此本博客的评论区配置转用"),x,s("方案，方便易用，具体步骤可以参考"),e("a",q,[s("官方文档"),a(t)]),s("。")]),j,C,e("p",null,[s("打开"),e("a",w,[s("pages.dev"),a(t)]),s("，用邮箱注册帐号并登陆。进入平台后，依照提示选择绑定 github 帐号，链接到仓库的 main 分支（也就是你存放的分支）。按照个人喜好定义"),T,s("，比如本博客是"),U,s("，生成的域名会显示在下方，有关"),N,s("的选项可以不选，直接点击"),B,s("即可完成。")])])}const M=p(c,[["render",S],["__file","vuepress.html.vue"]]),Z=JSON.parse(`{"path":"/blog/vuepress.html","title":"问题列表","lang":"zh-CN","frontmatter":{"date":"2022-07-26T00:00:00.000Z","icon":"ask","category":"博客","tag":"问题记录","description":"问题列表 github 图床建立 建立 tuchuang.sh 脚本，脚本内容如下（在 git bash 中运行命令）： 首先需要在 github 中创建 images 分支，作图床载体 origin 可自行编辑，ssh 地址优先于 https 地址 这里需要用-f进行强制覆盖，origin应与上文中仓库名称相同 博客部署及源码上传 部署代码采用 ba...","head":[["meta",{"property":"og:url","content":"https://dream-oyh.github.io/blog/vuepress.html"}],["meta",{"property":"og:site_name","content":"Dream_oyh 的 blog"}],["meta",{"property":"og:title","content":"问题列表"}],["meta",{"property":"og:description","content":"问题列表 github 图床建立 建立 tuchuang.sh 脚本，脚本内容如下（在 git bash 中运行命令）： 首先需要在 github 中创建 images 分支，作图床载体 origin 可自行编辑，ssh 地址优先于 https 地址 这里需要用-f进行强制覆盖，origin应与上文中仓库名称相同 博客部署及源码上传 部署代码采用 ba..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T14:32:00.000Z"}],["meta",{"property":"article:author","content":"OYH"}],["meta",{"property":"article:tag","content":"问题记录"}],["meta",{"property":"article:published_time","content":"2022-07-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T14:32:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"问题列表\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-07-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-17T14:32:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OYH\\",\\"email\\":\\"19859860010@163.com\\"}]}"]]},"headers":[{"level":2,"title":"github 图床建立","slug":"github-图床建立","link":"#github-图床建立","children":[]},{"level":2,"title":"博客部署及源码上传","slug":"博客部署及源码上传","link":"#博客部署及源码上传","children":[]},{"level":2,"title":"“weak map key”错误信息","slug":"weak-map-key-错误信息","link":"#weak-map-key-错误信息","children":[]},{"level":2,"title":"在 vuepress 中插入思维导图","slug":"在-vuepress-中插入思维导图","link":"#在-vuepress-中插入思维导图","children":[{"level":3,"title":"思维导图语法","slug":"思维导图语法","link":"#思维导图语法","children":[]}]},{"level":2,"title":"转移 Blog 本地文件至 Ubuntu","slug":"转移-blog-本地文件至-ubuntu","link":"#转移-blog-本地文件至-ubuntu","children":[]},{"level":2,"title":"npm 配置镜像源","slug":"npm-配置镜像源","link":"#npm-配置镜像源","children":[]},{"level":2,"title":"vuepress-theme-hope Waline 评论配置问题","slug":"vuepress-theme-hope-waline-评论配置问题","link":"#vuepress-theme-hope-waline-评论配置问题","children":[]},{"level":2,"title":"博客部署至 Cloudflare Pages","slug":"博客部署至-cloudflare-pages","link":"#博客部署至-cloudflare-pages","children":[]}],"git":{"createdTime":1707976316000,"updatedTime":1708180320000,"contributors":[{"name":"dream_linux","email":"1399541701@qq.com","commits":2},{"name":"dream同学0","email":"1399541701@qq.com","commits":2}]},"readingTime":{"minutes":3.68,"words":1104},"filePathRelative":"blog/vuepress.md","localizedDate":"2022年7月26日","excerpt":"\\n<h2>github 图床建立</h2>\\n<p>建立 tuchuang.sh 脚本，脚本内容如下（在 git bash 中运行命令）：</p>\\n<p>首先需要在 github 中创建 images 分支，作图床载体</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token builtin class-name\\">cd</span> <span class=\\"token operator\\">&lt;</span>文件目录地址<span class=\\"token operator\\">&gt;</span> <span class=\\"token comment\\">#我这里是docs/.vuepress/public/images    # 1.进入images文件目录下</span>\\n<span class=\\"token function\\">git</span> init      <span class=\\"token comment\\"># 2.创建仓库</span>\\n<span class=\\"token function\\">git</span> <span class=\\"token function\\">add</span> <span class=\\"token parameter variable\\">-A</span>     <span class=\\"token comment\\"># 3.添加目录下所有文件至暂存区</span>\\n<span class=\\"token function\\">git</span> remote <span class=\\"token function\\">add</span> origin git@github.com:dream-oyh/dream-oyh.github.io.git     <span class=\\"token comment\\"># 4.连接远程仓库</span>\\n<span class=\\"token function\\">git</span> commit <span class=\\"token parameter variable\\">-m</span> <span class=\\"token string\\">'注释'</span>    <span class=\\"token comment\\">#此处注释可改为$(date \\"+%Y%m%d-%H:%M:%S\\")，以用系统时间代替</span>\\n<span class=\\"token function\\">git</span> branch <span class=\\"token parameter variable\\">-m</span> images\\n<span class=\\"token function\\">git</span> push <span class=\\"token parameter variable\\">-u</span> <span class=\\"token parameter variable\\">-f</span> origin images\\n</code></pre></div>","autoDesc":true}`);export{M as comp,Z as data};
