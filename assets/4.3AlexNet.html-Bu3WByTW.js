import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as i,c as l,d as n,b as s,a as t,w as p,e}from"./app-YAn-llZr.js";const u={},r=n("h1",{id:"alexnet",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#alexnet"},[n("span",null,"AlexNet")])],-1),k={class:"hint-container tip"},d=n("p",{class:"hint-container-title"},"本节学习要点",-1),m=n("li",null,"了解 AlexNet 网络结构",-1),v=n("code",null,"torchvision.transforms.Resize()",-1),b=n("code",null,"torchvision.transforms",-1),h=e(`<h2 id="网络结构" tabindex="-1"><a class="header-anchor" href="#网络结构"><span>网络结构</span></a></h2><figure><img src="https://tangshusen.me/Dive-into-DL-PyTorch/img/chapter05/5.6_alexnet.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="模型建立" tabindex="-1"><a class="header-anchor" href="#模型建立"><span>模型建立</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> time
<span class="token keyword">import</span> torch
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token punctuation">,</span> optim
<span class="token keyword">import</span> torchvision

<span class="token keyword">import</span> sys
sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;..&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">import</span> d2lzh_pytorch <span class="token keyword">as</span> d2l
device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">&#39;cuda&#39;</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">&#39;cpu&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">AlexNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>AlexNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># in_channels, out_channels, kernel_size, stride, padding</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># kernel_size, stride</span>
            <span class="token comment"># 减小卷积窗口，使用填充为 2 来使得输入与输出的高和宽一致，且增大输出通道数</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token comment"># 连续 3 个卷积层，且使用更小的卷积窗口。除了最后的卷积层外，进一步增大了输出通道数。</span>
            <span class="token comment"># 前两个卷积层后不使用池化层来减小输入的高和宽</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">384</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">384</span><span class="token punctuation">,</span> <span class="token number">384</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">384</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
         <span class="token comment"># 这里全连接层的输出个数比 LeNet 中的大数倍。使用丢弃层来缓解过拟合</span>
        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token comment"># 输出层。由于这里使用 Fashion-MNIST，所以用类别数为 10，而非论文中的 1000</span>
            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">:</span>
        feature <span class="token operator">=</span> self<span class="token punctuation">.</span>conv<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
        output <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>feature<span class="token punctuation">.</span>view<span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> output
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="读取数据" tabindex="-1"><a class="header-anchor" href="#读取数据"><span>读取数据</span></a></h2><p>为了方便起见，这里不采用 ImageNet 数据集，而是采用较为简单的<code>FashionMNIST</code>数据集，所以需要通过图像增广把图像扩大到 224 的长宽。这里的图像增广需要用<code>torchvision.transforms</code>提供的<code>Resize()</code>实例来实现，并且利用<code>Compose</code>实例与<code>ToTensor()</code>转换器串联，最终读取数据的程序可以优化为：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">load_data_FashionMNIST</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> resize<span class="token punctuation">,</span> root<span class="token operator">=</span><span class="token string">&quot;~/Datasets/FashionMNIST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    trans <span class="token operator">=</span> <span class="token punctuation">[</span>
        torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span>size<span class="token operator">=</span>resize<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
    trans <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span>trans<span class="token punctuation">)</span>
    train_mnist <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>
        root<span class="token operator">=</span>root<span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>trans<span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">False</span>
    <span class="token punctuation">)</span>
    test_mnist <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>
        root<span class="token operator">=</span>root<span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>trans<span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">False</span>
    <span class="token punctuation">)</span>

    train_iter <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>
        train_mnist<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">4</span>
    <span class="token punctuation">)</span>
    test_iter <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>
        test_mnist<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">4</span>
    <span class="token punctuation">)</span>

    <span class="token keyword">return</span> train_iter<span class="token punctuation">,</span> test_iter
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="训练模型" tabindex="-1"><a class="header-anchor" href="#训练模型"><span>训练模型</span></a></h2>`,8),_=e(`<h2 id="main函数" tabindex="-1"><a class="header-anchor" href="#main函数"><span><code>main</code>函数</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>net <span class="token operator">=</span> AlexNet<span class="token punctuation">(</span><span class="token punctuation">)</span>
batch_size <span class="token operator">=</span> <span class="token number">128</span>
resize <span class="token operator">=</span> <span class="token number">224</span>
lr <span class="token operator">=</span> <span class="token number">0.001</span>
num_epochs <span class="token operator">=</span> <span class="token number">5</span>
device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">&quot;cuda&quot;</span><span class="token punctuation">)</span>
train_iter<span class="token punctuation">,</span> test_iter <span class="token operator">=</span> load_data_FashionMNIST<span class="token punctuation">(</span>batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> resize<span class="token operator">=</span>resize<span class="token punctuation">)</span>
optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>lr<span class="token punctuation">)</span>
train<span class="token punctuation">(</span>net<span class="token punctuation">,</span> train_iter<span class="token punctuation">,</span> test_iter<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> device<span class="token punctuation">,</span> num_epochs<span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function g(f,y){const a=c("RouteLink");return i(),l("div",null,[r,n("div",k,[d,n("ol",null,[m,n("li",null,[s("学习"),v,s("的使用并拓展到更多"),b,s("实例的用法，可以见"),t(a,{to:"/code/python/pytorch/3.1Deeplearning_basic.html#torchvision-transforms%E5%AE%9E%E4%BE%8B"},{default:p(()=>[s("此处")]),_:1}),s("。")])])]),h,n("p",null,[s("调用"),t(a,{to:"/code/python/pytorch/4.2LeNet.html#%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B"},{default:p(()=>[s("LeNet 模型中的 GPU 训练函数")]),_:1})]),_])}const z=o(u,[["render",g],["__file","4.3AlexNet.html.vue"]]),T=JSON.parse('{"path":"/code/python/pytorch/4.3AlexNet.html","title":"AlexNet","lang":"zh-CN","frontmatter":{"date":"2024-02-20T00:00:00.000Z","description":"AlexNet 本节学习要点 了解 AlexNet 网络结构 学习torchvision.transforms.Resize()的使用并拓展到更多torchvision.transforms实例的用法，可以见。 网络结构 模型建立 读取数据 为了方便起见，这里不采用 ImageNet 数据集，而是采用较为简单的FashionMNIST数据集，所以需要通...","head":[["meta",{"property":"og:url","content":"https://dream-oyh.github.io/code/python/pytorch/4.3AlexNet.html"}],["meta",{"property":"og:site_name","content":"Dream_oyh 的 blog"}],["meta",{"property":"og:title","content":"AlexNet"}],["meta",{"property":"og:description","content":"AlexNet 本节学习要点 了解 AlexNet 网络结构 学习torchvision.transforms.Resize()的使用并拓展到更多torchvision.transforms实例的用法，可以见。 网络结构 模型建立 读取数据 为了方便起见，这里不采用 ImageNet 数据集，而是采用较为简单的FashionMNIST数据集，所以需要通..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tangshusen.me/Dive-into-DL-PyTorch/img/chapter05/5.6_alexnet.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-20T13:04:57.000Z"}],["meta",{"property":"article:author","content":"OYH"}],["meta",{"property":"article:published_time","content":"2024-02-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-20T13:04:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AlexNet\\",\\"image\\":[\\"https://tangshusen.me/Dive-into-DL-PyTorch/img/chapter05/5.6_alexnet.png\\"],\\"datePublished\\":\\"2024-02-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-20T13:04:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OYH\\",\\"email\\":\\"19859860010@163.com\\"}]}"]]},"headers":[{"level":2,"title":"网络结构","slug":"网络结构","link":"#网络结构","children":[]},{"level":2,"title":"模型建立","slug":"模型建立","link":"#模型建立","children":[]},{"level":2,"title":"读取数据","slug":"读取数据","link":"#读取数据","children":[]},{"level":2,"title":"训练模型","slug":"训练模型","link":"#训练模型","children":[]},{"level":2,"title":"main函数","slug":"main函数","link":"#main函数","children":[]}],"git":{"createdTime":1708430848000,"updatedTime":1708434297000,"contributors":[{"name":"dream_linux","email":"1399541701@qq.com","commits":2}]},"readingTime":{"minutes":1.83,"words":549},"filePathRelative":"code/python/pytorch/4.3AlexNet.md","localizedDate":"2024年2月20日","excerpt":"\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">本节学习要点</p>\\n<ol>\\n<li>了解 AlexNet 网络结构</li>\\n<li>学习<code>torchvision.transforms.Resize()</code>的使用并拓展到更多<code>torchvision.transforms</code>实例的用法，可以见<a href=\\"/code/python/pytorch/3.1Deeplearning_basic.html#torchvision-transforms%E5%AE%9E%E4%BE%8B\\" target=\\"_blank\\">此处</a>。</li>\\n</ol>\\n</div>","autoDesc":true}');export{z as comp,T as data};
