import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as d,e as l}from"./app-Dj95c0mk.js";const a={},o=l('<h1 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h1><h2 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么"><span>是什么</span></a></h2><p>正则表达式（regular expressions），简称 regex，或 regexp，用于搜索或匹配字符串中符合某个模式的文本。</p><p>regex 在不同的编程语言下有不同的呈现形式，但是总体语法规则是不变的。</p><h2 id="学习" tabindex="-1"><a class="header-anchor" href="#学习"><span>学习</span></a></h2><p><a href="https://regex101.com/" target="_blank" rel="noopener noreferrer">正则表达式在线测试工具</a></p><p><a href="https://www.bilibili.com/video/BV1da4y1p7iZ" target="_blank" rel="noopener noreferrer">奇乐编程学院视频教程</a></p><h2 id="基本规则" tabindex="-1"><a class="header-anchor" href="#基本规则"><span>基本规则</span></a></h2><h3 id="限定符" tabindex="-1"><a class="header-anchor" href="#限定符"><span>限定符</span></a></h3><table><thead><tr><th style="text-align:left;">符号</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;"><code>?</code></td><td style="text-align:left;"><code>?</code>前面的一个字符需要出现 0 次或者 1 次，即：可有可无</td></tr><tr><td style="text-align:left;"><code>*</code></td><td style="text-align:left;"><code>*</code>前面的一个字符需要出现 0 次或者多次，即：可以没有也可以很多</td></tr><tr><td style="text-align:left;"><code>+</code></td><td style="text-align:left;"><code>+</code>前面的一个字符需要出现 1 次或者多次，即：必须出现一次</td></tr><tr><td style="text-align:left;"><code>|</code></td><td style="text-align:left;">或运算，需要用括号标明作用范围，如<code>a (cat|dog)</code>表明匹配<code>a cat</code>或<code>a dog</code><br>如果是<code>a cat | dog</code>，那就是匹配<code>a cat</code> 或 <code>dog</code></td></tr><tr><td style="text-align:left;"><code>(&lt;str&gt;)&lt;sym&gt;</code></td><td style="text-align:left;">在限定符之前加上括号，可以扩大该限定符限定的字符范围<br>如：<code>(ab)+</code>就代表<code>ab</code>出现一次或多次</td></tr><tr><td style="text-align:left;"><code>&lt;str&gt;{&lt;num&gt;}</code></td><td style="text-align:left;">字符后加<code>{&lt;num&gt;}</code>可以规定出现次数，如<code>a{6}</code>表示<code>a</code>只能出现 6 次<br>花括号内可输入出现次数的范围，用逗号区分范围上下限，如：<code>a{2,6}</code>表示<code>a</code>出现 2-6 次</td></tr></tbody></table><h3 id="字符类" tabindex="-1"><a class="header-anchor" href="#字符类"><span>字符类</span></a></h3><table><thead><tr><th style="text-align:left;">符号</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;"><code>[&lt;str&gt;]</code></td><td style="text-align:left;">方括号内的内容代表要求匹配的字符<strong>只能</strong>取自它们</td></tr><tr><td style="text-align:left;"><code>[^&lt;str&gt;]</code></td><td style="text-align:left;">方括号内的内容代表要求匹配的字符<strong>不能</strong>取自它们</td></tr><tr><td style="text-align:left;"><code>[0-9]</code></td><td style="text-align:left;">指定<strong>数字</strong>范围</td></tr><tr><td style="text-align:left;"><code>[a-z]</code></td><td style="text-align:left;">指定<strong>小写字母</strong>范围</td></tr><tr><td style="text-align:left;"><code>[A-Z]</code></td><td style="text-align:left;">指定<strong>大写字母</strong>范围</td></tr><tr><td style="text-align:left;"><code>[0-9a-zA-Z]</code></td><td style="text-align:left;">方括号内允许嵌套，左式表示必须出现数字或小写字母或大写字母</td></tr></tbody></table><h3 id="元字符" tabindex="-1"><a class="header-anchor" href="#元字符"><span>元字符</span></a></h3><p>他的出现是为了通过转义，来表达一些不方便表达的字符，如空白符、换行符等，可与<a href="#%E5%AD%97%E7%AC%A6%E7%B1%BB">字符类</a>搭配使用。</p><table><thead><tr><th style="text-align:left;">符号</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;"><code>\\d</code></td><td style="text-align:left;">数字字符</td></tr><tr><td style="text-align:left;"><code>\\w</code></td><td style="text-align:left;">单词字符（英文、数字及下划线）</td></tr><tr><td style="text-align:left;"><code>\\s</code></td><td style="text-align:left;">空白符（包含 tab 和换行符）</td></tr><tr><td style="text-align:left;"><code>\\b</code></td><td style="text-align:left;">表示单词字符的边界</td></tr><tr><td style="text-align:left;"><code>\\D</code></td><td style="text-align:left;">非数字字符</td></tr><tr><td style="text-align:left;"><code>\\W</code></td><td style="text-align:left;">非单词字符</td></tr><tr><td style="text-align:left;"><code>\\S</code></td><td style="text-align:left;">非空白符</td></tr><tr><td style="text-align:left;"><code>.</code></td><td style="text-align:left;">任意字符（但是不包含换行符）</td></tr><tr><td style="text-align:left;"><code>^</code></td><td style="text-align:left;">匹配行首，如<code>^a</code>只会匹配行首的<code>a</code></td></tr><tr><td style="text-align:left;"><code>$</code></td><td style="text-align:left;">匹配行尾，如<code>a$</code>只会匹配行尾的<code>a</code></td></tr></tbody></table><h3 id="贪婪与懒惰匹配" tabindex="-1"><a class="header-anchor" href="#贪婪与懒惰匹配"><span>贪婪与懒惰匹配</span></a></h3><div class="hint-container tip"><p class="hint-container-title">贪婪匹配</p><p>贪婪匹配指的是限定符对字符的选择会尽可能<strong>多</strong>地选择。</p></div><div class="hint-container tip"><p class="hint-container-title">懒惰匹配</p><p>懒惰匹配指的是限定符对字符的选择会尽可能<strong>少</strong>地选择。</p></div><p>如在这样的一个字符串中：</p><blockquote><p><code>&lt;span&gt;&lt;b&gt;This is a sample text&lt;/b&gt;&lt;/span&gt;</code></p></blockquote><p>如果我们把正则表达式写作：<code>&lt;.*&gt;</code>，即：匹配出现在尖括号内的任意字符串，但是正则表达式默认是贪婪匹配，所以它会尽可能多地选择，即匹配为：<code>&lt;span&gt;&lt;b&gt;This is a sample text&lt;/b&gt;&lt;/span&gt;</code></p><p>但是如果写作<code>&lt;.*?&gt;</code>，则会采用懒惰匹配，即：尽可能少地选择，匹配为：<code>&lt;span&gt;</code> <code>&lt;b&gt;</code> <code>&lt;/b&gt;</code> <code>&lt;/span&gt;</code></p><h2 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h2><h3 id="匹配-rgb-颜色值" tabindex="-1"><a class="header-anchor" href="#匹配-rgb-颜色值"><span>匹配 RGB 颜色值</span></a></h3><p>RGB 颜色值特点：以<code>#</code>开头，后面跟着 6 个十六进制字符。</p><p>应该匹配为：<code>#[a-fA-F0-9]{6}\\b</code></p><blockquote><p>加入<code>\\b</code>是为了防止例如<code>#fffffffff</code>这样的字符也被匹配到，他的确有 6 个十六进制字符，但是它后面还有<code>fff</code>，不符合要求。</p></blockquote><h3 id="匹配-ip-地址" tabindex="-1"><a class="header-anchor" href="#匹配-ip-地址"><span>匹配 IP 地址</span></a></h3><p>IP 地址特点：由四个数字组成，每个数字的范围是<code>0-255</code>，每个数字之间用<code>.</code>分隔。</p><p>应该匹配为：<code>((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)(\\.|$)){4}</code></p><ul><li>其中<code>25[0-5]|2[0-4]\\d|[01]?\\d\\d?</code>，匹配了<code>0-255</code>之间的数字，具体思路是分不同情况来匹配，如果百位和十位已经为<code>25</code>了，那剩下的个位只能取 0-5；如果百位是 2，十位是 4，则个位在 0-9 都符合要求，但是如果百位是 0 或 1，则十位和个位无论怎么取都符合要求。</li><li><code>\\.|$</code>，匹配了<code>.</code>或者字符串的末尾。</li><li><code>{4}</code>规定了要匹配 4 次。</li></ul>',31),r=[o];function c(n,i){return d(),e("div",null,r)}const p=t(a,[["render",c],["__file","regex.html.vue"]]),h=JSON.parse('{"path":"/code/tips/regex.html","title":"正则表达式","lang":"zh-CN","frontmatter":{"date":"2024-02-16T00:00:00.000Z","icon":"boolean","category":"锦囊","tag":"教程","description":"正则表达式 是什么 正则表达式（regular expressions），简称 regex，或 regexp，用于搜索或匹配字符串中符合某个模式的文本。 regex 在不同的编程语言下有不同的呈现形式，但是总体语法规则是不变的。 学习 正则表达式在线测试工具 奇乐编程学院视频教程 基本规则 限定符 字符类 元字符 他的出现是为了通过转义，来表达一些不方...","head":[["meta",{"property":"og:url","content":"https://dream-oyh.github.io/code/tips/regex.html"}],["meta",{"property":"og:site_name","content":"Dream_oyh 的 blog"}],["meta",{"property":"og:title","content":"正则表达式"}],["meta",{"property":"og:description","content":"正则表达式 是什么 正则表达式（regular expressions），简称 regex，或 regexp，用于搜索或匹配字符串中符合某个模式的文本。 regex 在不同的编程语言下有不同的呈现形式，但是总体语法规则是不变的。 学习 正则表达式在线测试工具 奇乐编程学院视频教程 基本规则 限定符 字符类 元字符 他的出现是为了通过转义，来表达一些不方..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T14:32:00.000Z"}],["meta",{"property":"article:author","content":"OYH"}],["meta",{"property":"article:tag","content":"教程"}],["meta",{"property":"article:published_time","content":"2024-02-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T14:32:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"正则表达式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-17T14:32:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OYH\\",\\"email\\":\\"19859860010@163.com\\"}]}"]]},"headers":[{"level":2,"title":"是什么","slug":"是什么","link":"#是什么","children":[]},{"level":2,"title":"学习","slug":"学习","link":"#学习","children":[]},{"level":2,"title":"基本规则","slug":"基本规则","link":"#基本规则","children":[{"level":3,"title":"限定符","slug":"限定符","link":"#限定符","children":[]},{"level":3,"title":"字符类","slug":"字符类","link":"#字符类","children":[]},{"level":3,"title":"元字符","slug":"元字符","link":"#元字符","children":[]},{"level":3,"title":"贪婪与懒惰匹配","slug":"贪婪与懒惰匹配","link":"#贪婪与懒惰匹配","children":[]}]},{"level":2,"title":"实例","slug":"实例","link":"#实例","children":[{"level":3,"title":"匹配 RGB 颜色值","slug":"匹配-rgb-颜色值","link":"#匹配-rgb-颜色值","children":[]},{"level":3,"title":"匹配 IP 地址","slug":"匹配-ip-地址","link":"#匹配-ip-地址","children":[]}]}],"git":{"createdTime":1707995872000,"updatedTime":1708180320000,"contributors":[{"name":"dream同学0","email":"1399541701@qq.com","commits":3},{"name":"dream_linux","email":"1399541701@qq.com","commits":1}]},"readingTime":{"minutes":3.5,"words":1051},"filePathRelative":"code/tips/regex.md","localizedDate":"2024年2月16日","excerpt":"\\n<h2>是什么</h2>\\n<p>正则表达式（regular expressions），简称 regex，或 regexp，用于搜索或匹配字符串中符合某个模式的文本。</p>\\n<p>regex 在不同的编程语言下有不同的呈现形式，但是总体语法规则是不变的。</p>\\n<h2>学习</h2>\\n<p><a href=\\"https://regex101.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">正则表达式在线测试工具</a></p>\\n<p><a href=\\"https://www.bilibili.com/video/BV1da4y1p7iZ\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">奇乐编程学院视频教程</a></p>","autoDesc":true}');export{p as comp,h as data};
