import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-Bw7vtU4M.js";const p="/images/data_structure/stack/Untitled.png",e={},o=t('<h1 id="üóÑ-stack" tabindex="-1"><a class="header-anchor" href="#üóÑ-stack"><span>üóÑ Stack</span></a></h1><h2 id="the-features-of-stack" tabindex="-1"><a class="header-anchor" href="#the-features-of-stack"><span>The Features of Stack</span></a></h2><p>The item in the stack must be inserted or removed from the top of the stack. ‚Äî‚ÄúLast in First Out‚Äù(LIFO)</p><p><strong>Definition:</strong> The Stack is a list with the restriction that insertion and deletion must be performed only from the end, called the top.</p><p><strong>Operations:</strong> 1. push(x) 2.pop() 3.top() 4.IsEmpty() ‚ÄîAll can be accomplished in the constant time. The time complexity is O(1).</p><p><strong>Logistic View:</strong></p><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>Applications:</strong></p><ul><li>Function Calls / Recursions</li><li>Undo Operations</li><li>Balanced Parentheses</li></ul><h2 id="use-linked-list-to-implement-a-stack" tabindex="-1"><a class="header-anchor" href="#use-linked-list-to-implement-a-stack"><span>Use linked list to implement a stack</span></a></h2><p>We can insert/delete the element at</p><ul><li>‚ùå the end of the linked list (tail)</li><li>‚úÖ the beginning (head)</li></ul><p>For each operation in the stack should be in the constant time, we choose to insert or delete the elements at the beginning.</p><p>This is implementation in C++:</p><h3 id="include-and-main" tabindex="-1"><a class="header-anchor" href="#include-and-main"><span>Include and main()</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> data<span class="token punctuation">;</span>
	Node<span class="token operator">*</span> link<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Node<span class="token operator">*</span> top<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	top <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;Stack is:&quot;</span><span class="token punctuation">;</span>
	<span class="token function">Print</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="push" tabindex="-1"><a class="header-anchor" href="#push"><span>Push()</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
	Node<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	temp<span class="token operator">-&gt;</span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>
	temp<span class="token operator">-&gt;</span>link <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>temp<span class="token operator">-&gt;</span>link <span class="token operator">=</span> top<span class="token punctuation">;</span>
	top <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pop" tabindex="-1"><a class="header-anchor" href="#pop"><span>pop()</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	Node<span class="token operator">*</span> temp <span class="token operator">=</span> top<span class="token punctuation">;</span>
	top <span class="token operator">=</span> top<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
	<span class="token keyword">delete</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="print" tabindex="-1"><a class="header-anchor" href="#print"><span>Print()</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> top<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>top <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
		cout<span class="token operator">&lt;&lt;</span>top<span class="token operator">-&gt;</span>data<span class="token operator">&lt;&lt;</span><span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
		<span class="token function">Print</span><span class="token punctuation">(</span>top<span class="token operator">-&gt;</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="top" tabindex="-1"><a class="header-anchor" href="#top"><span>Top()</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> top<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="isempty" tabindex="-1"><a class="header-anchor" href="#isempty"><span>IsEmpty()</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> top<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="applications" tabindex="-1"><a class="header-anchor" href="#applications"><span>Applications</span></a></h2><h3 id="balanced-parentheses" tabindex="-1"><a class="header-anchor" href="#balanced-parentheses"><span>Balanced Parentheses</span></a></h3><p>Solution:</p><ul><li>Scan from left to right;</li><li>if opening symbol add it to a list.</li><li>if closing symbol, remove last opening symbol in the list.</li><li>should end with an empty list.</li></ul><p><strong>First opened, last closed</strong></p><p>Pseudocode:</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">CheckBalancedParentheses</span><span class="token punctuation">(</span><span class="token keyword">char</span> exp<span class="token punctuation">)</span><span class="token punctuation">{</span>
	n <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token function">length</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	Create a Stack<span class="token operator">:</span> S<span class="token punctuation">;</span>
	<span class="token keyword">for</span> i <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token number">0</span> to n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span> exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> is <span class="token string">&quot;(&quot;</span> <span class="token operator">or</span> <span class="token string">&quot;[&quot;</span> <span class="token operator">or</span> <span class="token string">&quot;{&quot;</span>
		<span class="token punctuation">{</span>
			S<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> is <span class="token string">&quot;)&quot;</span> <span class="token operator">or</span> <span class="token string">&quot;]&quot;</span> <span class="token operator">or</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">{</span>
			<span class="token keyword">if</span> S<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> top doesn<span class="token number">&#39;</span>t pair with exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
				S<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> S is empty<span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="infix-postfix-prefix‚Äîevaluation-of-expressions" tabindex="-1"><a class="header-anchor" href="#infix-postfix-prefix‚Äîevaluation-of-expressions"><span>Infix, Postfix, Prefix‚ÄîEvaluation of expressions</span></a></h3><p>Order of operation:</p><ol><li>Parentheses</li><li>Exponents (from right to left)</li><li>Multiplications and division (from left to right)</li><li>Addition and subtraction (from left to right)</li></ol><p><strong>Infix:</strong> <code>&lt;operand&gt;&lt;operator&gt;&lt;operand&gt;</code> <code>HUMAN-READABLE</code></p><ul><li>Operand is an object on which operation is performed.</li></ul><p><strong>Prefix:</strong> <code>&lt;operator&gt;&lt;operand&gt;&lt;operand&gt;</code> <code>GOOD-FOR-MACHINE</code></p><p><strong>Postfix:</strong> <code>&lt;operand&gt;&lt;operand&gt;&lt;operator&gt;</code> <code>GOOD-FOR-MACHINE</code></p><p>To calculate arbitrary expression, we need to convert infix to postfix or prefix by the order of operation.</p><table><thead><tr><th>Infix</th><th>Prefix</th><th>Postfix</th></tr></thead><tbody><tr><td>2+3</td><td>+ 2 3</td><td>2 3 +</td></tr><tr><td>p*q</td><td>* p q</td><td>p q *</td></tr><tr><td>a+b*c</td><td>+ a * b c</td><td>a b c * +</td></tr></tbody></table><p>Calculate expression by postfix, the pseudocode is as follow:</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">CalculatePostfix</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">{</span>
	n <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token function">length</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	Create Stack<span class="token operator">:</span> S
	<span class="token keyword">for</span> i from <span class="token number">0</span> to n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span> exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> is operand
		S<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> is <span class="token string">&quot;+&quot;</span> <span class="token operator">or</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">or</span> <span class="token string">&quot;*&quot;</span> <span class="token operator">or</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">{</span>
		op1 <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		S<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		op2 <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		op3 <span class="token operator">=</span> operate op1 <span class="token operator">and</span> op2
		S<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>op3<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token keyword">return</span> S<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But how can we get the postfix?</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> <span class="token function">InfixtoPostfix</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">{</span>
	n <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token function">length</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	create a stack S<span class="token punctuation">;</span>
	res <span class="token operator">&lt;</span><span class="token operator">-</span> empty string<span class="token punctuation">;</span>
	<span class="token keyword">for</span> i from <span class="token number">0</span> to n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span> exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> is opearand
			res <span class="token operator">&lt;</span><span class="token operator">-</span> res <span class="token operator">+</span> exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> is <span class="token keyword">operator</span>
			<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>S<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">HasHigherPrec</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				res <span class="token operator">&lt;</span><span class="token operator">-</span> res <span class="token operator">+</span> S<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				S<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			S<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>S<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		res <span class="token operator">&lt;</span><span class="token operator">-</span> res <span class="token operator">+</span> S<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		S<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If the expression has a parentheses, we need to do some certain regulation:</p><ul><li>When the operation in the stack has higher precedence than the operation in the expression, you should pop the operation till the top of stack is parentheses;</li><li>Parentheses is regarded as a specific operation. It also needs to be pushed into the stack.</li><li>When meeting the closing parentheses, the stack should pop all operation till the top of the stack is the opening parentheses, and pop this opening parenthesis as well.</li><li>The popped parentheses doesn‚Äôt need to be record in the ultimate result.</li></ul><p>We need to correct the pseudocode. The corrected part has been highlighted.</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> <span class="token function">InfixtoPostfix</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">{</span>
	n <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token function">length</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	create a stack S<span class="token punctuation">;</span>
	res <span class="token operator">&lt;</span><span class="token operator">-</span> empty string<span class="token punctuation">;</span>
	<span class="token keyword">for</span> i from <span class="token number">0</span> to n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span> exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> is opearand
			res <span class="token operator">&lt;</span><span class="token operator">-</span> res <span class="token operator">+</span> exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> is <span class="token keyword">operator</span><span class="token punctuation">{</span>
			<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>S<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">HasHigherPrec</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">IsOpeningParentheses</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				res <span class="token operator">&lt;</span><span class="token operator">-</span> res <span class="token operator">+</span> S<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				S<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			S<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token function">IsOpeningParentheses</span><span class="token punctuation">(</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				S<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token function">IsClosingParentheses</span><span class="token punctuation">(</span>exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>S<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">IsOpeningParentheses</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
					res <span class="token operator">&lt;</span><span class="token operator">-</span> res <span class="token operator">+</span> S<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					S<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
				S<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// pop the opening parentheses</span>
			<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>S<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		res <span class="token operator">&lt;</span><span class="token operator">-</span> res <span class="token operator">+</span> S<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		S<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line">¬†</div><br><br><br><br><br><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50),c=[o];function i(l,u){return s(),a("div",null,c)}const d=n(e,[["render",i],["__file","stack.html.vue"]]),v=JSON.parse('{"path":"/study/DataStructure/stack.html","title":"üóÑ Stack","lang":"zh-CN","frontmatter":{"date":"2024-06-22T00:00:00.000Z","description":"üóÑ Stack The Features of Stack The item in the stack must be inserted or removed from the top of the stack. ‚Äî‚ÄúLast in First Out‚Äù(LIFO) Definition: The Stack is a list with the r...","head":[["meta",{"property":"og:url","content":"https://dream-oyh.github.io/study/DataStructure/stack.html"}],["meta",{"property":"og:site_name","content":"Dream_oyh ÁöÑ blog"}],["meta",{"property":"og:title","content":"üóÑ Stack"}],["meta",{"property":"og:description","content":"üóÑ Stack The Features of Stack The item in the stack must be inserted or removed from the top of the stack. ‚Äî‚ÄúLast in First Out‚Äù(LIFO) Definition: The Stack is a list with the r..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://dream-oyh.github.io/images/data_structure/stack/Untitled.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-30T03:35:16.000Z"}],["meta",{"property":"article:author","content":"OYH"}],["meta",{"property":"article:published_time","content":"2024-06-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-30T03:35:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"üóÑ Stack\\",\\"image\\":[\\"https://dream-oyh.github.io/images/data_structure/stack/Untitled.png\\"],\\"datePublished\\":\\"2024-06-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-30T03:35:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OYH\\",\\"email\\":\\"19859860010@163.com\\"}]}"]]},"headers":[{"level":2,"title":"The Features of Stack","slug":"the-features-of-stack","link":"#the-features-of-stack","children":[]},{"level":2,"title":"Use linked list to implement a stack","slug":"use-linked-list-to-implement-a-stack","link":"#use-linked-list-to-implement-a-stack","children":[{"level":3,"title":"Include and main()","slug":"include-and-main","link":"#include-and-main","children":[]},{"level":3,"title":"Push()","slug":"push","link":"#push","children":[]},{"level":3,"title":"pop()","slug":"pop","link":"#pop","children":[]},{"level":3,"title":"Print()","slug":"print","link":"#print","children":[]},{"level":3,"title":"Top()","slug":"top","link":"#top","children":[]},{"level":3,"title":"IsEmpty()","slug":"isempty","link":"#isempty","children":[]}]},{"level":2,"title":"Applications","slug":"applications","link":"#applications","children":[{"level":3,"title":"Balanced Parentheses","slug":"balanced-parentheses","link":"#balanced-parentheses","children":[]},{"level":3,"title":"Infix, Postfix, Prefix‚ÄîEvaluation of expressions","slug":"infix-postfix-prefix‚Äîevaluation-of-expressions","link":"#infix-postfix-prefix‚Äîevaluation-of-expressions","children":[]}]}],"git":{"createdTime":1719718516000,"updatedTime":1719718516000,"contributors":[{"name":"dream-oyh","email":"1399541701@qq.com","commits":1}]},"readingTime":{"minutes":2.58,"words":775},"filePathRelative":"study/DataStructure/stack.md","localizedDate":"2024Âπ¥6Êúà22Êó•","excerpt":"\\n<h2>The Features of Stack</h2>\\n<p>The item in the stack must be inserted or removed from the top of the stack. ‚Äî‚ÄúLast in First Out‚Äù(LIFO)</p>\\n<p><strong>Definition:</strong> The Stack is a list with the restriction that insertion and deletion must be performed only from the end, called the top.</p>","autoDesc":true}');export{d as comp,v as data};
