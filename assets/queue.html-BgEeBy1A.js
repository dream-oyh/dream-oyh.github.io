import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-UHNuC2Q7.js";const t="/images/data_structure/queue/Untitled.png",p="/images/data_structure/queue/Untitled 1.png",o="/images/data_structure/queue/Untitled 2.png",i="/images/data_structure/queue/Untitled 3.png",l="/images/data_structure/queue/Untitled 4.png",c="/images/data_structure/queue/Untitled 5.png",r={},u=e('<h1 id="üö∂‚Äç‚ôÇÔ∏è-queues" tabindex="-1"><a class="header-anchor" href="#üö∂‚Äç‚ôÇÔ∏è-queues"><span>üö∂‚Äç‚ôÇÔ∏è Queues</span></a></h1><h2 id="the-features-of-queue" tabindex="-1"><a class="header-anchor" href="#the-features-of-queue"><span>The Features of Queue</span></a></h2><p>Queue is a list or collection with the restriction that insertion can be performed at one end(rear) and deletion can be performed at other end(head). ‚ÄîFirst In First Out(FIFO)</p><p>Operation:</p><ol><li>EnQueue(x) or Push(x);</li><li>DeQueue() or Pop();</li><li>Front() or Peek();</li><li>IsEmpty()</li><li>IsFull()</li></ol><p>The operation above should be performed in the constant time. Their time complexity should be O(1).</p><p>The logistic view of Queue is showed as follow:</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="applications" tabindex="-1"><a class="header-anchor" href="#applications"><span>Applications</span></a></h3><ul><li>Printer queue</li><li>Process scheduling</li><li>Simulating wait</li></ul><h2 id="array-implementation" tabindex="-1"><a class="header-anchor" href="#array-implementation"><span>Array Implementation</span></a></h2><p>This the logistic view of array implementation. We set the length of queue by controlling the <code>front</code> and the <code>rear</code>.</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>When the end of queue arrived the end of the memory block, the DeQueue operation makes the other space unused, and the EnQueue operation is invalid, seen as figure below. So <strong>circular array</strong> was supposed to solve this problem. It builds the array loop, so that the final index elements can be moved to the first index.</p><figure><img src="'+o+`" alt="The first two cells are not available. They are wasted! " tabindex="0" loading="lazy"><figcaption>The first two cells are not available. They are wasted! </figcaption></figure><p>The first two cells are not available. They are wasted!</p><p>First, let‚Äôs see how to implement a queue through linear arrays.</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// for the linear array, the queue can be implemented as follow. (qseudocode)</span>
<span class="token function">LinearArrayImplementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	front <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	rear <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token comment">// for an empty queue, the front and the rear are both equal to -1.</span>
<span class="token punctuation">}</span>
<span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span> front<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> rear <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span>
	<span class="token keyword">else</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
<span class="token function">IsFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span> rear <span class="token operator">==</span> <span class="token function">size</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span>
	<span class="token keyword">else</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
<span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">IsFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		print <span class="token string">&quot;queue is full&quot;</span>
		<span class="token keyword">return</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		front<span class="token operator">&lt;</span><span class="token operator">-</span>rear<span class="token operator">&lt;</span><span class="token number">0</span>
	<span class="token keyword">else</span>
		rear<span class="token operator">&lt;</span><span class="token operator">-</span>rear<span class="token operator">+</span><span class="token number">1</span>

	A<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token operator">-</span> x
<span class="token punctuation">}</span>
<span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> front<span class="token operator">==</span>rear
		front <span class="token operator">&lt;</span><span class="token operator">-</span> rear <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token operator">-</span><span class="token number">1</span>
	<span class="token keyword">else</span>
		front <span class="token operator">&lt;</span><span class="token operator">-</span> front <span class="token operator">+</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, the circular array method can be achieved as pseudocode below. But there is something deserving attention.</p><figure><img src="`+i+`" alt="The circular array diagram" tabindex="0" loading="lazy"><figcaption>The circular array diagram</figcaption></figure><p>The circular array diagram</p><p>When the index is 9, the next index should be 0. So, the index calculating method is changed. If current index is <code>i</code>, the next index should be <code>( i+1 ) % N</code>. (<code>%</code> means modulo operation, <code>N</code> is the number of the elements. ) And previous index should be <code>(i + N - 1) % N</code></p><p>Therefore, the pseudocode should be modified. The modified part is highlighted.</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// for the circular array, the queue can be implemented as follow. (qseudocode)</span>
<span class="token function">LinearArrayImplementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	front <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	rear <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token comment">// for an empty queue, the front and the rear are both equal to -1.</span>
<span class="token punctuation">}</span>
<span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span> front<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> rear <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span>
	<span class="token keyword">else</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
<span class="token function">IsFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> N <span class="token operator">==</span> front
	<span class="token keyword">return</span> <span class="token boolean">true</span>
	<span class="token keyword">else</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
<span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">IsFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		print <span class="token string">&quot;queue is full&quot;</span>
		<span class="token keyword">return</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		front <span class="token operator">&lt;</span><span class="token operator">-</span> rear<span class="token operator">&lt;</span><span class="token number">0</span>
	<span class="token keyword">else</span>
		rear <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token punctuation">(</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> N

	A<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token operator">-</span> x
<span class="token punctuation">}</span>
<span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> front<span class="token operator">==</span>rear
		front <span class="token operator">&lt;</span><span class="token operator">-</span> rear <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token operator">-</span><span class="token number">1</span>
	<span class="token keyword">else</span>
		front <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token punctuation">(</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> N
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, the array implementation can‚Äôt solve the full memory problem. If the memory is full, we choose to reject enqueue or create a new larger array and copy data.</p><h2 id="linked-list-implementation" tabindex="-1"><a class="header-anchor" href="#linked-list-implementation"><span>Linked list implementation</span></a></h2><p>If we choose linked list to achieve the queue, we need to set the direction of enqueue and dequeue.</p><p>Inserting or removing elements from the head or tail of linked list has different time complexity, but we need enqueue or dequeue in the constant time.</p><figure><img src="`+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>To solve this unbalanced time complexity, we choose to set a new pointer ‚Äî rear, like the figure below.</p><figure><img src="'+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>The queue can be implemented by C/C++.</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> data<span class="token punctuation">;</span>
	Node<span class="token operator">*</span> link<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
Node<span class="token operator">*</span> front <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
Node<span class="token operator">*</span> rear <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>front <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> rear <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
	Node<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	temp<span class="token operator">-&gt;</span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>
	temp<span class="token operator">-&gt;</span>link <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	front <span class="token operator">=</span> temp<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
		Node<span class="token operator">*</span> temp1 <span class="token operator">=</span> front<span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>temp1<span class="token operator">-&gt;</span>link <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			temp1 <span class="token operator">=</span> temp1<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		temp1<span class="token operator">-&gt;</span>link <span class="token operator">=</span> temp<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	rear <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	Node<span class="token operator">*</span> temp <span class="token operator">=</span> front<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>front <span class="token operator">==</span> rear<span class="token punctuation">)</span><span class="token punctuation">{</span>
		front <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
		rear <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
		front <span class="token operator">=</span> front<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
		<span class="token keyword">delete</span> temp<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">-&gt;</span>data<span class="token operator">&lt;&lt;</span><span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
	<span class="token function">Print</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;List is: &quot;</span><span class="token punctuation">;</span>
	<span class="token function">Print</span><span class="token punctuation">(</span>front<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33),d=[u];function k(m,v){return s(),a("div",null,d)}const f=n(r,[["render",k],["__file","queue.html.vue"]]),y=JSON.parse('{"path":"/code/data_structure/queue.html","title":"üö∂‚Äç‚ôÇÔ∏è Queues","lang":"zh-CN","frontmatter":{"date":"2024-06-22T00:00:00.000Z","description":"üö∂‚Äç‚ôÇÔ∏è Queues The Features of Queue Queue is a list or collection with the restriction that insertion can be performed at one end(rear) and deletion can be performed at other end...","head":[["meta",{"property":"og:url","content":"https://dream-oyh.github.io/code/data_structure/queue.html"}],["meta",{"property":"og:site_name","content":"Dream_oyh ÁöÑ blog"}],["meta",{"property":"og:title","content":"üö∂‚Äç‚ôÇÔ∏è Queues"}],["meta",{"property":"og:description","content":"üö∂‚Äç‚ôÇÔ∏è Queues The Features of Queue Queue is a list or collection with the restriction that insertion can be performed at one end(rear) and deletion can be performed at other end..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://dream-oyh.github.io/images/data_structure/queue/Untitled.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-22T06:39:51.000Z"}],["meta",{"property":"article:author","content":"OYH"}],["meta",{"property":"article:published_time","content":"2024-06-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-22T06:39:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"üö∂‚Äç‚ôÇÔ∏è Queues\\",\\"image\\":[\\"https://dream-oyh.github.io/images/data_structure/queue/Untitled.png\\",\\"https://dream-oyh.github.io/images/data_structure/queue/Untitled%201.png\\",\\"https://dream-oyh.github.io/images/data_structure/queue/Untitled%202.png\\",\\"https://dream-oyh.github.io/images/data_structure/queue/Untitled%203.png\\",\\"https://dream-oyh.github.io/images/data_structure/queue/Untitled%204.png\\",\\"https://dream-oyh.github.io/images/data_structure/queue/Untitled%205.png\\"],\\"datePublished\\":\\"2024-06-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-22T06:39:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OYH\\",\\"email\\":\\"19859860010@163.com\\"}]}"]]},"headers":[{"level":2,"title":"The Features of Queue","slug":"the-features-of-queue","link":"#the-features-of-queue","children":[{"level":3,"title":"Applications","slug":"applications","link":"#applications","children":[]}]},{"level":2,"title":"Array Implementation","slug":"array-implementation","link":"#array-implementation","children":[]},{"level":2,"title":"Linked list implementation","slug":"linked-list-implementation","link":"#linked-list-implementation","children":[]}],"git":{"createdTime":1719038391000,"updatedTime":1719038391000,"contributors":[{"name":"dream-oyh","email":"1399541701@qq.com","commits":1}]},"readingTime":{"minutes":2.4,"words":719},"filePathRelative":"code/data_structure/queue.md","localizedDate":"2024Âπ¥6Êúà22Êó•","excerpt":"\\n<h2>The Features of Queue</h2>\\n<p>Queue is a list or collection with the restriction that insertion can be performed at one end(rear) and deletion can be performed at other end(head). ‚ÄîFirst In First Out(FIFO)</p>\\n<p>Operation:</p>\\n<ol>\\n<li>EnQueue(x) or Push(x);</li>\\n<li>DeQueue() or Pop();</li>\\n<li>Front() or Peek();</li>\\n<li>IsEmpty()</li>\\n<li>IsFull()</li>\\n</ol>","autoDesc":true}');export{f as comp,y as data};
