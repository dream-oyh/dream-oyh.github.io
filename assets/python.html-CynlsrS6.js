import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as k,c as r,d as i,b as s,a as n,w as a,e as l,o}from"./app-DCjHX1Hq.js";const c={},A=l('<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h2 id="为什么我选择了-python" tabindex="-1"><a class="header-anchor" href="#为什么我选择了-python"><span>为什么我选择了 Python</span></a></h2><p>从大一我就开始接触 MATLAB，并且认为 python 能做的，MATLAB 也能做，而且实现起来更简单，毕竟 MATLAB 作为一个已经商业化的工具，其工作区的可视化和交互性、对于环境的依赖程度确实是 python 不可比拟的。</p><p>但是 MATLAB 完整体量高达 50G，对于磁盘的占用率是不言而喻的，Python 借用包管理器，将体量减小到 MATLAB 远不及的水平。其次，MATLAB 在拟合、神经网络、深度学习等领域，采用已经打包好的工具箱，这对于算法学习是极其不利的，但是 Python 通过各种库的调用，能够从底层逻辑实现各算法，对于个人学习而言是更为有益的。</p><h2 id="包管理器" tabindex="-1"><a class="header-anchor" href="#包管理器"><span>包管理器</span></a></h2><h3 id="pip" tabindex="-1"><a class="header-anchor" href="#pip"><span>pip</span></a></h3>',6),g=l(`<h3 id="poetry-在用" tabindex="-1"><a class="header-anchor" href="#poetry-在用"><span>poetry（在用）</span></a></h3><p>听从<a href="https://absx.pages.dev/" target="_blank" rel="noopener noreferrer">绝对值_x</a>的意见，选用了更为轻量且方便的 poetry 包管理器，有效解决了 pip 存在的两个问题，以下内容参考来源于<a href="https://absx.pages.dev/" target="_blank" rel="noopener noreferrer">绝对值_x</a>博客。</p><h4 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h4><p>这里是 poetry 的<a href="https://python-poetry.org/docs/#installing-with-pipx" target="_blank" rel="noopener noreferrer">官方文档</a>，安装方法：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> poetry</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h4><p>poetry 默认在 C 盘创建虚拟环境，不利于使用，将配置更改至项目所在文件夹，方便环境的调用和管理。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">poetry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> virtualenvs.in-project</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">poetry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cache-dir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> D:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">poetry_enev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="基本命令" tabindex="-1"><a class="header-anchor" href="#基本命令"><span>基本命令</span></a></h4><p><strong>新建项目：</strong></p><ul><li><p><code>poetry new &lt;package name&gt;</code></p></li><li><p>创建 <code>.toml</code> 文件：<code>poetry init</code>，然后跟着提示填入信息</p><p><strong>包管理</strong></p></li><li><p>添加包：<code>poetry add &lt;package name&gt;</code></p></li><li><p>移除包：<code>poetry remove &lt;package name&gt;</code></p></li><li><p>列出可用包：<code>poetry show</code></p><p><strong>安装依赖</strong></p></li><li><p>从现有 <code>pyproject.toml</code> 安装：<code>poetry install</code>，会自动新建虚拟环境</p></li><li><p>从 <code>requirements.txt</code> 安装（不够完善）：<code>cat requirements.txt | xargs -I % sh -c &#39;poetry add &quot;%&quot;&#39; (ref)</code></p><p><strong>虚拟环境</strong></p></li><li><p>激活：<code>poetry shell</code></p></li><li><p>删除虚拟环境：<code>poetry env remove --all</code></p></li><li><p>运行：<code>poetry run python &lt;filename&gt;.py</code></p></li></ul><h3 id="conda" tabindex="-1"><a class="header-anchor" href="#conda"><span>conda</span></a></h3><p>拒绝 Anaconda 的大体积，建议安装 Miniconda 作为环境管理器。</p><h4 id="安装-1" tabindex="-1"><a class="header-anchor" href="#安装-1"><span>安装</span></a></h4>`,14),y=i("p",null,"scoop 一行搞定",-1),B=i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"scoop"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," install"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," miniconda")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1),F=i("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh","data-title":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"wget"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"bash"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," Miniconda3-latest-Linux-x86_64.sh"),i("span",{style:{"--shiki-light":"#A0A1A7","--shiki-dark":"#7F848E","--shiki-light-font-style":"italic","--shiki-dark-font-style":"italic"}},"  # 接下来一路空格")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1),u=l(`<h4 id="基本命令-1" tabindex="-1"><a class="header-anchor" href="#基本命令-1"><span>基本命令</span></a></h4><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">conda</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -V</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> # 查看 conda 版本</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">conda</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">python=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">versio</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n&gt; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 创建环境</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">conda</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> activate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 激活环境</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">conda</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> deactivate</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    # 关闭环境</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">conda</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remove</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--all</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  # 删除环境，也可进入 conda 安装目录下的 /envs/ 删除文件夹</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">conda</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  # 查看环境内工具包</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gui" tabindex="-1"><a class="header-anchor" href="#gui"><span>GUI</span></a></h2><p>我现在正在使用的 GUI 库是 customtkinter，其基于 python 原生 tkinter GUI 库开发，对原生控件在美观和易用性上做了处理，用熟练之后个人认为还是挺好用的（反正比原生好看太多），使用文档<a href="https://customtkinter.tomschimansky.com/documentation/" target="_blank" rel="noopener noreferrer">在这</a> <s>文档写的依托</s>，github 源码<a href="https://github.com/tomschimansky/customtkinter" target="_blank" rel="noopener noreferrer">点击此处</a></p><h3 id="快捷键绑定" tabindex="-1"><a class="header-anchor" href="#快捷键绑定"><span>快捷键绑定</span></a></h3><p><strong>踩坑 1：快捷键的前提是有焦点，但是焦点一般不在控件身上，而是在整个窗口上</strong></p><p>customtkinter 的每个 widget 都是支持快捷键的，并且提供了<code>bind()</code>函数绑定快捷键，但是这个前提在于，计算机系统的焦点要在该 widget 上。但是在刚进入窗口时，计算机的焦点是整个窗口，而非特定的 widget。</p><p>在查询很多资料后，我采用的方法是为窗口绑定快捷键。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> costumtkinter </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tk</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">app </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tk.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">CTk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">app.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">bind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&lt;Return&gt;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">lambda</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> _</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: app.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">call_func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">app.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">mainloop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样窗口绑定了快捷键，并且与响应的回调函数匹配。</p><div class="hint-container important"><p class="hint-container-title">理解</p><p>这里的回调函数，是和你想要的那个按钮/标签/滑动条的参数匹配的，比如说，你的按钮回调函数是<code>step_forward()</code>，那这里的回调函数也是调用<code>step_forward()</code>函数，其实本质上是让 app 窗口替这个按钮执行该函数。</p><blockquote><p>但是一般谁会想到让窗口代替执行啊，最直接的想法难道不就是让按钮直接绑定吗？可恶的 Tkinter</p></blockquote></div><p><strong>踩坑 2：回调函数的写法</strong></p><p>这里的之所以采用<code>lambda</code>关键字，是因为<code>bind()</code>的第二个参数会返回一个事件作为参数输入后面的函数中。但是在我的项目里，我是不需要这个事件作为输入的，所以采用<code>_</code>抛弃了这个参数。</p><p>其次，<code>lambda</code>里面的可调用对象是需要加<code>()</code>的，否则没法用。 <s>这个盲点看了好久才发现</s></p><p><strong>踩坑 3：按键的写法</strong></p><p>这里就不得不提到 python 里<code>事件</code>这个概念了，详情可以看<a href="https://www.cnblogs.com/yuanqiangfei/p/11624546.html" target="_blank" rel="noopener noreferrer">这篇博客</a>，他对<code>事件</code>这个概念做了比较深的剖析，在这里说一下我的踩坑点和学到的快捷键。</p><ol><li>我本来想要设置<code>&lt;Enter&gt;</code>作为快捷键的，但是<code>&lt;Enter&gt;</code>代表的意思是鼠标进入窗口，真正的回车键应该打作<code>&lt;Return&gt;</code></li><li><code>&lt;Key-s&gt;</code>表示按下<code>s</code>键，<code>Key</code>三个字决定了这个信号来自键盘</li><li><code>&lt;Button-1&gt;</code>表示按下鼠标左键，左中右三者数字分别是<code>123</code>，<code>&lt;Button&gt;</code>表示信号来自鼠标。</li></ol><h2 id="修饰符" tabindex="-1"><a class="header-anchor" href="#修饰符"><span>修饰符</span></a></h2><h3 id="classmethod" tabindex="-1"><a class="header-anchor" href="#classmethod"><span>@classmethod</span></a></h3><p>classmethod 修饰的方法不需要实例化，不需要 self 参数，但第一个参数需要是表示自身类的 cls 参数，可以来调用类的属性，类型，实例化对象等。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> A</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">object</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  bar </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fun1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;foo&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  @classmate</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> func2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">cls</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;func2&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cls</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.bar)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    cls</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">fun1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()   </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 调用 foo 方法</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">A.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">func2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()               </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 不需要实例化</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>func2</span></span>
<span class="line"><span>1</span></span>
<span class="line"><span>foo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构"><span>数据结构</span></a></h2><h3 id="列表-list-和元组-tuple" tabindex="-1"><a class="header-anchor" href="#列表-list-和元组-tuple"><span>列表 list 和元组 tuple</span></a></h3><p>列表为一个由中括号<code>[]</code>括起来的一个数组，元组是小括号<code>()</code>，一般用列表，因为元组的内容在初始化之后就不可改变</p><p>列表支持的操作：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 返回列表个数</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 返回最大值</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">min</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 返回最小值</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(obj) </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 在列表末尾添加新的对象</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(obj) </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 统计某个元素在列表中出现的次数</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">cmp</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">None</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">None</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">reverse</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 对原列表进行排序</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">pop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([index=</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]) </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字典-dict" tabindex="-1"><a class="header-anchor" href="#字典-dict"><span>字典 dict</span></a></h3><p>字典是 python 对哈希表的实现，由多项键值对组成</p><p>字典支持的操作：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">dict</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 返回字典键的个数</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">dict</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(key, </span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">default</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">None</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 返回指定键的值，如果值不在字典中返回 default 值</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">dict</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">values</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 以列表返回字典中的所有值</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">dict</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">pop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(key[,default]) </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 删除字典给定键 key 所对应的值，返回值为被删除的值。key 值必须给出。否则，返回 default 值。</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">dict</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">items</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 返回由键和值组成的迭代对象，可以用：for key, value in dict.items(): 调用</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="集合" tabindex="-1"><a class="header-anchor" href="#集合"><span>集合</span></a></h3><p>集合创建一个无序不重复元素集，可删除重复数据，还可以计算并集、交集、差集</p><p>创建集合方式：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">group </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 创建集合</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> y </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 交集，包括同时在集合 x 和 y 中的共同元素</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> y </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 并集，包括集合 x 和 y 中所有元素</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> y </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 差集，包括在集合 x 中但不在集合 y 中的元素</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">^</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> y </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 补集，包括集合 x 和 y 的非共同元素</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自带模块库" tabindex="-1"><a class="header-anchor" href="#自带模块库"><span>自带模块库</span></a></h2><h3 id="os" tabindex="-1"><a class="header-anchor" href="#os"><span>os</span></a></h3><p><code>os</code>库让 Python 能够与系统命令行交互，通过 python 操作系统文件，运行脚本，基本命令如下：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 导入 os 库</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">os.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">chdir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;/home&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 切换到指定目录</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">os.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">system</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&lt;cmd&gt;&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 在命令行运行指定命令</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">os.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">listdir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;.&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 列出当前目录下的文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">os.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&lt;file&gt;&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 删除指定文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">os.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&lt;dir&gt;&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">exist_ok</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 创建指定目录</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">os.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">rmdir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&lt;dir&gt;&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 删除指定目录</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="csv" tabindex="-1"><a class="header-anchor" href="#csv"><span>csv</span></a></h3><blockquote><p>2024.3 写视频打标签 GUI 工具的时候，师兄让我把标签写入 csv 文件，但是我对 pandas 又用的不熟练，就只能用 csv 先做一个替代，现将使用方式记录如下</p></blockquote><h4 id="csv-读取文件" tabindex="-1"><a class="header-anchor" href="#csv-读取文件"><span>csv 读取文件</span></a></h4><p>读取文件我还是觉得 pandas 会更方便一点，用<code>.head()</code>和<code>.tail()</code>读取头行和尾行，再用<code>.iloc[]</code>定位到具体数值，比 csv 方便很多。</p><h4 id="csv-写入文件" tabindex="-1"><a class="header-anchor" href="#csv-写入文件"><span>csv 写入文件</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">with</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;example.csv&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">mode</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;w&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">newline</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  csv.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">writer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(f).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">writerow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(data: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>调用该语句就能在 csv 文件中写入<code>data</code>数据</p><blockquote><p>我最开始的时候没加<code>newline=&#39;&#39;</code>导致我遇到一个问题，就是我一旦<code>writerow</code>写进一个新的行，软件总会自动先跳一空行，再写入数据，就使文档结构很奇怪</p><p>网上查找后才发现需要加上<code>newline=&#39;&#39;</code>参数，规避空行 <s>（python 设计师你怎么回事）</s></p></blockquote><h4 id="csv-追加文件" tabindex="-1"><a class="header-anchor" href="#csv-追加文件"><span>csv 追加文件</span></a></h4><p>如果将<code>mode</code>设成<code>&#39;w&#39;</code>，会导致写入时覆盖已有数据。解决方法时将<code>&#39;w&#39;</code>修改为<code>&#39;a+&#39;</code>，将模式改为“追加”模式，这样再用<code>writerow</code>写入时，就会在 csv 文件的最下方加入新数据，而非完全覆盖了。</p><h2 id="生成器函数" tabindex="-1"><a class="header-anchor" href="#生成器函数"><span>生成器函数</span></a></h2><p>Python 中提供了关键字<code>yield</code>，用来定义生成器函数，可以看看<a href="https://blog.csdn.net/mieleizhi0522/article/details/82142856" target="_blank" rel="noopener noreferrer">这篇教程</a></p><h2 id="async-await-协程函数" tabindex="-1"><a class="header-anchor" href="#async-await-协程函数"><span>Async / Await 协程函数</span></a></h2><p>Async 为 Python 提供了协程函数的定义，相较于传统的单线程工作方式，协程函数可以实现异步执行和多线程工作，并且可以暂停和恢复执行。</p><p><a href="https://zhuanlan.zhihu.com/p/27258289" target="_blank" rel="noopener noreferrer">tutorial</a></p><p>async 定义了协程函数，await 定义了协程函数的暂停和恢复执行。</p><h2 id="语法糖" tabindex="-1"><a class="header-anchor" href="#语法糖"><span>语法糖</span></a></h2><h3 id="切片索引" tabindex="-1"><a class="header-anchor" href="#切片索引"><span>切片索引</span></a></h3><p><code>sequence[start:end:step]</code></p><ul><li><p><code>start</code>：切片的起始索引。如果省略，切片将从序列的开头（即索引 0）开始。</p></li><li><p><code>end</code>：切片的结束索引。如果省略，切片将在序列的最后一个元素处结束。</p></li><li><p><code>step</code>：切片中每个元素之间的增量。如果省略，则默认步长值为 1</p></li></ul>`,60);function m(v,b){const h=k("RouteLink"),p=k("Tabs");return o(),r("div",null,[A,i("p",null,[s("这是 Python 自带的包管理器，但是存在一定的问题，后将其弃用，改用"),n(h,{to:"/code/python.html#poetry-%E5%9C%A8%E7%94%A8"},{default:a(()=>[s("poetry")]),_:1}),s("，其问题可见"),n(h,{to:"/artical/weakness.html#pip"},{default:a(()=>[s("产品吐槽")]),_:1}),s("板块。")]),g,n(p,{id:"117",data:[{id:"Windows"},{id:"Linux"}]},{title0:a(({value:t,isActive:e})=>[s("Windows")]),title1:a(({value:t,isActive:e})=>[s("Linux")]),tab0:a(({value:t,isActive:e})=>[y,B]),tab1:a(({value:t,isActive:e})=>[F]),_:1}),u])}const E=d(c,[["render",m],["__file","python.html.vue"]]),x=JSON.parse('{"path":"/code/python.html","title":"Python","lang":"zh-CN","frontmatter":{"date":"2024-01-24T00:00:00.000Z","icon":"python","category":"编程","tag":"教程","description":"Python 为什么我选择了 Python 从大一我就开始接触 MATLAB，并且认为 python 能做的，MATLAB 也能做，而且实现起来更简单，毕竟 MATLAB 作为一个已经商业化的工具，其工作区的可视化和交互性、对于环境的依赖程度确实是 python 不可比拟的。 但是 MATLAB 完整体量高达 50G，对于磁盘的占用率是不言而喻的，Py...","head":[["meta",{"property":"og:url","content":"https://dream-oyh.github.io/code/python.html"}],["meta",{"property":"og:site_name","content":"Dream_oyh 的 blog"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 为什么我选择了 Python 从大一我就开始接触 MATLAB，并且认为 python 能做的，MATLAB 也能做，而且实现起来更简单，毕竟 MATLAB 作为一个已经商业化的工具，其工作区的可视化和交互性、对于环境的依赖程度确实是 python 不可比拟的。 但是 MATLAB 完整体量高达 50G，对于磁盘的占用率是不言而喻的，Py..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-05T08:39:36.000Z"}],["meta",{"property":"article:author","content":"OYH"}],["meta",{"property":"article:tag","content":"教程"}],["meta",{"property":"article:published_time","content":"2024-01-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-05T08:39:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-05T08:39:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OYH\\",\\"email\\":\\"19859860010@163.com\\"}]}"]]},"headers":[{"level":2,"title":"为什么我选择了 Python","slug":"为什么我选择了-python","link":"#为什么我选择了-python","children":[]},{"level":2,"title":"包管理器","slug":"包管理器","link":"#包管理器","children":[{"level":3,"title":"pip","slug":"pip","link":"#pip","children":[]},{"level":3,"title":"poetry（在用）","slug":"poetry-在用","link":"#poetry-在用","children":[]},{"level":3,"title":"conda","slug":"conda","link":"#conda","children":[]}]},{"level":2,"title":"GUI","slug":"gui","link":"#gui","children":[{"level":3,"title":"快捷键绑定","slug":"快捷键绑定","link":"#快捷键绑定","children":[]}]},{"level":2,"title":"修饰符","slug":"修饰符","link":"#修饰符","children":[{"level":3,"title":"@classmethod","slug":"classmethod","link":"#classmethod","children":[]}]},{"level":2,"title":"数据结构","slug":"数据结构","link":"#数据结构","children":[{"level":3,"title":"列表 list 和元组 tuple","slug":"列表-list-和元组-tuple","link":"#列表-list-和元组-tuple","children":[]},{"level":3,"title":"字典 dict","slug":"字典-dict","link":"#字典-dict","children":[]},{"level":3,"title":"集合","slug":"集合","link":"#集合","children":[]}]},{"level":2,"title":"自带模块库","slug":"自带模块库","link":"#自带模块库","children":[{"level":3,"title":"os","slug":"os","link":"#os","children":[]},{"level":3,"title":"csv","slug":"csv","link":"#csv","children":[]}]},{"level":2,"title":"生成器函数","slug":"生成器函数","link":"#生成器函数","children":[]},{"level":2,"title":"Async / Await 协程函数","slug":"async-await-协程函数","link":"#async-await-协程函数","children":[]},{"level":2,"title":"语法糖","slug":"语法糖","link":"#语法糖","children":[{"level":3,"title":"切片索引","slug":"切片索引","link":"#切片索引","children":[]}]}],"git":{"createdTime":1707929375000,"updatedTime":1722847176000,"contributors":[{"name":"dream同学0","email":"1399541701@qq.com","commits":10},{"name":"dream-oyh","email":"1399541701@qq.com","commits":3},{"name":"dream_linux","email":"1399541701@qq.com","commits":1}]},"readingTime":{"minutes":8.15,"words":2444},"filePathRelative":"code/python.md","localizedDate":"2024年1月24日","excerpt":"\\n<h2>为什么我选择了 Python</h2>\\n<p>从大一我就开始接触 MATLAB，并且认为 python 能做的，MATLAB 也能做，而且实现起来更简单，毕竟 MATLAB 作为一个已经商业化的工具，其工作区的可视化和交互性、对于环境的依赖程度确实是 python 不可比拟的。</p>\\n<p>但是 MATLAB 完整体量高达 50G，对于磁盘的占用率是不言而喻的，Python 借用包管理器，将体量减小到 MATLAB 远不及的水平。其次，MATLAB 在拟合、神经网络、深度学习等领域，采用已经打包好的工具箱，这对于算法学习是极其不利的，但是 Python 通过各种库的调用，能够从底层逻辑实现各算法，对于个人学习而言是更为有益的。</p>","autoDesc":true}');export{E as comp,x as data};
