import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c as l,d as s,b as n,a as c,e as a}from"./app-CwUGJ6Zj.js";const i="/images/data_structure/tree/Untitled.png",r={},u=a('<h1 id="ðŸŒ³-trees" tabindex="-1"><a class="header-anchor" href="#ðŸŒ³-trees"><span>ðŸŒ³ Trees</span></a></h1><p><strong>Definition:</strong> A tree is a set consisting of several finite nodes with hierarchical relationships.</p><p><strong>Features:</strong> root, children, parent, sibling, leaves, (ancestor, descendent, cousin)</p><ul><li>Tree can be seen recursive data structure.</li><li>Tree has N Nodes, and N-1 edges.</li><li><strong>Depth of x</strong> is defined as the number of edges in path from root to that node.</li><li><strong>Hight of x</strong> is defined as the number of edges in the longest path from the node to a leaf node.</li></ul><p><strong>Logistic View:</strong></p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Applications:</p><ul><li>Storing naturally hierarchical data, eg: file system.</li><li>Organizing data for quick search, insertion, deletion, eg: binary search tree.</li><li>Trie, eg: dictionary.</li><li>Network routing algorithm.</li></ul><h2 id="binary-tree" tabindex="-1"><a class="header-anchor" href="#binary-tree"><span>Binary tree</span></a></h2><p>Binary tree is a tree in which each node can have at most 2 children.</p><p><strong>Relative conception:</strong></p><ul><li><strong>Complete Binary tree:</strong> all leaves except possibly the last are completely filled and all nodes are as left as possible.</li></ul>',12),m=s("p",null,[n("Most nodes at level i is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mi",null,"i")])]),s("annotation",{encoding:"application/x-tex"},"2^i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8247em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8247em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])])])])])])])])]),n(".")],-1),d=s("ul",null,[s("li",null,[s("strong",null,"Perfect Binary tree:"),n(" All nodes should be completely filled.")])],-1),k=s("p",null,[n("If the height of the perfect binary tree is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"h")]),s("annotation",{encoding:"application/x-tex"},"h")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"h")])])]),n(", the max number of binary trees, namely the nodes number of a perfect binary tree, is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mrow",null,[s("mi",null,"h"),s("mo",null,"+"),s("mn",null,"1")])]),s("mo",null,"âˆ’"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"2^{h+1} - 1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9324em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"h"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"âˆ’"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),n(", equal to "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mtext",null,"numberÂ ofÂ levels")]),s("mo",null,"âˆ’"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"2^{\\text{number of levels}}-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9324em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord text mtight"},[s("span",{class:"mord mtight"},"numberÂ ofÂ levels")])])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"âˆ’"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),n(". So if we have a perfect binary tree with "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),n(" nodes, we can calculate the max height of this tree, that is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"h"),s("mo",null,"="),s("mi",null,"l"),s("mi",null,"o"),s("msub",null,[s("mi",null,"g"),s("mn",null,"2")]),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",null,"+"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mo",null,"âˆ’"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"h=log_2(n+1)-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"h"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0359em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"â€‹")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"âˆ’"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),n(", which is relative to the time complexity of searching. For the complete binary tree, height of the tree is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{fence:"true"},"âŒŠ"),s("mi",null,"l"),s("mi",null,"o"),s("msub",null,[s("mi",null,"g"),s("mn",null,"2")]),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")"),s("mo",{fence:"true"},"âŒ‹")]),s("annotation",{encoding:"application/x-tex"},"\\left \\lfloor log_2(n) \\right \\rfloor")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"minner"},[s("span",{class:"mopen delimcenter",style:{top:"0em"}},"âŒŠ"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0359em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"â€‹")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")"),s("span",{class:"mclose delimcenter",style:{top:"0em"}},"âŒ‹")])])])]),n("(proof omitted). In the binary search tree, when we calculate the cost and complexity of searching, we wanna the height of the tree to be less, that is the tree would be denser, be closer to a complete binary tree. In addition, we let the height of an empty tree to be -1.")],-1),h=s("ul",null,[s("li",null,[s("strong",null,"Balanced Binary Tree:"),n(" Difference between the height of left and right subtree for every node is not more than k (mostly 1).")])],-1),g=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"D"),s("mi",null,"i"),s("mi",null,"f"),s("mi",null,"f"),s("mo",null,"="),s("mi",{mathvariant:"normal"},"âˆ£"),s("msub",null,[s("mi",null,"h"),s("mrow",null,[s("mi",null,"l"),s("mi",null,"e"),s("mi",null,"f"),s("mi",null,"t")])]),s("mo",null,"âˆ’"),s("msub",null,[s("mi",null,"h"),s("mrow",null,[s("mi",null,"r"),s("mi",null,"i"),s("mi",null,"g"),s("mi",null,"h"),s("mi",null,"t")])]),s("mi",{mathvariant:"normal"},"âˆ£")]),s("annotation",{encoding:"application/x-tex"}," Diff = |h_{left}- h_{right}| ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"ff"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0361em","vertical-align":"-0.2861em"}}),s("span",{class:"mord"},"âˆ£"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"h"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal mtight"},"e"),s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mord mathnormal mtight"},"t")])])])]),s("span",{class:"vlist-s"},"â€‹")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2861em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"âˆ’"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0361em","vertical-align":"-0.2861em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"h"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal mtight"},"h"),s("span",{class:"mord mathnormal mtight"},"t")])])])]),s("span",{class:"vlist-s"},"â€‹")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2861em"}},[s("span")])])])])]),s("span",{class:"mord"},"âˆ£")])])])])],-1),v=s("h2",{id:"time-complexity-difference-between-several-structures-with-binary-search",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#time-complexity-difference-between-several-structures-with-binary-search"},[s("span",null,"Time complexity difference between several structures with binary search")])],-1),b=s("p",null,"If you want to know more about binary tree, please look up on Wiki below.",-1),y={href:"https://en.wikipedia.org/wiki/Binary_search",target:"_blank",rel:"noopener noreferrer"},f=s("table",null,[s("thead",null,[s("tr",null,[s("th"),s("th",null,"Arrays(unsorted)"),s("th",null,"Linked List"),s("th",null,"Arrays(sorted)"),s("th",null,"Binary Search Tree (Balanced)")])]),s("tbody",null,[s("tr",null,[s("td",null,"Search(x)"),s("td",null,"O(n)"),s("td",null,"O(n)"),s("td",null,[n("O("),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"l"),s("mi",null,"o"),s("msub",null,[s("mi",null,"g"),s("mn",null,"2")]),s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"log_2n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0359em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"â€‹")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mord mathnormal"},"n")])])]),n(")")]),s("td",null,[n("O("),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"l"),s("mi",null,"o"),s("msub",null,[s("mi",null,"g"),s("mn",null,"2")]),s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"log_2n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0359em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"â€‹")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mord mathnormal"},"n")])])]),n(")")])]),s("tr",null,[s("td",null,"Insert(x)"),s("td",null,"O(1)/O(n)"),s("td",null,"O(1)/O(n)"),s("td",null,"O(n)"),s("td",null,[n("O(l"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"o"),s("msub",null,[s("mi",null,"g"),s("mn",null,"2")]),s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"og_2n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0359em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"â€‹")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mord mathnormal"},"n")])])]),n(")")])]),s("tr",null,[s("td",null,"Delete(x)"),s("td",null,"O(n)"),s("td",null,"O(n)"),s("td",null,"O(n)"),s("td",null,[n("O("),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"l"),s("mi",null,"o"),s("msub",null,[s("mi",null,"g"),s("mn",null,"2")]),s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"log_2n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0359em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"â€‹")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mord mathnormal"},"n")])])]),n(")")])])])],-1),w=a(`<p>So we introduce the binary search tree, in which we can make each step accomplished in shorter time.</p><p>Binary search tree is a binary tree, in which for each node, the value of all the nodes in the left subtree is lesser or equal, and the value of all the nodes in the right subtree is greater.</p><h2 id="implementation-in-c-c" tabindex="-1"><a class="header-anchor" href="#implementation-in-c-c"><span>Implementation in C/C++</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> data<span class="token punctuation">;</span>
	Node<span class="token operator">*</span> left<span class="token punctuation">;</span>
	Node<span class="token operator">*</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Node<span class="token operator">*</span> <span class="token function">getNewNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
	Node<span class="token operator">*</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	root<span class="token operator">-&gt;</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
	root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token operator">*</span> rootPtr<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>rootPtr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token operator">*</span>rootPtr <span class="token operator">=</span> <span class="token function">getNewNode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">&lt;=</span><span class="token punctuation">(</span><span class="token operator">*</span>rootPtr<span class="token punctuation">)</span><span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token function">Insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>rootPtr<span class="token punctuation">)</span><span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
		<span class="token function">Insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>rootPtr<span class="token punctuation">)</span><span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">Search</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>data <span class="token operator">==</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>data <span class="token operator">&gt;</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">Search</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">Search</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">findMin</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token function">findMin</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">findMax</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token function">findMax</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">findHeight</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">findHeight</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">findHeight</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	Node<span class="token operator">*</span> root<span class="token punctuation">;</span>
	root <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token function">Insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>root<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">Insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>root<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">Insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>root<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">Insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>root<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token function">Search</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token function">findMin</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token function">findMax</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token function">findHeight</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above code includes several operations on tree, like insert elements, search elements, find min, find max and return height. In this section, we use recursion to simplify the code. Be careful and notable to that.</p><h2 id="binary-tree-traversal" tabindex="-1"><a class="header-anchor" href="#binary-tree-traversal"><span>Binary Tree Traversal</span></a></h2><p>Tree traversal: the process of visiting each node in the tree exactly once in certain order. It can be classified as <strong>the breadth first</strong> and <strong>the depth first</strong>.</p>`,7),x=s("ul",null,[s("li",null,[s("p",null,"Breadth First: level-order In this method, we use a queue to store the address of discovered node. Before we visit or operate the node, we need make its left and right children address enqueue in order. We can easily implement this method in C++, like this, just a loop."),s("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[s("pre",{class:"language-cpp"},[s("code",null,[s("span",{class:"token keyword"},"void"),n(),s("span",{class:"token function"},"LevelOrder"),s("span",{class:"token punctuation"},"("),n("Node"),s("span",{class:"token operator"},"*"),n(" root"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"{"),n(`
	`),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("root "),s("span",{class:"token operator"},"=="),n(),s("span",{class:"token constant"},"NULL"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"return"),s("span",{class:"token punctuation"},";"),n(`
	queue`),s("span",{class:"token operator"},"<"),n("Node"),s("span",{class:"token operator"},"*"),s("span",{class:"token operator"},">"),n(" Q"),s("span",{class:"token punctuation"},";"),n(`
	Q`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"push"),s("span",{class:"token punctuation"},"("),n("root"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
	`),s("span",{class:"token keyword"},"while"),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token operator"},"!"),n("Q"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"empty"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"{"),n(`
		Node`),s("span",{class:"token operator"},"*"),n(" current "),s("span",{class:"token operator"},"="),n(" Q"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"front"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
		cout`),s("span",{class:"token operator"},"<<"),n("current"),s("span",{class:"token operator"},"->"),n("data"),s("span",{class:"token operator"},"<<"),n("endl"),s("span",{class:"token punctuation"},";"),n(`
		`),s("span",{class:"token keyword"},"if"),s("span",{class:"token punctuation"},"("),n("current"),s("span",{class:"token operator"},"->"),n("left "),s("span",{class:"token operator"},"!="),n(),s("span",{class:"token constant"},"NULL"),s("span",{class:"token punctuation"},")"),n(" Q"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"push"),s("span",{class:"token punctuation"},"("),n("current"),s("span",{class:"token operator"},"->"),n("left"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
		`),s("span",{class:"token keyword"},"if"),s("span",{class:"token punctuation"},"("),n("current"),s("span",{class:"token operator"},"->"),n("right "),s("span",{class:"token operator"},"!="),n(),s("span",{class:"token constant"},"NULL"),s("span",{class:"token punctuation"},")"),n(" Q"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"push"),s("span",{class:"token punctuation"},"("),n("current"),s("span",{class:"token operator"},"->"),n("right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
		Q`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"pop"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
	`),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])]),s("p",null,[n("Then, letâ€™s talk about time complexity and space complexity. In this method, visiting a node just need the constant time. Each node just be visited once. So if a binary search tree has n nodes, the time complexity of level order Traversal is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),n(". For space complexity, the usage of the queue is dynamic and doesnâ€™t depend on the number of nodes. The best performance is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),n(", but the worst and average performance is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),n(".")])]),s("li",null,[s("p",null,"Depth First:"),s("ul",null,[s("li",null,[s("code",null,"<root><left><right>"),n(" Preorder (DLR)")]),s("li",null,[s("code",null,"<left><root><right>"),n(" Inorder (LDR)")]),s("li",null,[s("code",null,"<left><right><root>"),n(" Postorder (LRD) By recursion, this can be achieved easily.")])]),s("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[s("pre",{class:"language-cpp"},[s("code",null,[s("span",{class:"token keyword"},"void"),n(),s("span",{class:"token function"},"LDROrder"),s("span",{class:"token punctuation"},"("),n("Node"),s("span",{class:"token operator"},"*"),n(" root"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"{"),n(`
	`),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("root"),s("span",{class:"token operator"},"=="),s("span",{class:"token constant"},"NULL"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"return"),s("span",{class:"token punctuation"},";"),n(`
	`),s("span",{class:"token function"},"LDROrder"),s("span",{class:"token punctuation"},"("),n("root"),s("span",{class:"token operator"},"->"),n("left"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
	cout`),s("span",{class:"token operator"},"<<"),n("root"),s("span",{class:"token operator"},"->"),n("data"),s("span",{class:"token operator"},"<<"),s("span",{class:"token string"},'" "'),s("span",{class:"token punctuation"},";"),n(`
	`),s("span",{class:"token function"},"LDROrder"),s("span",{class:"token punctuation"},"("),n("root"),s("span",{class:"token operator"},"->"),n("right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`

`),s("span",{class:"token keyword"},"void"),n(),s("span",{class:"token function"},"DLROrder"),s("span",{class:"token punctuation"},"("),n("Node"),s("span",{class:"token operator"},"*"),n(" root"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"{"),n(`
	`),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("root"),s("span",{class:"token operator"},"=="),s("span",{class:"token constant"},"NULL"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"return"),s("span",{class:"token punctuation"},";"),n(`
	cout`),s("span",{class:"token operator"},"<<"),n("root"),s("span",{class:"token operator"},"->"),n("data"),s("span",{class:"token operator"},"<<"),s("span",{class:"token string"},'" "'),s("span",{class:"token punctuation"},";"),n(`
	`),s("span",{class:"token function"},"LDROrder"),s("span",{class:"token punctuation"},"("),n("root"),s("span",{class:"token operator"},"->"),n("left"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
	`),s("span",{class:"token function"},"LDROrder"),s("span",{class:"token punctuation"},"("),n("root"),s("span",{class:"token operator"},"->"),n("right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`

`),s("span",{class:"token keyword"},"void"),n(),s("span",{class:"token function"},"LRDOrder"),s("span",{class:"token punctuation"},"("),n("Node"),s("span",{class:"token operator"},"*"),n(" root"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"{"),n(`
	`),s("span",{class:"token keyword"},"if"),n(),s("span",{class:"token punctuation"},"("),n("root"),s("span",{class:"token operator"},"=="),s("span",{class:"token constant"},"NULL"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"return"),s("span",{class:"token punctuation"},";"),n(`
	`),s("span",{class:"token function"},"LDROrder"),s("span",{class:"token punctuation"},"("),n("root"),s("span",{class:"token operator"},"->"),n("left"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
	`),s("span",{class:"token function"},"LDROrder"),s("span",{class:"token punctuation"},"("),n("root"),s("span",{class:"token operator"},"->"),n("right"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
	cout`),s("span",{class:"token operator"},"<<"),n("root"),s("span",{class:"token operator"},"->"),n("data"),s("span",{class:"token operator"},"<<"),s("span",{class:"token string"},'" "'),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])])])],-1),L=a(`<h2 id="is-it-the-binary-search-tree" tabindex="-1"><a class="header-anchor" href="#is-it-the-binary-search-tree"><span>Is it the binary search tree?</span></a></h2><p>We use recursion to tell whether a tree is a binary search tree or not.</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token function">IsSubtreeLesser</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>data <span class="token operator">&lt;=</span> value
		<span class="token operator">&amp;&amp;</span> <span class="token function">IsSubtreeLesser</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
		<span class="token operator">&amp;&amp;</span> <span class="token function">IsSubtreeLesser</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
	<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">IsSubtreeGreater</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>data <span class="token operator">&gt;</span> value
		<span class="token operator">&amp;&amp;</span> <span class="token function">IsSubtreeGreater</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
		<span class="token operator">&amp;&amp;</span> <span class="token function">IsSubtreeGreater</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
	<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">IsBinarySearchTree</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>
		<span class="token function">IsSubtreeLesser</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span>
		<span class="token operator">&amp;&amp;</span> <span class="token function">IsSubtreeGreater</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span>
		<span class="token operator">&amp;&amp;</span> <span class="token function">IsBinarySearchTree</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span>
		<span class="token operator">&amp;&amp;</span> <span class="token function">IsBinarySearchTree</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span>
	<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="how-to-delete-a-element-in-a-binary-search-tree" tabindex="-1"><a class="header-anchor" href="#how-to-delete-a-element-in-a-binary-search-tree"><span>How to delete a element in a binary search tree?</span></a></h2><p>Itâ€™s very complex to delete a element in a binary search tree. After deletion, we need to maintain the tree still is the binary search tree.</p><p>We can divided this problem as three cases: <strong>1) if the node doesnâ€™t has child node. 2) if the node has only one child node. 3) if the node has two child nodes</strong>.</p><p>For the first case, we should easily delete the node and free the memory. That will be okay.</p><p>For the second case, we should make its parent nodeâ€™s pointer point to its child node.</p><p>For the third case, we should wipe off the data of this node, and find the min value in its right subtree. Then, copy the value in targeted node and delete duplicate from right-subtree.</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>Node<span class="token operator">*</span> <span class="token function">Delete</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&lt;=</span> root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span> root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">Delete</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&gt;=</span> root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span> root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">Delete</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left <span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-&gt;</span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">delete</span> root<span class="token punctuation">;</span>
			root <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			Node<span class="token operator">*</span> temp <span class="token operator">=</span> root<span class="token punctuation">;</span>
			root <span class="token operator">=</span> root<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
			<span class="token keyword">delete</span> temp<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			Node<span class="token operator">*</span> temp <span class="token operator">=</span> root<span class="token punctuation">;</span>
			root <span class="token operator">=</span> root<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
			<span class="token keyword">delete</span> temp<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span><span class="token punctuation">{</span>
			<span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token function">findMin</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
			root<span class="token operator">-&gt;</span>data <span class="token operator">=</span> temp<span class="token punctuation">;</span>
			root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">Delete</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> root<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10);function N(_,M){const t=o("ExternalLinkIcon");return p(),l("div",null,[u,m,d,k,h,g,v,b,s("p",null,[s("a",y,[n("Binary search"),c(t)])]),f,w,x,L])}const O=e(r,[["render",N],["__file","tree.html.vue"]]),I=JSON.parse('{"path":"/study/DataStructure/tree.html","title":"ðŸŒ³ Trees","lang":"zh-CN","frontmatter":{"date":"2024-06-22T00:00:00.000Z","tag":"data_structure","description":"ðŸŒ³ Trees Definition: A tree is a set consisting of several finite nodes with hierarchical relationships. Features: root, children, parent, sibling, leaves, (ancestor, descendent...","head":[["meta",{"property":"og:url","content":"https://dream-oyh.github.io/study/DataStructure/tree.html"}],["meta",{"property":"og:site_name","content":"Dream_oyh çš„ blog"}],["meta",{"property":"og:title","content":"ðŸŒ³ Trees"}],["meta",{"property":"og:description","content":"ðŸŒ³ Trees Definition: A tree is a set consisting of several finite nodes with hierarchical relationships. Features: root, children, parent, sibling, leaves, (ancestor, descendent..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://dream-oyh.github.io/images/data_structure/tree/Untitled.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-22T14:59:49.000Z"}],["meta",{"property":"article:author","content":"OYH"}],["meta",{"property":"article:tag","content":"data_structure"}],["meta",{"property":"article:published_time","content":"2024-06-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-22T14:59:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ðŸŒ³ Trees\\",\\"image\\":[\\"https://dream-oyh.github.io/images/data_structure/tree/Untitled.png\\"],\\"datePublished\\":\\"2024-06-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-22T14:59:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OYH\\",\\"email\\":\\"19859860010@163.com\\"}]}"]]},"headers":[{"level":2,"title":"Binary tree","slug":"binary-tree","link":"#binary-tree","children":[]},{"level":2,"title":"Time complexity difference between several structures with binary search","slug":"time-complexity-difference-between-several-structures-with-binary-search","link":"#time-complexity-difference-between-several-structures-with-binary-search","children":[]},{"level":2,"title":"Implementation in C/C++","slug":"implementation-in-c-c","link":"#implementation-in-c-c","children":[]},{"level":2,"title":"Binary Tree Traversal","slug":"binary-tree-traversal","link":"#binary-tree-traversal","children":[]},{"level":2,"title":"Is it the binary search tree?","slug":"is-it-the-binary-search-tree","link":"#is-it-the-binary-search-tree","children":[]},{"level":2,"title":"How to delete a element in a binary search tree?","slug":"how-to-delete-a-element-in-a-binary-search-tree","link":"#how-to-delete-a-element-in-a-binary-search-tree","children":[]}],"git":{"createdTime":1719718516000,"updatedTime":1721660389000,"contributors":[{"name":"dream-oyh","email":"1399541701@qq.com","commits":2}]},"readingTime":{"minutes":4.33,"words":1299},"filePathRelative":"study/DataStructure/tree.md","localizedDate":"2024å¹´6æœˆ22æ—¥","excerpt":"\\n<p><strong>Definition:</strong> A tree is a set consisting of several finite nodes with hierarchical relationships.</p>\\n<p><strong>Features:</strong> root, children, parent, sibling, leaves, (ancestor, descendent, cousin)</p>\\n<ul>\\n<li>Tree can be seen recursive data structure.</li>\\n<li>Tree has N Nodes, and N-1 edges.</li>\\n<li><strong>Depth of x</strong> is defined as the number of edges in path from root to that node.</li>\\n<li><strong>Hight of x</strong> is defined as the number of edges in the longest path from the node to a leaf node.</li>\\n</ul>","autoDesc":true}');export{O as comp,I as data};
