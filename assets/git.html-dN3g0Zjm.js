import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as r,c as g,d as e,b as a,a as n,w as s,e as c}from"./app-NjPjOQVL.js";const h={},m=e("h1",{id:"git",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#git"},[e("span",null,"Git")])],-1),u=e("h2",{id:"学习材料",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#学习材料"},[e("span",null,"学习材料")])],-1),b={href:"https://learngitbranching.js.org/?locale=zh_CN",target:"_blank",rel:"noopener noreferrer"},v={href:"https://absx.pages.dev/coding/Git.html",target:"_blank",rel:"noopener noreferrer"},k=e("h2",{id:"安装与配置",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装与配置"},[e("span",null,"安装与配置")])],-1),f=e("h3",{id:"git-的安装",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#git-的安装"},[e("span",null,"Git 的安装")])],-1),_=e("ul",null,[e("li",null,"方法一：")],-1),C={href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"},H=c(`<p>安装好之后会在鼠标右键菜单中发现“Git Bash Here”和“Git GUI Here”两个新的选项，这就是 Git 最常用的操作模式，在一个文件夹中右键，“Git Bash Here”对该文件夹内容进行 Git 相关操作。</p><ul><li>方法二：</li></ul><p>采用 windows 包管理器，<code>scoop install git</code>一步到位。</p><h3 id="初始化配置" tabindex="-1"><a class="header-anchor" href="#初始化配置"><span>初始化配置</span></a></h3><p>第一次使用 git 需要对用户名和邮箱进行配置，配置代码如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;YourName&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;your-email@example.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，以上两行代码一句一句分开输入，在“Git Bash Here”或者终端管理员中输入均可，双引号内的内容需要自己根据实际情况填写，这两个命令只需要执行一次，如果之前执行过的话可以跳过。</p><blockquote><p>注：如果使用 VSCode 作为代码编辑器，推荐搭配<code>Git Graph</code>插件一起使用</p></blockquote><h4 id="ssh-配置" tabindex="-1"><a class="header-anchor" href="#ssh-配置"><span>SSH 配置</span></a></h4><p>若要使用 SSH 链接<a href="#%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">连接到远程仓库</a>，需要对 SSH 进行配置</p><ol><li>生成密钥对</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-C</span> <span class="token string">&quot;YourEmail@example.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 git bash 输入以上命令，会要求输入密钥对保存路径，以及密钥对密码，密码为空即可。可以一路回车，但是要注意密钥对的保存路径，生成完毕后要到该路径下读取密钥对文件，选择“id_rsa.pub”文件并打开，里面“看起来像乱码的东西”就是 SSH 公钥。</p><ol start="2"><li>进入 Github 配置 SSH 公钥</li></ol><p>在 Github 右上角头像处选择 Settings，进入设置页面后选择 SSH and GPG keys，点击 New SSH key 按钮，在 Title 处填写一个名字，在 Key 处填写密钥对文件中的公钥内容，最后点击 Add SSH key 按钮即可。</p><ol start="3"><li>测试 SSH 连接</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com   <span class="token comment"># 输入该命令验证是否成功</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="仓库" tabindex="-1"><a class="header-anchor" href="#仓库"><span>仓库</span></a></h2><h3 id="新建仓库" tabindex="-1"><a class="header-anchor" href="#新建仓库"><span>新建仓库</span></a></h3><ul><li>方法一：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在需要构建仓库的文件夹下“Git Bash”（后同），通过该命令可以新建一个自己的本地仓库</p><ul><li>方法二：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone <span class="token operator">&lt;</span>ssh path<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过该命令可以克隆 github 上的开源代码，克隆别人的仓库到本地。</p><h2 id="git-跟踪文件的三个区域" tabindex="-1"><a class="header-anchor" href="#git-跟踪文件的三个区域"><span>Git 跟踪文件的三个区域</span></a></h2><ul><li>工作区</li><li>暂存区</li><li>本地仓库 工作区 ---<code>git add</code>---&gt; 暂存区 ---<code>git commit -m &#39;注释&#39;</code>---&gt; 本地仓库 ---<code>git push origin main</code>--&gt; 远程仓库</li></ul><p>工作区，即为本地文档未上传时所处区域，在本地文件夹内新建文件，该文件就直接处于工作区。之后通过 <code>add</code>命令，可以将文件从工作区转移至暂存区，此时再<code>commit</code>，便可以将文件上传至本地仓库。</p><p>暂存区存在的原因在于，在提交文件至本地仓库时，可以每一次先将文件上传至暂存区，之后再一次性提交至本地仓库，这样可以避免每次提交都上传一次文件，提高效率。</p><h2 id="畅游提交树" tabindex="-1"><a class="header-anchor" href="#畅游提交树"><span>畅游提交树</span></a></h2><h3 id="基础命令" tabindex="-1"><a class="header-anchor" href="#基础命令"><span>基础命令</span></a></h3><ul><li><code>git commit</code> git commit 将暂存区文件提交至本地仓库，并且每一次的提交可以看做是一次文件的快照，正是一个个提交组成了一个文档开发过程中的提交树，git 提供了多种方式让开发者可以在提交树中畅游，commit 也是 git 最基本的命令。</li></ul><p>commit 命令会在提交树上新建一个新节点，例如原节点为<code>C0</code>，提交后产生新节点<code>C1</code>，则二者的关系为 <code>C0</code>&lt;-<code>C1</code>，表示<code>C1</code>是从<code>C0</code>提交过来的，<code>C0</code>为<code>C1</code>的父（parent）节点。注意箭头方向，箭头方向为提交树创建的反方向，并不代表文件的更新方向。</p><ul><li><code>git branch</code> git 中的分支，让开发效率大幅提升，开发团队可以在分支上修正 bug，或开发新特征，但是不影响主线项目的正常运作，“早建分支！多用分支！”，使用分支其实是在说：“我想基于这个提交以及它所有的 parent 提交进行新的工作。”</li></ul><p><code>git branch &lt;branch name&gt;</code> 创建新分支并命名。注意：<code>main</code>是一个特殊的分支，git 把<code>main</code>分支看做是提交树的主干，故新分支的名称不能是<code>main</code>。仍需要注意的是，假设现提交树为<code>C0</code>&lt;-<code>C1</code>，如果我们处于<code>main</code>分支上，则<code>main</code>分支指向最新的提交，表示为：<code>C0</code>&lt;-<code>C1</code>&lt;-main*（*号表示所处分支），若现在通过<code>git branch newImage</code>创建了新分支，此时新分支会指向最新提交，但是我们仍然处于<code>main</code>分支上。</p><p>即提交树变为：<code>C0</code>&lt;-<code>C1</code>&lt;-(main* newImage)</p><p>若要切换到新分支，可以<code>git checkout &lt;branch name&gt;</code>，此时提交树变为：<code>C0</code>&lt;-<code>C1</code>&lt;-(main newImage*)，<strong>值得注意的是</strong>，<code>git checkout</code>本质是在改变<code>HEAD</code>的指向。若<code>git checkout &lt;commit name&gt;</code>指向了某个提交而不是分支，此时会进入<code>detached HEAD</code>状态。</p><p>简单地，<code>git branch -b &lt;branch name&gt;</code>可以创建分支并且把当前分支切换为新分支。有关分支的配置可以参考以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-a</span>                    <span class="token comment"># 查看分支</span>
<span class="token function">git</span> branch <span class="token operator">&lt;</span>new_branch_name<span class="token operator">&gt;</span>     <span class="token comment"># 新建分支</span>
<span class="token function">git</span> branch <span class="token operator">&lt;</span>new_branch_name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>commit<span class="token operator">&gt;</span> <span class="token comment"># 在指定节点处新建分支</span>
<span class="token function">git</span> switch <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span>         <span class="token comment"># 切换到分支</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span>    <span class="token comment"># 新建并切换到分支，trick</span>
<span class="token function">git</span> branch <span class="token parameter variable">-m</span> <span class="token operator">&lt;</span>old_name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>new_name<span class="token operator">&gt;</span> <span class="token comment"># 重命名分支</span>
<span class="token function">git</span> branch <span class="token parameter variable">--delete</span> <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span>   <span class="token comment"># 删除分支</span>
<span class="token function">git</span> push origin <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span> <span class="token comment"># 删除远程分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>git merge</code> 在分支开发完毕之后，需要将分支与 <code>main</code> 分支合并，此时需要用到<code>git merge</code>命令，这个命令产生的 commit 快照会有两个父节点，一个来自于 <code>main</code> 分支，一个来自于新建的分支。</li></ul><p><code>git merge &lt;branch name&gt;</code>注意这里的<code>&lt;branch name&gt;</code>是需要合并的分支，如：在 <code>main</code> 分支上执行<code>git merge newImage</code>，则代表将 newImage 分支合并至 <code>main</code> 上，此时会新建一个快照，这个快照有两个父节点，并且该快照为提交树中最新的快照，包含了代码库的所有修改。</p><ul><li><code>git rebase</code><code>rebase</code>是取出一系列的提交记录，“复制”它们，并在另外一个地方逐个地放下去，其优势在于可以创造更线性的提交历史。</li></ul><p>如在<code>newImage</code>分支上执行<code>git rebase main</code>，则代表将 <code>newImage</code> 分支上的提交记录复制到 <code>main</code> 分支上，并且在 <code>main</code> 分支上逐个地放下去。<strong>值得注意的是</strong>，这个过程中，原<code>newImage</code>分支上的提交快照不会消失，而是没有分支节点指向它们。在<code>rebase</code>之后，<code>newImage</code>分支会在<code>main</code>后创建有一定顺序的快照副本，<code>newImage</code>指向最新的快照副本，接下来需要更新<code>main</code>：在<code>git checkout main</code>切换到<code>main</code>分支后，<code>git rebase newImage</code>即可将<code>main</code>也移动至<code>newImage</code>指向的快照副本。</p><p><code>git rebase -i</code>提供了 UI 界面（Git 会进入 vim 编辑器），可以对提交记录进行重新排序/删除等操作。</p><p><code>git rebase &lt;branch1&gt; &lt;branch2&gt;</code>，通过后面的两个分支，可以将<code>&lt;branch2&gt;</code>分支移动至<code>&lt;branch1&gt;</code>分支下。</p><h3 id="进阶命令" tabindex="-1"><a class="header-anchor" href="#进阶命令"><span>进阶命令</span></a></h3><ul><li><code>HEAD</code><code>HEAD</code>是一个对当前所在分支的符号引用——也就是指向你正在其基础上进行工作的提交记录。<code>HEAD</code>也总是指向当前分支上最近一次提交记录，<code>HEAD</code>通常情况下是指向分支名的。</li></ul><p>一般来说，一个提交快照的结构应该是这样的：<code>C1</code>&lt;-<code>branch</code>&lt;-<code>HEAD</code>，即：分支直接指向提交，而 HEAD 指向分支。但如果 HEAD 指向了提交本身，如：<code>git checkout C1</code>，此时我们称此类现象为<code>detached HEAD</code></p><ul><li><p>利用<code>HEAD</code>进行相对引用 使用<code>^</code>向上移动 1 个提交记录，使用<code>~&lt;n&gt;</code>向上移动 n 个提交记录。如<code>main^</code>，即为<code>main</code>分支最新一次提交的上一次提交。</p></li><li><p>分支的强制提交 <code>git branch -f main HEAD~3</code>，可以将<code>main</code>分支强制移动至<code>HEAD</code>前三级的父节点上，同时不改变<code>HEAD</code>本身的指向。</p></li><li><p>撤销变更 <code>git reset &lt;point_to&gt;</code> 把分支记录回退几个提交记录来实现撤销改动。但是这对于远程分支（remote branch）无效</p></li></ul><p><code>git revert &lt;point_to&gt;</code> 撤销更改并分享给别人，需要采用该命令。例：设已有提交树<code>C0</code>&lt;-<code>C1</code>&lt;-<code>C2</code>&lt;-main*，执行<code>git revert HEAD</code>后，得到提交树<code>C0</code>&lt;-<code>C1</code>&lt;-<code>C2</code>&lt;-<code>C3</code>&lt;-main*，其中<code>C3</code>为撤销<code>C2</code>的提交记录，即<code>C3</code>与<code>C1</code>的提交记录相同，现将<code>C3</code>上传至远程分支即可同步“撤销”的过程。</p><ul><li>移动提交记录 <code>git cherry-pick &lt;commit&gt;</code>使用该命令后，可以将<code>&lt;commit&gt;</code>复制至当前<code>HEAD</code>所处分支之后，并且 HEAD 与所处分支移至最新节点，其中<code>&lt;commit&gt;</code>可以选择多个节点，用空格隔开。</li></ul><h3 id="远程仓库" tabindex="-1"><a class="header-anchor" href="#远程仓库"><span>远程仓库</span></a></h3><p>处于协同开发与开源的需要，将代码上传至 github 等托管平台能够使代码社交化，也会得到一份牢靠的代码备份。我们把部署在 github 上的仓库称为远程仓库。</p>`,53),x=e("li",null,[e("code",null,"git clone <ssh path>"),a("可以从 github 上克隆一个仓库，并将该远程仓库与克隆后的本地仓库建立连接。")],-1),G=c(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:<span class="token operator">&lt;</span>yourgithubID<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>Repo<span class="token operator">&gt;</span>.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>@ tab HTTPS</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/yourgithubID/gitRepo.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>:::</p><blockquote><p>优先使用 SSH 链接，但需要<a href="#ssh-%E9%85%8D%E7%BD%AE">配置</a></p><p>其中<code>&lt;yourgithubID&gt;</code>为你的 github 用户名，<code>&lt;Repo&gt;</code>为你的仓库名</p><p><code>origin</code>为远程仓库别名，一般习惯设置为<code>origin</code></p></blockquote><ul><li><p>远程分支 在 clone 新的仓库之后，本地仓库会多出一个<code>&lt;remote repo name&gt;/main</code>分支，这种类型的分支即为远程分支，当切换到远程分支时，HEAD 会自动进入<code>HEAD detached</code>状态，git 这么做是因为不能直接在这些分支上进行操作，而必须在别的地方完成工作后再远程分享成果。</p></li><li><p><code>git fetch</code> git 远程仓库相当的操作实际上归纳为两点：向远程仓库传输数据以及从远程仓库获取数据。<code>git fetch</code>能够从远程仓库获取数据</p></li></ul><p>例现有本地仓库和远程仓库为：</p><p>本地仓库：<code>C0</code>&lt;-<code>C1</code>&lt;-(main* origin/main)</p><p>远程仓库： <code>C0</code>&lt;-<code>C1</code>&lt;-<code>C2</code>&lt;-<code>C3</code>&lt;-(main)</p><p>在<code>git fetch</code>后，</p><p>本地仓库：<code>C0</code>&lt;-<code>C1</code>(&lt;-main*)&lt;-<code>C2</code>&lt;-<code>C3</code>(&lt;-origin/main)</p><p>可以看出本地仓库只更新了<code>origin/main</code>分支，而并没有移动<code>main</code>和<code>HEAD</code>的位置。</p><ul><li><p><code>git pull</code><code>git fetch</code>只实现了远程仓库的下载，但是并没有更新本地仓库，需要再次通过<code>merge</code>命令将远程分支和本地分支合并。但是<code>git pull</code>提供了更为方便的选项，可以直接将远程仓库下载下来，并且将远程分支和本地分支合并。</p></li><li><p><code>git push</code><code>git push</code>能够将本地仓库的更改上传至远程仓库，将远程仓库的分支状态与本地仓库的本地分支同步，同时将本地仓库的远程分支与本地分支合并。</p></li></ul><p>一般来说，要为<code>push</code>添加指定参数，语法是<code>git push &lt;remote&gt; &lt;place&gt;</code>，一般而言，该命令设置为<code>git push origin main</code>，把这个命令翻译过来就是，切到本地仓库中的“main”分支，获取所有的提交，再到远程仓库“origin”中找到“main”分支，将远程仓库中没有的提交记录都添加上去。此处，<code>push</code> 的来源于目的地是一致的，仅需一个<code>main</code>参数即可，但是若不一致，则需要设置成<code>&lt;source&gt;:&lt;destination&gt;</code>，即语法为：<code>git push &lt;remote&gt; &lt;source&gt;:&lt;destination&gt;</code>。</p><p>类似的，<code>fetch</code>和<code>pull</code>也支持指定参数，只不过由于数据传输的方向和<code>push</code>相反，其<code>&lt;source&gt;</code>和<code>&lt;destination&gt;</code>的设置也应该和<code>push</code>中相反。</p><ul><li>协同开发存在的问题 但是实际情况并不是这么简单的，实际情况可能是，本地仓库与远程仓库内容不统一，因为协同开发时两边均在做修改，此时远程仓库和本地仓库的分支存在 conflict，<code>git push</code>无法执行。有三种方法可以解决这个问题：</li></ul><p>方法一：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch
<span class="token function">git</span> merge o/main
<span class="token function">git</span> push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法二：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch
<span class="token function">git</span> rebase o/main
<span class="token function">git</span> push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这样命令数太多了，之前说过<code>git pull</code>是<code>fetch</code>和<code>merge</code>的组合，因此法一可以变为：</p><p>方法一：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> pull
<span class="token function">git</span> push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>git pull</code>写作<code>git pull --rebase</code>时，可以实现法二，即：</p><p>方法二：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> pull <span class="token parameter variable">--rebase</span>
<span class="token function">git</span> push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>相较于 <code>merge</code>，项目管理更喜欢用 --rebase 版本，因为<code>rebase</code>带来了更为线性的提交树，提交树结构清晰。</p><p>方法三：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> stash   <span class="token comment"># 暂存代码</span>
<span class="token function">git</span> pull origin main    <span class="token comment"># 拉取上游</span>
<span class="token function">git</span> stash pop   <span class="token comment"># 释放代码，进行合并</span>
<span class="token function">git</span> stash drop  <span class="token comment"># 解决冲突后，请释放未被 pop 出的 stash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>git stash</code>可以帮助暂时保存当前代码，再 pull 远程仓库的代码进行合并。</p><ul><li>Pull request 对于大团队开发协作而言，<code>main</code>分支往往被锁定了，此时若强行 push，会报错如下：</li></ul><p><code>! [远程服务器拒绝] main -&gt; main (TF402455: 不允许推送(push)这个分支; 你必须使用pull request来更新这个分支.)</code></p><div class="hint-container tip"><p class="hint-container-title">解决方法</p><p>新建一个分支 <code>feature</code></p><p>push 到远程服务器，然后 reset 你的 main 分支和远程服务器保持一致，否则下次你 pull 的时候会报错</p></div>`,33);function E(S,y){const t=o("ExternalLinkIcon"),i=o("CodeTabs");return r(),g("div",null,[m,u,e("p",null,[e("a",b,[a("畅游提交树学习网站"),n(t)])]),e("p",null,[e("a",v,[a("绝对值_x 个人博客"),n(t)])]),k,f,_,e("p",null,[e("a",C,[a("官网"),n(t)]),a("进入下载即可（笔者采用该方法安装的 git）")]),H,e("ul",null,[x,e("li",null,[a("链接远程仓库"),n(i,{id:"263",data:[{id:"SSH"}]},{title0:s(({value:d,isActive:l})=>[a("SSH")]),tab0:s(({value:d,isActive:l})=>[]),_:1})])]),G])}const w=p(h,[["render",E],["__file","git.html.vue"]]),I=JSON.parse('{"path":"/code/git.html","title":"Git","lang":"zh-CN","frontmatter":{"date":"2024-02-08T00:00:00.000Z","icon":"git","category":"工具","tag":"教程","description":"Git 学习材料 畅游提交树学习网站 绝对值_x 个人博客 安装与配置 Git 的安装 方法一： 官网进入下载即可（笔者采用该方法安装的 git） 安装好之后会在鼠标右键菜单中发现“Git Bash Here”和“Git GUI Here”两个新的选项，这就是 Git 最常用的操作模式，在一个文件夹中右键，“Git Bash Here”对该文件夹内容进...","head":[["meta",{"property":"og:url","content":"https://dream-oyh.github.io/code/git.html"}],["meta",{"property":"og:site_name","content":"Dream_oyh 的 blog"}],["meta",{"property":"og:title","content":"Git"}],["meta",{"property":"og:description","content":"Git 学习材料 畅游提交树学习网站 绝对值_x 个人博客 安装与配置 Git 的安装 方法一： 官网进入下载即可（笔者采用该方法安装的 git） 安装好之后会在鼠标右键菜单中发现“Git Bash Here”和“Git GUI Here”两个新的选项，这就是 Git 最常用的操作模式，在一个文件夹中右键，“Git Bash Here”对该文件夹内容进..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T14:32:00.000Z"}],["meta",{"property":"article:author","content":"OYH"}],["meta",{"property":"article:tag","content":"教程"}],["meta",{"property":"article:published_time","content":"2024-02-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T14:32:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-17T14:32:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OYH\\",\\"email\\":\\"19859860010@163.com\\"}]}"]]},"headers":[{"level":2,"title":"学习材料","slug":"学习材料","link":"#学习材料","children":[]},{"level":2,"title":"安装与配置","slug":"安装与配置","link":"#安装与配置","children":[{"level":3,"title":"Git 的安装","slug":"git-的安装","link":"#git-的安装","children":[]},{"level":3,"title":"初始化配置","slug":"初始化配置","link":"#初始化配置","children":[]}]},{"level":2,"title":"仓库","slug":"仓库","link":"#仓库","children":[{"level":3,"title":"新建仓库","slug":"新建仓库","link":"#新建仓库","children":[]}]},{"level":2,"title":"Git 跟踪文件的三个区域","slug":"git-跟踪文件的三个区域","link":"#git-跟踪文件的三个区域","children":[]},{"level":2,"title":"畅游提交树","slug":"畅游提交树","link":"#畅游提交树","children":[{"level":3,"title":"基础命令","slug":"基础命令","link":"#基础命令","children":[]},{"level":3,"title":"进阶命令","slug":"进阶命令","link":"#进阶命令","children":[]},{"level":3,"title":"远程仓库","slug":"远程仓库","link":"#远程仓库","children":[]}]}],"git":{"createdTime":1707929375000,"updatedTime":1708180320000,"contributors":[{"name":"dream同学0","email":"1399541701@qq.com","commits":3},{"name":"dream_linux","email":"1399541701@qq.com","commits":1}]},"readingTime":{"minutes":11.36,"words":3407},"filePathRelative":"code/git.md","localizedDate":"2024年2月8日","excerpt":"\\n<h2>学习材料</h2>\\n<p><a href=\\"https://learngitbranching.js.org/?locale=zh_CN\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">畅游提交树学习网站</a></p>\\n<p><a href=\\"https://absx.pages.dev/coding/Git.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">绝对值_x 个人博客</a></p>\\n<h2>安装与配置</h2>\\n<h3>Git 的安装</h3>\\n<ul>\\n<li>方法一：</li>\\n</ul>","autoDesc":true}');export{w as comp,I as data};
