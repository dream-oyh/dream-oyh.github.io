import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as e,e as t}from"./app-BFbyQp8K.js";const a={},n=t(`<h1 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket"><span>Websocket</span></a></h1><p>突然想学这个包是因为我院测试技术与信号处理课程作业，老师给出的题目是：“调用手机中的传感器，显示参数的动态变化”，经过一番搜索我发现了 python 中<code>websocket</code>这个包，可以实现实时的手机传感器数据传输。</p><h2 id="sensor-server" tabindex="-1"><a class="header-anchor" href="#sensor-server"><span>Sensor Server</span></a></h2><p><a href="https://github.com/umer0586/SensorServer" target="_blank" rel="noopener noreferrer">Sensor Server 的 Github 仓库链接</a></p><p>Github 提供了一个开源的 Android apk，名为：“Sensor Server”，可以用来提供移动端传感器接口，利用<code>ws</code>互联网协议传输数据。移动端启动后，会提供一个 url，我们需要保证 PC 和移动端均连接到该 url 上。</p><p><code>websocket</code>和<code>HTTPS</code>提供了类似的套接字定义，以下服务器 url，即是<code>Sensor Server</code>提供的服务器地址。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ws://&lt;ip&gt;:&lt;port&gt;/sensor/connect?type=&lt;type dir&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>链接中的参数<code>type</code>即表示传感器接口，<code>Sensor Server</code>中提供了一系列传感器接口的<code>type</code>，如对于<code>accelerometer-bma422</code>传感器，其<code>type</code>为<code>android.sensor.accelerometer</code>。<a href="https://livepersoninc.github.io/ws-test-page/" target="_blank" rel="noopener noreferrer">该网址</a>提供了一个 web 端接口，用来测试传感器数据传输是否正常，打开网页后在<code>url</code>栏中输入上述<code>ws</code>地址，点击<code>connect</code>后，即可连接至移动端，并且实时读取传感器数据。</p><p>PC 端与服务器建立的链接为长链接，会不断从服务器读取传感器的参数值，并且返回一个<code>json</code>文件，其中的<code>values</code>便是传感器的测量值，各个传感器端口的<code>values</code>含义，可以在<a href="https://developer.android.com/develop/sensors-and-location/sensors/sensors_motion?hl=zh-cn" target="_blank" rel="noopener noreferrer">该链接</a>中查找。</p><details class="hint-container details"><summary>报错解决：an inscure WebSocket connection may not be initiated from a page loaded over HTTPS</summary><p>我在 edge 浏览器打开测试网页后，输入正确的 <code>url</code> 后，连接不成功，但是我在移动端的火狐浏览器上是可以成功连接的，此时 PC 端报错为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Failed to construct &#39;WebSocket&#39;: An insecure WebSocket connection may not be initiated from a page loaded over HTTPS</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我去 Google 直接查了报错，查到了<a href="https://stackoverflow.com/questions/28625351/uncaught-securityerror-failed-to-construct-websocket-an-insecure-websocket-c" target="_blank" rel="noopener noreferrer">这篇文章</a>，然后我跟着这篇文章将<code>url</code>地址改为<code>wss://</code>后，edge 一直显示<code>connecting</code>，但是始终连接不上移动端，结合这篇文章的思路，我怀疑是浏览器拦截了传输，于是在 Chrome 中打开测试网站，将原来的<code>url</code>填入，关闭网络代理后，PC 端与移动端连接成功。</p><p>后续：</p><p>第二天测试后，即使是在 Chrome 打开测试网站，依然无法 connect。</p><p><s>省流：edge 不如 Chrome。</s></p></details><h2 id="websocket-1" tabindex="-1"><a class="header-anchor" href="#websocket-1"><span>websocket</span></a></h2><p><a href="https://websocket-client.readthedocs.io/en/latest/" target="_blank" rel="noopener noreferrer">Documents</a></p><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h3><p><a href="https://github.com/websocket-client/websocket-client" target="_blank" rel="noopener noreferrer">websocket-client</a> 为 python 的第三方库，需要安装，用 poetry 做包管理器：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">poetry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> websocket-client</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>要使用 websocket-client，仅需要在 python 中<code>import websocket</code>即可。websocket 本质上是一个提供 PC 端与服务器连接的包，提供了两种连接方式，长连接和短连接，两种连接方式的差别可以见<a href="https://cloud.tencent.com/developer/article/1640430" target="_blank" rel="noopener noreferrer">这篇文档</a>。</p><ul><li>长连接：<code>websocket.WebSocketApp()</code>对象</li><li>短连接：<code>websocket.WebSocket()</code>对象</li></ul><p>两种对象的参数和使用方法不太相同 <s>（设成相同的使用方式不好吗！）</s> ，具体可见<a href="https://websocket-client.readthedocs.io/en/latest/examples.html" target="_blank" rel="noopener noreferrer">文档</a>（文档写的很详细啦！不想写教程啦！）</p><h2 id="socket" tabindex="-1"><a class="header-anchor" href="#socket"><span>Socket</span></a></h2><p>在本次机器人视觉比赛过程中，用到了 TCP 通信协议给另外一台位于相同网段下的电脑传输数据，并且有一定的要求，说明如下。</p><p>裁判盒软件接收参赛软件的数据格式</p><table><thead><tr><th style="text-align:center;">内容</th><th style="text-align:center;">字节数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">DataType</td><td style="text-align:center;">4</td><td style="text-align:left;">数据类型，值为 0 表示发送队伍 ID，要求 ID 格式为字母和数字的组合，中间没有空格；值为 1 表示发送 3D 识别结果文件；</td></tr><tr><td style="text-align:center;">DataLength</td><td style="text-align:center;">4</td><td style="text-align:left;">其值为 N，即本次数据包 Data 的字节数</td></tr><tr><td style="text-align:center;">Data</td><td style="text-align:center;">4</td><td style="text-align:left;">实际接收数据内容，具体内容类型由 DataType 决定</td></tr></tbody></table><blockquote><p>采用大端的方式传输数据，例：直接将 int32 类型的 DataType、DataLength 复制到发送缓冲区的前 8 个字节，再将 Data 复制到发送缓冲区，最后发送数据。</p></blockquote><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> socket</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> time</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> send_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> data_type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    data_type_bytes </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> struct.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">pack</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&gt;I&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, data_type)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    data_length_bytes </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> struct.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">pack</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&gt;I&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(data))</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    # 发送数据类型和数据长度</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    s.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">sendall</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(data_type_bytes </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> data_length_bytes)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    # 发送实际数据</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    s.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">sendall</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(data.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">encode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;utf-8&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 假设数据是字符串</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> socket.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(socket.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">AF_INET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, socket.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">SOCK_STREAM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">s.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">connet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;ip-address&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">port</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">send_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;team-id&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">time.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">send_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;START</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Goal_ID=CA001;Num=1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>socket</code>是 python 自带的库，不需要安装环境，可以直接调用。</p><p>函数主体中，通过<code>socket.socket(socket.AF_INET, socket.SOCK_STREAM)</code>创建通信协议的客户端，通过<code>connect()</code>函数连接服务端。</p><p>前面这些都没啥问题，把我们卡住的是发送数据，一开始我们完全没看懂裁判盒给出的缓冲区啥的都是啥意思 <s>（虽然现在也不懂）</s>，直到问了 GPT 才知道该怎么写。其中最核心的应该是<code>struct.pack</code>的打包机制。</p><blockquote><p>有关“大端”数据发送，可以见<a href="https://www.techtarget.com/searchnetworking/definition/big-endian-and-little-endian" target="_blank" rel="noopener noreferrer">这篇文档</a>，区别于“小端”数据发送，“大端”数据时更符合我们读写数据的自然逻辑的。</p></blockquote><p><a href="https://docs.python.org/3/library/struct.html" target="_blank" rel="noopener noreferrer">struct 官方文档</a>——用来将字节打包成二进制数据。其中<code>&gt;I</code>是对字节的格式化设置，<code>&gt;</code>表示数据以大端的对齐方式发送，<code>I</code>表示数据以<code>Undesigned int</code>的格式发送。而<code>.pack(format, v1, v2)</code>函数返回一个包含值 v1、v2、...根据格式字符串格式打包。参数必须与格式所需的值完全匹配。</p><details class="hint-container details"><summary>粘包问题解决</summary><p>在实际应用的时候，我们需要先输送<code>0</code>，来告知队名，再输送<code>1</code>，来输送数据，但是如果把两行语句挨一块写，会导致缓冲区的数据量太大，从而导致粘包问题。</p><p>为此我们加入了<code>time.sleep(1)</code>来解决这个问题，先让前面一批数据传完，再传下一批数据。</p><p>这样确实能解决问题，在传完<code>0</code>之后，<code>1</code>也能够传成功了。但是问题又出现了，由于我们是一行一行传数据的，根据组委会要求，第一行是<code>START</code>，第二行数据是<code>Goal_ID=CA001;Num=0</code>，这样的话第二行数据传不过去，即使加入<code>time.sleep()</code>也只会传成功第一行数据。当时百思不得其解。</p><p>然后我同学提醒了我一句，粘包是针对多个包而言的，那你全打成一个包不就可以了，所以最后变成了：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">with</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;data.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;r&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    data </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">readlins</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">d </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(data)):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  d </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> data[i]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">send_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, d)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体原理是什么我现在也不清楚，但是加停止间隔、打包在一起发送，确实让数据传输变得非常稳定了。 <s>（没改之前也挺稳定的，稳定地每次都输不出去。。。）</s></p></details>`,30),l=[n];function h(r,k){return e(),i("div",null,l)}const o=s(a,[["render",h],["__file","websocket.html.vue"]]),c=JSON.parse('{"path":"/code/python/websocket.html","title":"Websocket","lang":"zh-CN","frontmatter":{"date":"2024-02-27T00:00:00.000Z","icon":"bianzubeifen8","category":"Python 库","tag":"教程","description":"Websocket 突然想学这个包是因为我院测试技术与信号处理课程作业，老师给出的题目是：“调用手机中的传感器，显示参数的动态变化”，经过一番搜索我发现了 python 中websocket这个包，可以实现实时的手机传感器数据传输。 Sensor Server Sensor Server 的 Github 仓库链接 Github 提供了一个开源的 An...","head":[["meta",{"property":"og:url","content":"https://dream-oyh.github.io/code/python/websocket.html"}],["meta",{"property":"og:site_name","content":"Dream_oyh 的 blog"}],["meta",{"property":"og:title","content":"Websocket"}],["meta",{"property":"og:description","content":"Websocket 突然想学这个包是因为我院测试技术与信号处理课程作业，老师给出的题目是：“调用手机中的传感器，显示参数的动态变化”，经过一番搜索我发现了 python 中websocket这个包，可以实现实时的手机传感器数据传输。 Sensor Server Sensor Server 的 Github 仓库链接 Github 提供了一个开源的 An..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-18T12:21:30.000Z"}],["meta",{"property":"article:author","content":"OYH"}],["meta",{"property":"article:tag","content":"教程"}],["meta",{"property":"article:published_time","content":"2024-02-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-18T12:21:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Websocket\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-18T12:21:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OYH\\",\\"email\\":\\"19859860010@163.com\\"}]}"]]},"headers":[{"level":2,"title":"Sensor Server","slug":"sensor-server","link":"#sensor-server","children":[]},{"level":2,"title":"websocket","slug":"websocket-1","link":"#websocket-1","children":[{"level":3,"title":"Usage","slug":"usage","link":"#usage","children":[]}]},{"level":2,"title":"Socket","slug":"socket","link":"#socket","children":[]}],"git":{"createdTime":1709049042000,"updatedTime":1710764490000,"contributors":[{"name":"dream同学0","email":"1399541701@qq.com","commits":3}]},"readingTime":{"minutes":5.75,"words":1725},"filePathRelative":"code/python/websocket.md","localizedDate":"2024年2月27日","excerpt":"\\n<p>突然想学这个包是因为我院测试技术与信号处理课程作业，老师给出的题目是：“调用手机中的传感器，显示参数的动态变化”，经过一番搜索我发现了 python 中<code>websocket</code>这个包，可以实现实时的手机传感器数据传输。</p>\\n<h2>Sensor Server</h2>\\n<p><a href=\\"https://github.com/umer0586/SensorServer\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Sensor Server 的 Github 仓库链接</a></p>\\n<p>Github 提供了一个开源的 Android apk，名为：“Sensor Server”，可以用来提供移动端传感器接口，利用<code>ws</code>互联网协议传输数据。移动端启动后，会提供一个 url，我们需要保证 PC 和移动端均连接到该 url 上。</p>","autoDesc":true}');export{o as comp,c as data};
