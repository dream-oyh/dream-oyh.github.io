import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as d,c as m,d as a,b as n,a as s,w as e,e as l}from"./app-BG9uX3ci.js";const h={},k=a("h1",{id:"c",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#c"},[a("span",null,"C++")])],-1),g=a("p",null,"我采用 Xmake 作为 C++ 项目的构建、包管理工具。",-1),b=l('<p>C++ 的学习需要区分好<em>编译器、工具链和构建系统</em>三者的概念，有关 C++ 的编译流程可以参考下图：</p><figure><img src="https://raw.githubusercontent.com/dream-oyh/dream-oyh.github.io/images/C_compile_chain.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li><em>Preprocessor</em> - 预处理器</li><li><em>Compiler</em> - 编译器</li><li><em>Assemble</em> - 汇编</li><li><em>Linker</em> - 链接器</li></ol>',3),v={href:"https://www.cnblogs.com/w4ngzhen/p/17695080.html",target:"_blank",rel:"noopener noreferrer"},_=a("em",null,"编译",-1),x=l(`<p>微软官方有对 C++ 编译过程给出了更加详细的解释，但是在这套解释里并没有给出汇编的过程：</p><blockquote><p>基本 C++ 编译涉及三个主要步骤：</p><ul><li>C++ 预处理器会转换每个源文件中的所有 #directives 和宏定义。这会创建翻译单元。</li><li>C++ 编译器通过应用已设置的任何编译器选项，将每个翻译单元编译为对象文件 (.obj)。</li><li>链接器通过应用已设置的链接器选项，将对象文件合并为单个可执行文件。</li></ul></blockquote><h2 id="开发环境" tabindex="-1"><a class="header-anchor" href="#开发环境"><span>开发环境</span></a></h2><h3 id="编译器" tabindex="-1"><a class="header-anchor" href="#编译器"><span>编译器</span></a></h3><p>llvm + Clang 分别作为编译器后端和前端，安装可用 scoop。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>scoop <span class="token function">install</span> llvm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="xmake-构建系统" tabindex="-1"><a class="header-anchor" href="#xmake-构建系统"><span>Xmake 构建系统</span></a></h3>`,7),f={href:"https://xmake.io/#/",target:"_blank",rel:"noopener noreferrer"},q=a("p",null,[n("Xmake 是基于 Lua 的 Cpp 构建工具，更准确地来说应该包括三个部分，即："),a("em",null,"Build backend + Project Generator + Package Manager"),n("，简单来说，它实现了 c++ 项目的构建和包管理。")],-1),C=a("h4",{id:"基本操作",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#基本操作"},[a("span",null,"基本操作")])],-1),y=a("p",null,[a("strong",null,[a("em",null,"Install")])],-1),w=a("p",null,"scoop 一行即可搞定",-1),E=a("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[n("scoop "),a("span",{class:"token function"},"install"),n(` xmake
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])],-1),A=a("p",null,"官网还提供了利用终端的安装方法",-1),T=a("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[n("Invoke-Expression "),a("span",{class:"token punctuation"},"("),n("Invoke-Webrequest "),a("span",{class:"token string"},"'https://xmake.io/psget.text'"),n(" -UseBasicParsing"),a("span",{class:"token punctuation"},")"),n(`.Content
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])],-1),X=l(`<p><strong><em>Basic command</em></strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>xmake create <span class="token parameter variable">-l</span> c <span class="token parameter variable">-P</span> ./<span class="token operator">&lt;</span>project-name<span class="token operator">&gt;</span> <span class="token comment"># create project</span>
xmake <span class="token comment"># build project</span>
xmake run <span class="token operator">&lt;</span>project-name<span class="token operator">&gt;</span> <span class="token comment"># run project</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其构建项目的逻辑如下图所示（来自官网）：</p><figure><img src="https://xmake.io/assets/img/index/package_arch.png" alt="" width="300" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="lua" tabindex="-1"><a class="header-anchor" href="#lua"><span>Lua</span></a></h4><p>Lua 是 Xmake 编译程序用到的语言，个人感觉不用特意去学，只需要在平常多用多理解就好。在 Xmake 创建项目之后，会自动生成文件结构如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>hello
├── src
│   └── main.c
└── xmake.lua
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>xmake.lua</code> 文件是 Xmake 的配置文件，简单来说，在我们从<code>.cpp</code>文件生成至<code>.exe</code>文件过程中，他会起作用。Lua 文件由两部分构成，以<code>target()</code>作为分界线，一个最简单最基本的 lua 程序长成这个样子：</p><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token function">target</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
    <span class="token function">set_kind</span><span class="token punctuation">(</span><span class="token string">&quot;binary&quot;</span><span class="token punctuation">)</span>
    <span class="token function">add_files</span><span class="token punctuation">(</span><span class="token string">&quot;src/*.c&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="包管理" tabindex="-1"><a class="header-anchor" href="#包管理"><span>包管理</span></a></h4><p>Xmake 内置 Xrepo 作为包管理器，基本操作如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>xrepo <span class="token function">install</span> zlib tbox <span class="token comment"># basic install</span>
xrepo <span class="token function">install</span> <span class="token string">&quot;zlib 1.2.x&quot;</span> <span class="token comment"># install specific version</span>
xrepo <span class="token function">install</span> <span class="token parameter variable">-m</span> debug zlib <span class="token comment"># install the debug version</span>
xrepo <span class="token function">install</span> brew::zlib <span class="token comment"># Install packages from third-party package manager</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Seamless integration with xmake project</li></ul><p><em>example</em>:</p><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token function">add_requires</span><span class="token punctuation">(</span><span class="token string">&quot;tbox &gt;1.6.1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;libuv master&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;vcpkg::ffmpeg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;brew::pcre2/libpcre2-8&quot;</span><span class="token punctuation">)</span>
<span class="token function">add_requires</span><span class="token punctuation">(</span><span class="token string">&quot;conan::openssl/1.1.1g&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>alias <span class="token operator">=</span> <span class="token string">&quot;openssl&quot;</span><span class="token punctuation">,</span> optional <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> debug <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">target</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>
     <span class="token function">set_kind</span><span class="token punctuation">(</span><span class="token string">&quot;binary&quot;</span><span class="token punctuation">)</span>
     <span class="token function">add_files</span><span class="token punctuation">(</span><span class="token string">&quot;src/*.c&quot;</span><span class="token punctuation">)</span>
     <span class="token function">add_packages</span><span class="token punctuation">(</span><span class="token string">&quot;tbox&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;libuv&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;vcpkg::ffmpeg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;brew::pcre2/libpcre2-8&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;openssl&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15);function z(L,B){const c=i("RouteLink"),p=i("ExternalLinkIcon"),r=i("Tabs");return d(),m("div",null,[k,g,a("p",null,[n("C++ 的开发也秉持 All in VScode 的原则，插件设置可以看"),s(c,{to:"/code/vscode.html#c-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE"},{default:e(()=>[n("这里")]),_:1})]),b,a("p",null,[n("我是看了"),a("a",v,[n(" 这篇文章 "),s(p)]),n("之后才对"),_,n("这件事有所了解的，需要的同学可以看看。")]),x,a("p",null,[a("a",f,[n("官网"),s(p)])]),q,C,y,s(r,{id:"90",data:[{id:"scoop"},{id:"powershell"}]},{title0:e(({value:t,isActive:o})=>[n("scoop")]),title1:e(({value:t,isActive:o})=>[n("powershell")]),tab0:e(({value:t,isActive:o})=>[w,E]),tab1:e(({value:t,isActive:o})=>[A,T]),_:1}),X])}const V=u(h,[["render",z],["__file","cpp.html.vue"]]),D=JSON.parse('{"path":"/code/cpp.html","title":"C++","lang":"zh-CN","frontmatter":{"date":"2024-03-18T00:00:00.000Z","icon":"code","description":"C++ 我采用 Xmake 作为 C++ 项目的构建、包管理工具。 C++ 的开发也秉持 All in VScode 的原则，插件设置可以看 C++ 的学习需要区分好编译器、工具链和构建系统三者的概念，有关 C++ 的编译流程可以参考下图： Preprocessor - 预处理器 Compiler - 编译器 Assemble - 汇编 Linker ...","head":[["meta",{"property":"og:url","content":"https://dream-oyh.github.io/code/cpp.html"}],["meta",{"property":"og:site_name","content":"Dream_oyh 的 blog"}],["meta",{"property":"og:title","content":"C++"}],["meta",{"property":"og:description","content":"C++ 我采用 Xmake 作为 C++ 项目的构建、包管理工具。 C++ 的开发也秉持 All in VScode 的原则，插件设置可以看 C++ 的学习需要区分好编译器、工具链和构建系统三者的概念，有关 C++ 的编译流程可以参考下图： Preprocessor - 预处理器 Compiler - 编译器 Assemble - 汇编 Linker ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dream-oyh/dream-oyh.github.io/images/C_compile_chain.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T01:24:34.000Z"}],["meta",{"property":"article:author","content":"OYH"}],["meta",{"property":"article:published_time","content":"2024-03-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-19T01:24:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++\\",\\"image\\":[\\"https://raw.githubusercontent.com/dream-oyh/dream-oyh.github.io/images/C_compile_chain.png\\",\\"https://xmake.io/assets/img/index/package_arch.png =300x\\"],\\"datePublished\\":\\"2024-03-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-19T01:24:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OYH\\",\\"email\\":\\"19859860010@163.com\\"}]}"]]},"headers":[{"level":2,"title":"开发环境","slug":"开发环境","link":"#开发环境","children":[{"level":3,"title":"编译器","slug":"编译器","link":"#编译器","children":[]},{"level":3,"title":"Xmake 构建系统","slug":"xmake-构建系统","link":"#xmake-构建系统","children":[]}]}],"git":{"createdTime":1710779250000,"updatedTime":1710811474000,"contributors":[{"name":"dream同学0","email":"1399541701@qq.com","commits":3}]},"readingTime":{"minutes":2.36,"words":707},"filePathRelative":"code/cpp.md","localizedDate":"2024年3月18日","excerpt":"\\n<p>我采用 Xmake 作为 C++ 项目的构建、包管理工具。</p>\\n<p>C++ 的开发也秉持 All in VScode 的原则，插件设置可以看<a href=\\"/code/vscode.html#c-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\\" target=\\"_blank\\">这里</a></p>\\n<p>C++ 的学习需要区分好<em>编译器、工具链和构建系统</em>三者的概念，有关 C++ 的编译流程可以参考下图：</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/dream-oyh/dream-oyh.github.io/images/C_compile_chain.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>","autoDesc":true}');export{V as comp,D as data};
