import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as l,d as n,b as s,a as t,e}from"./app-BtT8H-6t.js";const i={},u=n("h1",{id:"神经网络可视化工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#神经网络可视化工具"},[n("span",null,"神经网络可视化工具")])],-1),r=n("p",null,"在我学习 pytorch 文档学到残差神经网络的时候，我发现网络的 python 搭建已经不是一个难事了，难的应该是网络的设计，而 pytorch 学习文档提供了非常多现代卷积神经网络的实现，但是并没有为这些神经网络提供一个可视化的模型出来，这样对于初学者而言，并不能准确 get 到各种网络之间的区别与联系，所以我在想能不能有什么工具是能把这些网络可视化出来的。",-1),d=n("p",null,"第一个念头是数学建模时经常用到的 PPT，用 PPT 来画神经网络可视化，但是一想到要这么多的卷积核，还要保证相对尺寸符合实际，再想到全连接层满满的线条，我果断放弃了 PPT 作图，试着在 b 站上搜一搜有没有针对于神经网络的可视化工具，没想到还真有，而且很多很丰富。所以我单开了这一部分内容，来呈现好用的可视化工具以及其做出的效果。",-1),k=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料"},[n("span",null,"参考资料")])],-1),m={href:"https://www.bilibili.com/video/BV1TV4y1P7AP",target:"_blank",rel:"noopener noreferrer"},v={id:"nn-svg",tabindex:"-1"},h={class:"header-anchor",href:"#nn-svg"},b={href:"https://alexlenail.me/NN-SVG/",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,"该网站提供了全连接层、LeNet 和 AlexNet 类型的网络可视化，类型比较受限，但是入手门槛低，参数调整直观方便，对于这三类模型的画图还是挺不错的。",-1),y={id:"plotneuralnet",tabindex:"-1"},_={class:"header-anchor",href:"#plotneuralnet"},f={href:"https://github.com/HarisIqbal88/PlotNeuralNet",target:"_blank",rel:"noopener noreferrer"},x=e('<div class="hint-container warning"><p class="hint-container-title">评价</p><p>一个很有新意的想法，利用 latex 画图很有意思，效果也很好，但是 python 核心函数写的依托答辩。。。必要时需要更改核心函数来优化体验。</p><p>该程序可以用于科研绘图，但是对于学习过程还是不那么直观，更为直观的可以参考<a href="#netron-%E5%B7%A5%E4%BD%9C%E6%B5%81">netron 工作流</a></p></div><h3 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started"><span>Getting started</span></a></h3>',2),q=n("p",null,"环境要求",-1),w={href:"https://miktex.org/download",target:"_blank",rel:"noopener noreferrer"},N=n("li",null,"installed git",-1),P=n("li",null,[n("p",null,"clone 项目")],-1),z=e(`<blockquote><p>这个可视化工具需要将整个项目 clone 下来才可以使用，他的核心代码是<code>pycore.tikzeng</code>，一般构建网络都在<code>pyexamples</code>这个文件夹中构建。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone git@github.com:HarisIqbal88/PlotNeuralNet.git
<span class="token builtin class-name">cd</span> PlotNeuralNet
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行示例</li></ul><blockquote><p>注意要在<code>PlotNeuralNet</code>中打开文件夹。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> pyexamples/
<span class="token function">bash</span> <span class="token punctuation">..</span>/tikzmake.sh test_simple
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,5),S={class:"hint-container details"},T=n("summary",null,"报错：xdg-open: command not found on Win",-1),L={href:"https://github.com/HarisIqbal88/PlotNeuralNet/issues/98",target:"_blank",rel:"noopener noreferrer"},C=e(`<p>我对<code>tikzmake.sh</code>中的代码进行了修改，修改后如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>python <span class="token variable">$1</span>.py
pdflatex <span class="token variable">$1</span>.tex

<span class="token function">rm</span> *.aux *.log *.vscodeLog
<span class="token function">rm</span> *.tex

<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">&quot;<span class="token environment constant">$OSTYPE</span>&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;darwin&quot;</span>* <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token function">open</span> <span class="token variable">$1</span>.pdf
<span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">&quot;<span class="token environment constant">$OSTYPE</span>&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;linux-gnu&quot;</span>* <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token function">xdg-open</span> <span class="token variable">$1</span>.pdf
<span class="token keyword">else</span>
    start <span class="token variable">$1</span>.pdf
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),M=e(`<h3 id="modify" tabindex="-1"><a class="header-anchor" href="#modify"><span>Modify</span></a></h3><p>本项目从本质上来说是用 latex 写的，所以可以通过 shell 控制 tex 文件，进入<code>/pycore/tikzeng.py</code>文件，修改<code>to_generate()</code>函数。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">to_generate</span><span class="token punctuation">(</span>arch<span class="token punctuation">,</span> pathname<span class="token operator">=</span><span class="token string">&quot;file.tex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>pathname <span class="token operator">+</span> <span class="token string">&quot;.tex&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        <span class="token keyword">for</span> c <span class="token keyword">in</span> arch<span class="token punctuation">:</span>
            <span class="token comment"># print(c)</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
    <span class="token comment"># os.system(&quot;pdflatex &quot; + pathname + &quot;.tex&quot;)</span>
    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">&quot;pyexamples&quot;</span><span class="token punctuation">)</span>
    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">&quot;pdflatex test_simple.tex&quot;</span><span class="token punctuation">)</span>
    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">&quot;..&quot;</span><span class="token punctuation">)</span>
    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>pathname <span class="token operator">+</span> <span class="token string">&quot;.aux&quot;</span><span class="token punctuation">)</span>
    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>pathname <span class="token operator">+</span> <span class="token string">&quot;.log&quot;</span><span class="token punctuation">)</span>
    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>pathname <span class="token operator">+</span> <span class="token string">&quot;.tex&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以不需要调用脚本文件，直接运行 python 程序并渲染出图像。</p><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h3><p>clone 项目后，一般在<code>pyexamples</code>文件夹中构建 python 程序并构建网络，其一般结构为：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> sys
sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">import</span> pycore<span class="token punctuation">.</span>tikzeng <span class="token keyword">as</span> tkz
<span class="token comment"># defined your arch</span>
arch <span class="token operator">=</span> <span class="token punctuation">[</span>
    tkz<span class="token punctuation">.</span>to_head<span class="token punctuation">(</span> <span class="token string">&#39;..&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
    tkz<span class="token punctuation">.</span>to_cor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    tkz<span class="token punctuation">.</span>to_begin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    tkz<span class="token punctuation">.</span>to_input<span class="token punctuation">(</span> pathfile<span class="token punctuation">,</span> to<span class="token operator">=</span><span class="token string">&#39;(-3,0,0)&#39;</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;temp&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment"># optional</span>
    <span class="token comment">#  ====Build your network below===</span>

    <span class="token comment"># =================================</span>
    tkz<span class="token punctuation">.</span>to_end<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    pathname <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    tkz<span class="token punctuation">.</span>to_generate<span class="token punctuation">(</span>arch<span class="token punctuation">,</span> pathname<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>to_head(&quot;..&quot;)</code>用于返回到<code>PlotNeuralNet</code>主目录。如果 python 程序不是在<code>pyexamples</code>文件夹下直接创建的，而是又创了一个子文件夹，那需要返回两次上级目录。</li><li><code>to_cor()</code>用于定义颜色地图</li><li><code>to_begin()</code> 开始构建网络模型</li><li><code>to_end()</code> 结束构建网络模型</li><li><code>to_generate()</code> 产生<code>.tex</code>文件，渲染出最终的 pdf</li><li><code>to_input()</code> 定义输入图片 <ul><li><code>pathfile</code> 输入图片的路径</li><li><code>to</code> 图片显示位置（相对于*-west 进行左偏移 3 个单位）</li><li><code>width</code> 图片宽度</li><li><code>height</code> 图片高度</li><li><code>name</code> 图片名称</li></ul></li></ul><h3 id="module" tabindex="-1"><a class="header-anchor" href="#module"><span>Module</span></a></h3><h4 id="卷积模块" tabindex="-1"><a class="header-anchor" href="#卷积模块"><span>卷积模块</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">to_Conv</span><span class="token punctuation">(</span>
    name<span class="token punctuation">,</span>
    s_filer<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span>
    n_filer<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>
    offset<span class="token operator">=</span><span class="token string">&quot;(0,0,0)&quot;</span><span class="token punctuation">,</span>
    to<span class="token operator">=</span><span class="token string">&quot;(0,0,0)&quot;</span><span class="token punctuation">,</span>
    width<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>
    height<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span>
    depth<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span>
    caption<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>name</code> 卷积层名称</li><li><code>s_filer</code> 该模块显示出（仅数字）的 W 和 H（目前只支持长宽一样的卷积层，所以只需要输入一个 int）</li><li><code>n_filer</code> 该模块显示出（仅数字）的 C（通道数）</li><li><code>offset</code> 卷积层的偏移量 (x,y,z) 按照右手系坐标分别设置偏移量</li><li><code>to</code> 起始位置，默认是 (0,0,0)，也可以设置相对于不同模块的方向 <ul><li><code>&quot;(&lt;模块名称&gt;-east)&quot;</code>最常见，原模块右侧中心点对齐新模块左侧中心点</li><li><code>&quot;(&lt;模块名称&gt;-west)&quot;</code>原模块左侧中心点，对齐新模块左侧中心点</li><li><code>&quot;(&lt;模块名称&gt;-north)&quot;</code> 原模块上方中心点，对齐新模块左侧中心点</li><li><code>&quot;(&lt;模块名称&gt;-south)&quot;</code> 原模块下方中心点，对齐新模块左侧中心点</li><li><code>&quot;(&lt;模块名称&gt;-near)&quot;</code>原模块前侧中心点，对齐新模块左侧中心点</li><li><code>&quot;(&lt;模块名称&gt;-far)&quot;</code>原模块后侧中心点，对齐新模块左侧中心点</li></ul></li><li><code>width</code> 卷积层宽度（模块显示长度）</li><li><code>height</code> 卷积层高度（模块显示长度）</li><li><code>depth</code> 卷积层深度（模块显示长度） <blockquote><p>注意这里的宽度、高度、深度和一般情况下的定义不一样。</p><p>对应关系如下：</p><ul><li>width -&gt; 实际的 depth</li><li>height -&gt; 实际的 height</li><li>depth -&gt; 实际的 width</li></ul></blockquote></li><li><code>caption</code> 卷积层注释</li></ul><h4 id="多个卷积层串联" tabindex="-1"><a class="header-anchor" href="#多个卷积层串联"><span>多个卷积层串联</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">to_ConvConvRelu</span><span class="token punctuation">(</span>
    name<span class="token punctuation">,</span>
    s_filer<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span>
    n_filer<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    offset<span class="token operator">=</span><span class="token string">&quot;(0,0,0)&quot;</span><span class="token punctuation">,</span>
    to<span class="token operator">=</span><span class="token string">&quot;(0,0,0)&quot;</span><span class="token punctuation">,</span>
    width<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    height<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span>
    depth<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span>
    caption<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数提供了两个卷积层的串联，画出来的效果见下图。</p><figure><img src="https://github.com/dream-oyh/dream-oyh.github.io/blob/images/Python_pytorch/convconvrelu.png?raw=false" alt="" height="400" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>注意这里的<code>n_filer</code>和<code>width</code>都用的是<code>tuple</code>结构，用来表示两层卷积层各有多宽。</p></blockquote><h4 id="计算符号" tabindex="-1"><a class="header-anchor" href="#计算符号"><span>计算符号</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">to_Sum</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> offset<span class="token operator">=</span><span class="token string">&quot;(0,0,0)&quot;</span><span class="token punctuation">,</span> to<span class="token operator">=</span><span class="token string">&quot;(0,0,0)&quot;</span><span class="token punctuation">,</span> radius<span class="token operator">=</span><span class="token number">2.5</span><span class="token punctuation">,</span> opacity<span class="token operator">=</span><span class="token number">0.6</span><span class="token punctuation">,</span> logo<span class="token operator">=</span><span class="token string">&quot;$+$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以画出求和符号，其中 <code>radius</code>定义了操作符半径，<code>opacity</code>定义透明度，<code>logo</code>定义符号（需要用 latex 的数学公式写，记得两边带美元符号），如果输入乘法就需要<code>logo=&quot;$\\times $&quot;</code></p><h4 id="连接线" tabindex="-1"><a class="header-anchor" href="#连接线"><span>连接线</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">to_connection</span><span class="token punctuation">(</span>of<span class="token punctuation">,</span> to<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>of</code>输入连接线起始层的<code>name</code>，<code>to</code>输入连接线的终了层的<code>name</code>，能画出一条从起始层右侧中心点到终了层左侧中心点的箭头。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">to_skip</span><span class="token punctuation">(</span>of<span class="token punctuation">,</span>to<span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token number">1.25</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数定义了折线，从<code>of</code>的右上边中心点指向<code>to</code>的上方中心点，<code>pos</code>可以调整偏移量，一般为正数 <s>（你要不试试负数，会很抽象）</s></p><h4 id="其他模块" tabindex="-1"><a class="header-anchor" href="#其他模块"><span>其他模块</span></a></h4><p>以下所描述的模块，与卷积模块的参数几乎一致，只是颜色发生改变，现将各模块的生成函数名罗列如下。</p><ul><li><code>to_Pool()</code> 池化层，多了<code>opacity=0.5</code>修改透明度参数</li><li><code>to_UnPool()</code> 反池化，也有<code>opacity</code>参数</li><li><code>to_ConvRes()</code> 残差层</li><li><code>to_ConvSoftMax()</code> 卷积+Softmax 层</li><li><code>to_SoftMax()</code> Softmax 层</li></ul>`,28),$={id:"netron-工作流",tabindex:"-1"},O={class:"header-anchor",href:"#netron-工作流"},V={href:"https://netron.app/",target:"_blank",rel:"noopener noreferrer"},B=e(`<h3 id="环境配置" tabindex="-1"><a class="header-anchor" href="#环境配置"><span>环境配置</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda <span class="token function">install</span> onnx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我的 pytorch 是在 conda 虚拟环境下安装的，所以采用了 conda 安装指令。</p><h3 id="pytorch-模型转成-onnx-模型" tabindex="-1"><a class="header-anchor" href="#pytorch-模型转成-onnx-模型"><span>pytorch 模型转成 ONNX 模型</span></a></h3><p>运行以上代码，将 pytorch 模型转成 onnx 模型。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    torch<span class="token punctuation">.</span>onnx<span class="token punctuation">.</span>export<span class="token punctuation">(</span>
        net<span class="token punctuation">,</span>  <span class="token comment"># 要转换的模型</span>
        x<span class="token punctuation">,</span>  <span class="token comment"># 模型的输入</span>
        <span class="token string">&quot;LeNet.onnx&quot;</span><span class="token punctuation">,</span>  <span class="token comment"># 导出的.onnx 文件名（注意文件扩展名为.onnx）</span>
        opset_version<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>  <span class="token comment"># ONNX 算子集版本</span>
        input_names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 输入张量的名字</span>
        output_names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;output&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 输出张量的名字</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="导入-netron" tabindex="-1"><a class="header-anchor" href="#导入-netron"><span>导入 Netron</span></a></h3>`,7),E=n("code",null,".onnx",-1),G={href:"https://netron.app/",target:"_blank",rel:"noopener noreferrer"},H=e(`<p>此处以<code>LeNet</code>模型为例，导入 netron 后效果图如下：</p><figure><img src="https://github.com/dream-oyh/dream-oyh.github.io/blob/images/Python_pytorch/LeNet.png?raw=false" alt="" width="100" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>可以在 netron 网页左上角的菜单栏中将网络改成水平的。</p></blockquote><details class="hint-container details"><summary>模型源码</summary><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> sys

<span class="token keyword">import</span> torch
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn

sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">LeNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


net <span class="token operator">=</span> LeNet<span class="token punctuation">(</span><span class="token punctuation">)</span>
x <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
<span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    torch<span class="token punctuation">.</span>onnx<span class="token punctuation">.</span>export<span class="token punctuation">(</span>
        net<span class="token punctuation">,</span>  <span class="token comment"># 要转换的模型</span>
        x<span class="token punctuation">,</span>  <span class="token comment"># 模型的输入</span>
        <span class="token string">&quot;LeNet.onnx&quot;</span><span class="token punctuation">,</span>  <span class="token comment"># 导出的.onnx 文件名（注意文件扩展名为.onnx）</span>
        opset_version<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>  <span class="token comment"># ONNX 算子集版本</span>
        input_names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 输入张量的名字</span>
        output_names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;output&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 输出张量的名字</span>
    <span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,4);function I(A,D){const a=p("ExternalLinkIcon");return c(),l("div",null,[u,r,d,k,n("p",null,[n("a",m,[s("同济子豪兄视频"),t(a)])]),n("h2",v,[n("a",h,[n("span",null,[n("a",b,[s("NN-SVG"),t(a)])])])]),g,n("h2",y,[n("a",_,[n("span",null,[n("a",f,[s("PlotNeuralNet"),t(a)])])])]),x,n("ul",null,[n("li",null,[q,n("ul",null,[n("li",null,[s("installed "),n("a",w,[s("MikTex"),t(a)])]),N])]),P]),z,n("details",S,[T,n("p",null,[s("Github 原仓库中已经有"),n("a",L,[s("issue"),t(a)])]),C]),M,n("h2",$,[n("a",O,[n("span",null,[n("a",V,[s("Netron 工作流"),t(a)])])])]),B,n("p",null,[s("将"),E,s("模型导入"),n("a",G,[s("netron"),t(a)]),s("，即可生成模型框图。")]),H])}const R=o(i,[["render",I],["__file","img.html.vue"]]),U=JSON.parse('{"path":"/code/python/pytorch/img.html","title":"神经网络可视化工具","lang":"zh-CN","frontmatter":{"description":"神经网络可视化工具 在我学习 pytorch 文档学到残差神经网络的时候，我发现网络的 python 搭建已经不是一个难事了，难的应该是网络的设计，而 pytorch 学习文档提供了非常多现代卷积神经网络的实现，但是并没有为这些神经网络提供一个可视化的模型出来，这样对于初学者而言，并不能准确 get 到各种网络之间的区别与联系，所以我在想能不能有什么工...","head":[["meta",{"property":"og:url","content":"https://dream-oyh.github.io/code/python/pytorch/img.html"}],["meta",{"property":"og:site_name","content":"Dream_oyh 的 blog"}],["meta",{"property":"og:title","content":"神经网络可视化工具"}],["meta",{"property":"og:description","content":"神经网络可视化工具 在我学习 pytorch 文档学到残差神经网络的时候，我发现网络的 python 搭建已经不是一个难事了，难的应该是网络的设计，而 pytorch 学习文档提供了非常多现代卷积神经网络的实现，但是并没有为这些神经网络提供一个可视化的模型出来，这样对于初学者而言，并不能准确 get 到各种网络之间的区别与联系，所以我在想能不能有什么工..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github.com/dream-oyh/dream-oyh.github.io/blob/images/Python_pytorch/convconvrelu.png?raw=false =x400"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-04T05:44:21.000Z"}],["meta",{"property":"article:author","content":"OYH"}],["meta",{"property":"article:modified_time","content":"2024-03-04T05:44:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"神经网络可视化工具\\",\\"image\\":[\\"https://github.com/dream-oyh/dream-oyh.github.io/blob/images/Python_pytorch/convconvrelu.png?raw=false =x400\\",\\"https://github.com/dream-oyh/dream-oyh.github.io/blob/images/Python_pytorch/LeNet.png?raw=false =100x\\"],\\"dateModified\\":\\"2024-03-04T05:44:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OYH\\",\\"email\\":\\"19859860010@163.com\\"}]}"]]},"headers":[{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]},{"level":2,"title":"NN-SVG","slug":"nn-svg","link":"#nn-svg","children":[]},{"level":2,"title":"PlotNeuralNet","slug":"plotneuralnet","link":"#plotneuralnet","children":[{"level":3,"title":"Getting started","slug":"getting-started","link":"#getting-started","children":[]},{"level":3,"title":"Modify","slug":"modify","link":"#modify","children":[]},{"level":3,"title":"Usage","slug":"usage","link":"#usage","children":[]},{"level":3,"title":"Module","slug":"module","link":"#module","children":[]}]},{"level":2,"title":"Netron 工作流","slug":"netron-工作流","link":"#netron-工作流","children":[{"level":3,"title":"环境配置","slug":"环境配置","link":"#环境配置","children":[]},{"level":3,"title":"pytorch 模型转成 ONNX 模型","slug":"pytorch-模型转成-onnx-模型","link":"#pytorch-模型转成-onnx-模型","children":[]},{"level":3,"title":"导入 Netron","slug":"导入-netron","link":"#导入-netron","children":[]}]}],"git":{"createdTime":1709037353000,"updatedTime":1709531061000,"contributors":[{"name":"dream同学0","email":"1399541701@qq.com","commits":5}]},"readingTime":{"minutes":6.75,"words":2024},"filePathRelative":"code/python/pytorch/img.md","localizedDate":"2024年2月27日","excerpt":"\\n<p>在我学习 pytorch 文档学到残差神经网络的时候，我发现网络的 python 搭建已经不是一个难事了，难的应该是网络的设计，而 pytorch 学习文档提供了非常多现代卷积神经网络的实现，但是并没有为这些神经网络提供一个可视化的模型出来，这样对于初学者而言，并不能准确 get 到各种网络之间的区别与联系，所以我在想能不能有什么工具是能把这些网络可视化出来的。</p>\\n<p>第一个念头是数学建模时经常用到的 PPT，用 PPT 来画神经网络可视化，但是一想到要这么多的卷积核，还要保证相对尺寸符合实际，再想到全连接层满满的线条，我果断放弃了 PPT 作图，试着在 b 站上搜一搜有没有针对于神经网络的可视化工具，没想到还真有，而且很多很丰富。所以我单开了这一部分内容，来呈现好用的可视化工具以及其做出的效果。</p>","autoDesc":true}');export{R as comp,U as data};
