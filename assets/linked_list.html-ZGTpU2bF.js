import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o,c as i,d as p,b as n,a as l,w as r,e as s}from"./app-ByFM7qA5.js";const c="/images/data_structure/linked_list/Untitled.png",d="/images/data_structure/linked_list/Untitled 1.png",u="/images/data_structure/linked_list/Untitled 2.png",k="/images/data_structure/linked_list/Untitled 3.png",h={},m=s(`<h1 id="üßÆ-linked-list" tabindex="-1"><a class="header-anchor" href="#üßÆ-linked-list"><span>üßÆ Linked List</span></a></h1><h2 id="why-should-we-create-the-linked-list" tabindex="-1"><a class="header-anchor" href="#why-should-we-create-the-linked-list"><span>Why should we create the linked list?</span></a></h2><p>For normal arrays, the data in the memory is stored jointly. But if we need modify some data or extend the arrays, it is hard. Linked list leverages the fixed data sequence, link disjoint data by <strong>Link.</strong> There are two parts in each data block, including data itself, and a pointer, which declared who is the next data block.</p><p>In C, we can define a structure:</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> data<span class="token punctuation">;</span> <span class="token comment">//4 bytes</span>
	Node<span class="token operator">*</span> link<span class="token punctuation">;</span>  <span class="token comment">// 4 bytes</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The logistic view of a linked list can be showed as follow.</p><figure><img src="`+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>The data is stored in the Node, which includes a data and a link to the next Node. The first Node is called ‚ÄúHead Node‚Äù. The address of the Head Node can give us access of the complete linked list. The link of last Node is NULL (invalid address) or zero. Compared to the array, the linked list should visit arbitrary data by going through the whole list, rather than in constant time. We can create or release Node as we want.</p><p><strong>So the time complexity of visiting data is O(n).</strong> But it simplifies the time complexity of modify data, remove data and extend the list.</p><h2 id="array-vs-linked-list" tabindex="-1"><a class="header-anchor" href="#array-vs-linked-list"><span>Array vs. Linked List</span></a></h2><table><thead><tr><th>Item</th><th>Array</th><th>Linked List</th></tr></thead><tbody><tr><td>Cost of accessing an element</td><td>Constant time O(1)</td><td>Average Case: O(n)</td></tr><tr><td>Memory requirements</td><td>Fixed size</td><td>No unused memory</td></tr><tr><td></td><td>Memory may not available due to one large block</td><td>Memory may available as multiple small blocks</td></tr><tr><td></td><td>existing unused memory</td><td>Extra memory for pointer variables</td></tr><tr><td>Cost of inserting the elements</td><td>- at beginning - O(n)</td><td>O(1)</td></tr><tr><td></td><td>- at end - O(1) (if the array is not full)</td><td>O(n)</td></tr><tr><td></td><td>- at ith position - O(n)</td><td>O(n)</td></tr><tr><td>Easy of Use</td><td>‚úÖ</td><td>‚ùå</td></tr></tbody></table><h2 id="insert-the-element-in-arbitrary-positions" tabindex="-1"><a class="header-anchor" href="#insert-the-element-in-arbitrary-positions"><span>Insert the element in arbitrary positions</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
	Node<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	temp<span class="token operator">-&gt;</span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>
	temp<span class="token operator">-&gt;</span>link <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> temp<span class="token operator">-&gt;</span>link <span class="token operator">=</span> head<span class="token punctuation">;</span>
		head <span class="token operator">=</span> temp<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
		Node<span class="token operator">*</span> temp1 <span class="token operator">=</span> head<span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>index<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			temp1<span class="token operator">=</span>temp1<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		temp<span class="token operator">-&gt;</span>link <span class="token operator">=</span> temp1<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
		temp1<span class="token operator">-&gt;</span>link <span class="token operator">=</span> temp<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Attention! <code>new Node()</code> allocates a memory block for the Node. C++ operates the memory directly, so we can only visit it through address.</p><p>We use <code>temp=head</code> to store <code>head</code> in the formal parameter, because <code>head</code> is the only key information about linked list, which contains the address of the head Node. If the value of <code>head</code> is changed, we can‚Äôt find the head Node and lose this Linked List.</p><figure><img src="`+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Insert the new element at the beginning. üëÜThis time, you should modify <code>head</code> .</p><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Insert the new element in the arbitrary position.üëÜ This time, you don‚Äôt need to modify <code>head</code></p><h2 id="remove-the-element-in-arbitrary-positions" tabindex="-1"><a class="header-anchor" href="#remove-the-element-in-arbitrary-positions"><span>Remove the element in arbitrary positions</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>link<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> head<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span><span class="token punctuation">{</span>
			head <span class="token operator">=</span> head<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
		Node<span class="token operator">*</span> temp1<span class="token punctuation">;</span>
		temp1 <span class="token operator">=</span> head<span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>index<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			temp1 <span class="token operator">=</span> temp1<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		Node<span class="token operator">*</span> temp2 <span class="token operator">=</span> temp1<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
		temp1<span class="token operator">-&gt;</span>link <span class="token operator">=</span> temp2<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
		<span class="token keyword">delete</span> temp2<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Remove arbitrary element.üëÜ</p><h2 id="print-the-whole-linked-list-recursively" tabindex="-1"><a class="header-anchor" href="#print-the-whole-linked-list-recursively"><span>Print the whole linked list RECURSIVELY</span></a></h2>',24),v=s(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//recursive print</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">-&gt;</span>data<span class="token operator">&lt;&lt;</span><span class="token string">&quot; &quot;</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
	<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token function">Print</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@para: <code>Node* p</code> should transfer <code>head</code>.</p><h2 id="print-the-reverse-linked-list-recursively" tabindex="-1"><a class="header-anchor" href="#print-the-reverse-linked-list-recursively"><span>Print the <strong>REVERSE</strong> linked list RECURSIVELY</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">ReservePrint</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//recursive print</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">Print</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">-&gt;</span>data<span class="token operator">&lt;&lt;</span><span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line">¬†</div><div class="highlight-line">¬†</div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice the order of <strong><code>Print(p-&gt;link);</code></strong> and <strong><em><code>cout&lt;&lt;p-&gt;data&lt;&lt;&quot; &quot;;</code></em></strong></p><h2 id="reverse-the-linked-list-non-recursively" tabindex="-1"><a class="header-anchor" href="#reverse-the-linked-list-non-recursively"><span>Reverse the Linked List Non-recursively</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">Reverse_nonrecursive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	Node <span class="token operator">*</span>prev<span class="token punctuation">,</span> <span class="token operator">*</span>current<span class="token punctuation">,</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
	prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	current <span class="token operator">=</span> head<span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		next <span class="token operator">=</span> current<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
		current<span class="token operator">-&gt;</span>link <span class="token operator">=</span> prev<span class="token punctuation">;</span>
		prev <span class="token operator">=</span> current<span class="token punctuation">;</span>
		current <span class="token operator">=</span> next<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	head <span class="token operator">=</span> prev<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This time, you need three pointer to store next Node in advance. <code>Prev</code>, <code>Current</code>, <code>Next</code> need to update at the end of the loop.</p><h2 id="reverse-the-linked-list-recursively-crucial" tabindex="-1"><a class="header-anchor" href="#reverse-the-linked-list-recursively-crucial"><span>Reverse the Linked List RECURSIVELY (Crucial)</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">Reverse_recursive</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> temp<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>link<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		head <span class="token operator">=</span> temp<span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">Reverse_recursive</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>
	Node<span class="token operator">*</span> q <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span>
	q<span class="token operator">-&gt;</span>link <span class="token operator">=</span> temp<span class="token punctuation">;</span>
	temp<span class="token operator">-&gt;</span>link <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can draw the logistic view of Linked List and recursion tree to understand what happened. Come and try it!</p><h2 id="doubly-linked-list" tabindex="-1"><a class="header-anchor" href="#doubly-linked-list"><span>Doubly Linked List</span></a></h2><p>Different from the doubly linked list, in general, the linked list we discuss is a singly linked list.</p><p>How to define a doubly Node? This is the implementation in C++. A one Node includes three parts, including a data, a pointer to the next Node and most noteworthy, a pointer to the previous Node.</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> data<span class="token punctuation">;</span>
	Node<span class="token operator">*</span> next<span class="token punctuation">;</span>
	Node<span class="token operator">*</span> prev<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Doubly Node make insertion and removing more easily. You only need one pointer to visit the next Node and the previous Node, eliminating a lot of complex operations.</p>`,16);function b(y,g){const a=t("RouteLink");return o(),i("div",null,[m,p("p",null,[n("It is noteworthy that, when we use recursion, the PC uses stack("),l(a,{to:"/study/DataStructure/stack.html"},{default:r(()=>[n("Stack")]),_:1}),n(" ) implicitly.")]),v])}const L=e(h,[["render",b],["__file","linked_list.html.vue"]]),x=JSON.parse('{"path":"/study/DataStructure/linked_list.html","title":"üßÆ Linked List","lang":"zh-CN","frontmatter":{"date":"2024-06-22T00:00:00.000Z","description":"üßÆ Linked List Why should we create the linked list? For normal arrays, the data in the memory is stored jointly. But if we need modify some data or extend the arrays, it is har...","head":[["meta",{"property":"og:url","content":"https://dream-oyh.github.io/study/DataStructure/linked_list.html"}],["meta",{"property":"og:site_name","content":"Dream_oyh ÁöÑ blog"}],["meta",{"property":"og:title","content":"üßÆ Linked List"}],["meta",{"property":"og:description","content":"üßÆ Linked List Why should we create the linked list? For normal arrays, the data in the memory is stored jointly. But if we need modify some data or extend the arrays, it is har..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://dream-oyh.github.io/images/data_structure/linked_list/Untitled.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-30T03:35:16.000Z"}],["meta",{"property":"article:author","content":"OYH"}],["meta",{"property":"article:published_time","content":"2024-06-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-30T03:35:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"üßÆ Linked List\\",\\"image\\":[\\"https://dream-oyh.github.io/images/data_structure/linked_list/Untitled.png\\",\\"https://dream-oyh.github.io/images/data_structure/linked_list/Untitled%201.png\\",\\"https://dream-oyh.github.io/images/data_structure/linked_list/Untitled%202.png\\",\\"https://dream-oyh.github.io/images/data_structure/linked_list/Untitled%203.png\\"],\\"datePublished\\":\\"2024-06-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-30T03:35:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OYH\\",\\"email\\":\\"19859860010@163.com\\"}]}"]]},"headers":[{"level":2,"title":"Why should we create the linked list?","slug":"why-should-we-create-the-linked-list","link":"#why-should-we-create-the-linked-list","children":[]},{"level":2,"title":"Array vs. Linked List","slug":"array-vs-linked-list","link":"#array-vs-linked-list","children":[]},{"level":2,"title":"Insert the element in arbitrary positions","slug":"insert-the-element-in-arbitrary-positions","link":"#insert-the-element-in-arbitrary-positions","children":[]},{"level":2,"title":"Remove the element in arbitrary positions","slug":"remove-the-element-in-arbitrary-positions","link":"#remove-the-element-in-arbitrary-positions","children":[]},{"level":2,"title":"Print the whole linked list RECURSIVELY","slug":"print-the-whole-linked-list-recursively","link":"#print-the-whole-linked-list-recursively","children":[]},{"level":2,"title":"Print the REVERSE linked list RECURSIVELY","slug":"print-the-reverse-linked-list-recursively","link":"#print-the-reverse-linked-list-recursively","children":[]},{"level":2,"title":"Reverse the Linked List Non-recursively","slug":"reverse-the-linked-list-non-recursively","link":"#reverse-the-linked-list-non-recursively","children":[]},{"level":2,"title":"Reverse the Linked List RECURSIVELY (Crucial)","slug":"reverse-the-linked-list-recursively-crucial","link":"#reverse-the-linked-list-recursively-crucial","children":[]},{"level":2,"title":"Doubly Linked List","slug":"doubly-linked-list","link":"#doubly-linked-list","children":[]}],"git":{"createdTime":1719718516000,"updatedTime":1719718516000,"contributors":[{"name":"dream-oyh","email":"1399541701@qq.com","commits":1}]},"readingTime":{"minutes":2.68,"words":804},"filePathRelative":"study/DataStructure/linked_list.md","localizedDate":"2024Âπ¥6Êúà22Êó•","excerpt":"\\n<h2>Why should we create the linked list?</h2>\\n<p>For normal arrays, the data in the memory is stored jointly. But if we need modify some data or extend the arrays, it is hard. Linked list leverages the fixed data sequence, link disjoint data by <strong>Link.</strong> There are two parts in each data block, including data itself, and a pointer, which declared who is the next data block.</p>","autoDesc":true}');export{L as comp,x as data};
