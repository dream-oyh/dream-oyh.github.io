import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,o as n,d as s,b as a,e}from"./app-qnVddVOo.js";const m="/images/data_structure/hash_table/logistic_view.png",i={},r=s("h1",{id:"üìà-hash-table",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#üìà-hash-table"},[s("span",null,"üìà Hash Table")])],-1),c=s("p",null,[s("strong",null,"Hash Table"),a(": A abstract data structure that maps keys and values.")],-1),o=s("figure",null,[s("img",{src:m,alt:"",width:"200",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),p=s("p",null,[s("strong",null,"Hash Function"),a(": A "),s("strong",null,"hash function"),a(" is any function that can be used to map data of arbitrary size to fixed-size values (used for storage address), namely "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"H"),s("mi",null,"a"),s("mi",null,"s"),s("mi",null,"h"),s("mo",{stretchy:"false"},"("),s("mi",null,"k"),s("mi",null,"e"),s("mi",null,"y"),s("mi",null,"s"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"A"),s("mi",null,"d"),s("mi",null,"d"),s("mi",null,"r"),s("mi",null,"e"),s("mi",null,"s"),s("mi",null,"s")]),s("annotation",{encoding:"application/x-tex"},"Hash(keys)=Address")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"h"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mord mathnormal"},"eys"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"A"),s("span",{class:"mord mathnormal"},"dd"),s("span",{class:"mord mathnormal"},"ress")])])])],-1),h=e('<ul><li>Hash function should be <strong>simple</strong>, to reduce the calculating time consumption.</li><li>Hash function should be <strong>uniform</strong>,to avoid multiple values being mapped near the same address, and generating more hash collision.</li></ul><p><strong>Hash Collision</strong>: When two distinct pieces of data in a hash table share the same hash value. The hash value in this case is derived from a hash function which takes a data input and returns a fixed length of bits.(From <a href="https://en.wikipedia.org/wiki/Hash_collision" target="_blank" rel="noopener noreferrer">Wikipedia</a>)</p><h2 id="common-hash-functions" tabindex="-1"><a class="header-anchor" href="#common-hash-functions"><span>Common Hash Functions</span></a></h2><h3 id="direct-addressing-method" tabindex="-1"><a class="header-anchor" href="#direct-addressing-method"><span>Direct addressing method</span></a></h3>',4),u=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"H"),s("mi",null,"a"),s("mi",null,"s"),s("mi",null,"h"),s("mo",{stretchy:"false"},"("),s("mi",null,"K"),s("mi",null,"e"),s("mi",null,"y"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"a"),s("mo",null,"√ó"),s("mi",null,"K"),s("mi",null,"e"),s("mi",null,"y"),s("mo",null,"+"),s("mi",null,"b")]),s("annotation",{encoding:"application/x-tex"}," Hash(Key) = a\\times Key + b ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"h"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"Key"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"√ó"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8778em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"Key"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"b")])])])])],-1),d=s("p",null,"Applications: Key distribution should be known. And the collection of the keys is greatly consecutive and not have a concentrated distribution.",-1),g=s("h3",{id:"modulo-method-ÂèñÊ®°",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#modulo-method-ÂèñÊ®°"},[s("span",null,"Modulo methodÔºàÂèñÊ®°Ôºâ")])],-1),y=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"H"),s("mi",null,"a"),s("mi",null,"s"),s("mi",null,"h"),s("mo",{stretchy:"false"},"("),s("mi",null,"K"),s("mi",null,"e"),s("mi",null,"y"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"K"),s("mi",null,"e"),s("mi",null,"y"),s("mi",{mathvariant:"normal"},"%"),s("mi",null,"p")]),s("annotation",{encoding:"application/x-tex"}," Hash(Key) = Key \\% p ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"h"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"Key"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9444em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"Key"),s("span",{class:"mord"},"%"),s("span",{class:"mord mathnormal"},"p")])])])])],-1),b=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"p")]),s("annotation",{encoding:"application/x-tex"},"p")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal"},"p")])])]),a(" is a prime number which is less than the length of the hash table.")],-1),x=s("p",null,[a("Applications: "),s("strong",null,"Without knowing"),a(" the distribution of the keys.")],-1),v=s("div",{class:"hint-container tip"},[s("p",{class:"hint-container-title"},"Why p should be a prime number less than the length of the hash table?"),s("p",null,[a("Modulo calculation can map the hash code into the interval between 0 and "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"p"),s("mo",null,"‚àí"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"p-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7778em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal"},"p"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"‚àí"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(".")]),s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"p")]),s("annotation",{encoding:"application/x-tex"},"p")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal"},"p")])])]),a(" should be a prime number to avoid collision as much as possible.")]),s("p",null,[a("If the "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"p")]),s("annotation",{encoding:"application/x-tex"},"p")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal"},"p")])])]),a(" is bigger than the length of the hash table, the hash table will overflow. We suppose that the length of the hash table is 15. If the %p% equals to 17, the key whose hash code is 16 can't find a appropriate postion to input.")])],-1),k=s("h2",{id:"hash-collision",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#hash-collision"},[s("span",null,"Hash Collision")])],-1),f=s("h3",{id:"open-addressing-method",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#open-addressing-method"},[s("span",null,"Open addressing method")])],-1),_=s("p",null,[a("Open addresssing method is a solution in the linear storage. When the collision happens, this method will "),s("strong",null,"detect other available locations"),a(", rather than creating a new storage.")],-1),w=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"h"),s("mi",null,"a"),s("mi",null,"s"),s("msup",null,[s("mi",null,"h"),s("mo",{mathvariant:"normal",lspace:"0em",rspace:"0em"},"‚Ä≤")]),s("mo",{stretchy:"false"},"("),s("mi",null,"K"),s("mi",null,"e"),s("mi",null,"y"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mo",{stretchy:"false"},"("),s("mi",null,"h"),s("mi",null,"a"),s("mi",null,"s"),s("mi",null,"h"),s("mo",{stretchy:"false"},"("),s("mi",null,"K"),s("mi",null,"e"),s("mi",null,"y"),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("msub",null,[s("mi",null,"d"),s("mi",null,"i")]),s("mo",{stretchy:"false"},")"),s("mi",{mathvariant:"normal"},"%"),s("mi",null,"m")]),s("annotation",{encoding:"application/x-tex"}," hash'(Key) = (hash(Key)+d_i)\\% m ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0519em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"ha"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"h"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8019em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"‚Ä≤")])])])])])])])]),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"Key"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"ha"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"h"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"Key"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"d"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"‚Äã")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},")"),s("span",{class:"mord"},"%"),s("span",{class:"mord mathnormal"},"m")])])])])],-1),z=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"h"),s("mi",null,"a"),s("mi",null,"s"),s("msup",null,[s("mi",null,"h"),s("mo",{mathvariant:"normal",lspace:"0em",rspace:"0em"},"‚Ä≤")]),s("mo",{stretchy:"false"},"("),s("mi",null,"K"),s("mi",null,"e"),s("mi",null,"y"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"hash'(Key)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0019em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"ha"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"h"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7519em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"‚Ä≤")])])])])])])])]),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"Key"),s("span",{class:"mclose"},")")])])]),a(" is the detection function, and "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"m")]),s("annotation",{encoding:"application/x-tex"},"m")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"m")])])]),a(" is the length of the hash table.")],-1),M=s("ul",null,[s("li",null,"linear detection")],-1),H=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"d"),s("mi",null,"i")]),s("mo",null,"="),s("mn",null,"1"),s("mo",{separator:"true"},","),s("mo",null,"‚ãØ"),s("mtext",null,"‚Äâ"),s("mo",{separator:"true"},","),s("mi",null,"m"),s("mo",null,"‚àí"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"}," d_i = 1,\\cdots, m-1 ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8444em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"d"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"‚Äã")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"minner"},"‚ãØ"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"‚àí"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])])])],-1),T=s("ul",null,[s("li",null,"Double detection")],-1),K=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"d"),s("mi",null,"i")]),s("mo",null,"="),s("msup",null,[s("mn",null,"1"),s("mn",null,"2")]),s("mo",{separator:"true"},","),s("mo",null,"‚àí"),s("msup",null,[s("mn",null,"1"),s("mn",null,"2")]),s("mo",{separator:"true"},","),s("msup",null,[s("mn",null,"2"),s("mn",null,"2")]),s("mo",{separator:"true"},","),s("mo",null,"‚àí"),s("msup",null,[s("mn",null,"2"),s("mn",null,"2")]),s("mo",{separator:"true"},","),s("mo",null,"‚ãØ"),s("mtext",null,"‚Äâ"),s("mo",{separator:"true"},","),s("msup",null,[s("mi",null,"k"),s("mn",null,"2")]),s("mo",{separator:"true"},","),s("mo",null,"‚àí"),s("msup",null,[s("mi",null,"k"),s("mn",null,"2")]),s("mo",{stretchy:"false"},"("),s("mi",null,"k"),s("mo",null,"‚â§"),s("mi",null,"m"),s("mi",{mathvariant:"normal"},"/"),s("mn",null,"2"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"}," d_i = 1^2, -1^2, 2^2, -2^2, \\cdots, k^2, -k^2(k\\le m/2) ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8444em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"d"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"‚Äã")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.1141em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"1"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8641em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"‚àí"),s("span",{class:"mord"},[s("span",{class:"mord"},"1"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8641em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8641em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"‚àí"),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8641em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"minner"},"‚ãØ"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8641em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"‚àí"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8641em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"‚â§"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mord"},"/2"),s("span",{class:"mclose"},")")])])])])],-1),A=s("p",null,"Jump back and forth! But the detection failure may be occur.",-1),L=s("h3",{id:"chaining",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#chaining"},[s("span",null,"Chaining")])],-1),C=s("p",null,"If different keys have the same hash code, they are synonyms for each other. The Chaining method stores synonyms in a linked list under the same address. Search, delete, and insert are implemented in this linked list.",-1),D=[r,c,o,p,h,u,d,g,y,b,x,v,k,f,_,w,z,M,H,T,K,A,L,C];function F(N,O){return n(),l("div",null,D)}const Z=t(i,[["render",F],["__file","HashTable.html.vue"]]),B=JSON.parse('{"path":"/study/DataStructure/HashTable.html","title":"üìà Hash Table","lang":"zh-CN","frontmatter":{"date":"2024-07-22T00:00:00.000Z","tag":"data_structure","description":"üìà Hash Table Hash Table: A abstract data structure that maps keys and values. Hash Function: A hash function is any function that can be used to map data of arbitrary size to f...","head":[["meta",{"property":"og:url","content":"https://dream-oyh.github.io/study/DataStructure/HashTable.html"}],["meta",{"property":"og:site_name","content":"Dream_oyh ÁöÑ blog"}],["meta",{"property":"og:title","content":"üìà Hash Table"}],["meta",{"property":"og:description","content":"üìà Hash Table Hash Table: A abstract data structure that maps keys and values. Hash Function: A hash function is any function that can be used to map data of arbitrary size to f..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://dream-oyh.github.io/images/data_structure/hash_table/logistic_view.png =200x"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-26T08:09:16.000Z"}],["meta",{"property":"article:author","content":"OYH"}],["meta",{"property":"article:tag","content":"data_structure"}],["meta",{"property":"article:published_time","content":"2024-07-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-26T08:09:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"üìà Hash Table\\",\\"image\\":[\\"https://dream-oyh.github.io/images/data_structure/hash_table/logistic_view.png =200x\\"],\\"datePublished\\":\\"2024-07-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-26T08:09:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OYH\\",\\"email\\":\\"19859860010@163.com\\"}]}"]]},"headers":[{"level":2,"title":"Common Hash Functions","slug":"common-hash-functions","link":"#common-hash-functions","children":[{"level":3,"title":"Direct addressing method","slug":"direct-addressing-method","link":"#direct-addressing-method","children":[]},{"level":3,"title":"Modulo methodÔºàÂèñÊ®°Ôºâ","slug":"modulo-method-ÂèñÊ®°","link":"#modulo-method-ÂèñÊ®°","children":[]}]},{"level":2,"title":"Hash Collision","slug":"hash-collision","link":"#hash-collision","children":[{"level":3,"title":"Open addressing method","slug":"open-addressing-method","link":"#open-addressing-method","children":[]},{"level":3,"title":"Chaining","slug":"chaining","link":"#chaining","children":[]}]}],"git":{"createdTime":1721660389000,"updatedTime":1721981356000,"contributors":[{"name":"dream-oyh","email":"1399541701@qq.com","commits":5}]},"readingTime":{"minutes":1.38,"words":413},"filePathRelative":"study/DataStructure/HashTable.md","localizedDate":"2024Âπ¥7Êúà22Êó•","excerpt":"\\n<p><strong>Hash Table</strong>: A abstract data structure that maps keys and values.</p>\\n<figure><img src=\\"/images/data_structure/hash_table/logistic_view.png\\" alt=\\"\\" width=\\"200\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<p><strong>Hash Function</strong>: A <strong>hash function</strong> is any function that can be used to map data of arbitrary size to fixed-size values (used for storage address), namely <span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>H</mi><mi>a</mi><mi>s</mi><mi>h</mi><mo stretchy=\\"false\\">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mi>s</mi><mo stretchy=\\"false\\">)</mo><mo>=</mo><mi>A</mi><mi>d</mi><mi>d</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding=\\"application/x-tex\\">Hash(keys)=Address</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.08125em;\\">H</span><span class=\\"mord mathnormal\\">a</span><span class=\\"mord mathnormal\\">s</span><span class=\\"mord mathnormal\\">h</span><span class=\\"mopen\\">(</span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.03148em;\\">k</span><span class=\\"mord mathnormal\\">eys</span><span class=\\"mclose\\">)</span><span class=\\"mspace\\" style=\\"margin-right:0.2778em;\\"></span><span class=\\"mrel\\">=</span><span class=\\"mspace\\" style=\\"margin-right:0.2778em;\\"></span></span><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.6944em;\\"></span><span class=\\"mord mathnormal\\">A</span><span class=\\"mord mathnormal\\">dd</span><span class=\\"mord mathnormal\\">ress</span></span></span></span></p>","autoDesc":true}');export{Z as comp,B as data};
