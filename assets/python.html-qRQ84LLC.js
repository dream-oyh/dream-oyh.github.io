import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as h,c as m,d as e,b as a,a as n,w as t,e as l}from"./app-ESvGtvEZ.js";const u={},y=l('<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h2 id="为什么我选择了-python" tabindex="-1"><a class="header-anchor" href="#为什么我选择了-python"><span>为什么我选择了 Python</span></a></h2><p>从大一我就开始接触 MATLAB，并且认为 python 能做的，MATLAB 也能做，而且实现起来更简单，毕竟 MATLAB 作为一个已经商业化的工具，其工作区的可视化和交互性、对于环境的依赖程度确实是 python 不可比拟的。</p><p>但是 MATLAB 完整体量高达 50G，对于磁盘的占用率是不言而喻的，Python 借用包管理器，将体量减小到 MATLAB 远不及的水平。其次，MATLAB 在拟合、神经网络、深度学习等领域，采用已经打包好的工具箱，这对于算法学习是极其不利的，但是 Python 通过各种库的调用，能够从底层逻辑实现各算法，对于个人学习而言是更为有益的。</p><h2 id="包管理器" tabindex="-1"><a class="header-anchor" href="#包管理器"><span>包管理器</span></a></h2><h3 id="pip" tabindex="-1"><a class="header-anchor" href="#pip"><span>pip</span></a></h3>',6),g=e("h3",{id:"poetry-在用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#poetry-在用"},[e("span",null,"poetry（在用）")])],-1),v={href:"https://absx.pages.dev/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://absx.pages.dev/",target:"_blank",rel:"noopener noreferrer"},_=e("h4",{id:"安装",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装"},[e("span",null,"安装")])],-1),A={href:"https://python-poetry.org/docs/#installing-with-pipx",target:"_blank",rel:"noopener noreferrer"},k=l(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> poetry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h4><p>poetry 默认在 C 盘创建虚拟环境，不利于使用，将配置更改至项目所在文件夹，方便环境的调用和管理。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>poetry config virtualenvs.in-project <span class="token boolean">true</span>
poetry config cache-dir D:<span class="token punctuation">\\</span><span class="token punctuation">\\</span>poetry_enev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="基本命令" tabindex="-1"><a class="header-anchor" href="#基本命令"><span>基本命令</span></a></h4><p><strong>新建项目：</strong> <code>poetry new &lt;package name&gt;</code></p><ul><li><p>创建 <code>.toml</code> 文件：<code>poetry init</code>，然后跟着提示填入信息 <strong>包管理</strong></p></li><li><p>添加包：<code>poetry add &lt;package name&gt;</code></p></li><li><p>移除包：<code>poetry remove &lt;package name&gt;</code></p></li><li><p>列出可用包：<code>poetry show</code><strong>安装依赖</strong></p></li><li><p>从现有 <code>pyproject.toml</code> 安装：<code>poetry install</code>，会自动新建虚拟环境</p></li><li><p>从 <code>requirements.txt</code> 安装（不够完善）：<code>cat requirements.txt | xargs -I % sh -c &#39;poetry add &quot;%&quot;&#39; (ref)</code><strong>虚拟环境</strong></p></li><li><p>激活：<code>poetry shell</code></p></li><li><p>删除虚拟环境：<code>poetry env remove --all</code></p></li><li><p>运行：<code>poetry run python &lt;filename&gt;.py</code></p></li></ul><h3 id="conda" tabindex="-1"><a class="header-anchor" href="#conda"><span>conda</span></a></h3><p>拒绝 Anaconda 的大体积，建议安装 Miniconda 作为环境管理器。</p><h4 id="安装-1" tabindex="-1"><a class="header-anchor" href="#安装-1"><span>安装</span></a></h4>`,10),x=e("p",null,"scoop 一行搞定",-1),f=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("scoop "),e("span",{class:"token function"},"install"),a(` miniconda
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),T=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"wget"),a(` https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
`),e("span",{class:"token function"},"bash"),a(" Miniconda3-latest-Linux-x86_64.sh  "),e("span",{class:"token comment"},"# 接下来一路空格"),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),L=l(`<h4 id="基本命令-1" tabindex="-1"><a class="header-anchor" href="#基本命令-1"><span>基本命令</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda <span class="token parameter variable">-V</span> <span class="token comment"># 查看 conda 版本</span>
conda create <span class="token parameter variable">-n</span> <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token operator">&lt;</span>version<span class="token operator">&gt;</span> <span class="token comment"># 创建环境</span>
conda activate <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> <span class="token comment"># 激活环境</span>
conda deactivate    <span class="token comment"># 关闭环境</span>
conda remove <span class="token parameter variable">-n</span> <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> <span class="token parameter variable">--all</span>  <span class="token comment"># 删除环境，也可进入 conda 安装目录下的 /envs/ 删除文件夹</span>
conda list  <span class="token comment"># 查看环境内工具包</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function M(B,P){const r=p("RouteLink"),o=p("ExternalLinkIcon"),c=p("Tabs");return h(),m("div",null,[y,e("p",null,[a("这是 Python 自带的包管理器，但是存在一定的问题，后将其弃用，改用"),n(r,{to:"/code/python.html#poetry-%E5%9C%A8%E7%94%A8"},{default:t(()=>[a("poetry")]),_:1}),a("，其问题可见"),n(r,{to:"/artical/weakness.html#pip"},{default:t(()=>[a("产品吐槽")]),_:1}),a("板块。")]),g,e("p",null,[a("听从"),e("a",v,[a("绝对值_x"),n(o)]),a("的意见，选用了更为轻量且方便的 poetry 包管理器，有效解决了 pip 存在的两个问题，以下内容参考来源于"),e("a",b,[a("绝对值_x"),n(o)]),a("博客。")]),_,e("p",null,[a("这里是 poetry 的"),e("a",A,[a("官方文档"),n(o)]),a("，安装方法：")]),k,n(c,{id:"103",data:[{id:"Windows"},{id:"Linux"}]},{title0:t(({value:s,isActive:i})=>[a("Windows")]),title1:t(({value:s,isActive:i})=>[a("Linux")]),tab0:t(({value:s,isActive:i})=>[x,f]),tab1:t(({value:s,isActive:i})=>[T]),_:1}),L])}const N=d(u,[["render",M],["__file","python.html.vue"]]),C=JSON.parse('{"path":"/code/python.html","title":"Python","lang":"zh-CN","frontmatter":{"date":"2024-01-24T00:00:00.000Z","icon":"python","category":"编程","tag":"教程","description":"Python 为什么我选择了 Python 从大一我就开始接触 MATLAB，并且认为 python 能做的，MATLAB 也能做，而且实现起来更简单，毕竟 MATLAB 作为一个已经商业化的工具，其工作区的可视化和交互性、对于环境的依赖程度确实是 python 不可比拟的。 但是 MATLAB 完整体量高达 50G，对于磁盘的占用率是不言而喻的，Py...","head":[["meta",{"property":"og:url","content":"https://dream-oyh.github.io/code/python.html"}],["meta",{"property":"og:site_name","content":"Dream_oyh 的 blog"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 为什么我选择了 Python 从大一我就开始接触 MATLAB，并且认为 python 能做的，MATLAB 也能做，而且实现起来更简单，毕竟 MATLAB 作为一个已经商业化的工具，其工作区的可视化和交互性、对于环境的依赖程度确实是 python 不可比拟的。 但是 MATLAB 完整体量高达 50G，对于磁盘的占用率是不言而喻的，Py..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T14:32:00.000Z"}],["meta",{"property":"article:author","content":"OYH"}],["meta",{"property":"article:tag","content":"教程"}],["meta",{"property":"article:published_time","content":"2024-01-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T14:32:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-17T14:32:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OYH\\",\\"email\\":\\"19859860010@163.com\\"}]}"]]},"headers":[{"level":2,"title":"为什么我选择了 Python","slug":"为什么我选择了-python","link":"#为什么我选择了-python","children":[]},{"level":2,"title":"包管理器","slug":"包管理器","link":"#包管理器","children":[{"level":3,"title":"pip","slug":"pip","link":"#pip","children":[]},{"level":3,"title":"poetry（在用）","slug":"poetry-在用","link":"#poetry-在用","children":[]},{"level":3,"title":"conda","slug":"conda","link":"#conda","children":[]}]}],"git":{"createdTime":1707929375000,"updatedTime":1708180320000,"contributors":[{"name":"dream同学0","email":"1399541701@qq.com","commits":4},{"name":"dream_linux","email":"1399541701@qq.com","commits":1}]},"readingTime":{"minutes":2.16,"words":649},"filePathRelative":"code/python.md","localizedDate":"2024年1月24日","excerpt":"\\n<h2>为什么我选择了 Python</h2>\\n<p>从大一我就开始接触 MATLAB，并且认为 python 能做的，MATLAB 也能做，而且实现起来更简单，毕竟 MATLAB 作为一个已经商业化的工具，其工作区的可视化和交互性、对于环境的依赖程度确实是 python 不可比拟的。</p>\\n<p>但是 MATLAB 完整体量高达 50G，对于磁盘的占用率是不言而喻的，Python 借用包管理器，将体量减小到 MATLAB 远不及的水平。其次，MATLAB 在拟合、神经网络、深度学习等领域，采用已经打包好的工具箱，这对于算法学习是极其不利的，但是 Python 通过各种库的调用，能够从底层逻辑实现各算法，对于个人学习而言是更为有益的。</p>","autoDesc":true}');export{N as comp,C as data};
