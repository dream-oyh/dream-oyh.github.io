import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,d as s,b as n,a as i,w as l,e as a}from"./app-BlcQ1t8t.js";const u={},r=a(`<h1 id="fashionmnist-数据集" tabindex="-1"><a class="header-anchor" href="#fashionmnist-数据集"><span>FashionMNIST 数据集</span></a></h1><p>FashionMNIST 数据集是一个包含 60,000 个训练图像和 10,000 个测试图像的数据集。引入该数据集后，我们可以更方便和直观地比较模型精度和计算效率。</p><h2 id="导入本文所需要的包" tabindex="-1"><a class="header-anchor" href="#导入本文所需要的包"><span>导入本文所需要的包</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">as</span> Data
<span class="token keyword">import</span> torchvision

<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> d2lzh_pytorch <span class="token keyword">as</span> d2l  <span class="token comment"># 需要根据实际目录更改</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="获取数据集" tabindex="-1"><a class="header-anchor" href="#获取数据集"><span>获取数据集</span></a></h2><p>我们通过<code>torchvision.datasets</code>来下载数据集，第一次调用时会从网上获取数据，该函数包括多个参数，写完代码之后我们一一来看各参数的含义。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>mnist_train <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>
    root<span class="token operator">=</span><span class="token string">&quot;./Datasets/&quot;</span><span class="token punctuation">,</span>
    train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
mnist_test <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>
    root<span class="token operator">=</span><span class="token string">&quot;./Datasets/&quot;</span><span class="token punctuation">,</span>
    train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>
    download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),d=a("<li><code>root</code> 数据集的保存目录，注意这里是在 linux 环境下下载的，所以采用<code>/</code>作为路径分隔符</li><li><code>train</code> 是否为训练集，True 表示训练集，False 表示测试集</li><li><code>download</code> 是否下载数据集，如果数据集已经下载过，设置为 False 可以避免重复下载。</li><li><code>transform</code> 数据预处理操作，这里使用<code>ToTensor()</code>将 PIL 图片（尺寸为 <code>HeightxWidthxChannels</code>且数据位于[0,255]）或者 数据类型为<code>np.uint8</code>的 numpy 数组 转换为 尺寸为<code>ChannelsxHeightxWidth</code>，数据类型为<code>torch.float32</code>且位于[0.0,1.0]的<code>Tensor</code></li>",4),k=s("code",null,"mnist_test",-1),m=s("code",null,"mnist_train",-1),h=s("code",null,"torch.utils.data.Dataset",-1),v=s("code",null,"features",-1),b=s("code",null,"labels",-1),y=a(`<div class="hint-container tip"><p class="hint-container-title">对 Dataset 的基本操作</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">len</span><span class="token punctuation">(</span>mnist_train<span class="token punctuation">)</span>  <span class="token comment"># 读取数据集数量</span>
<span class="token builtin">type</span><span class="token punctuation">(</span>mnist_train<span class="token punctuation">)</span>  <span class="token comment"># 读取数据集类型</span>
feature<span class="token punctuation">,</span> label <span class="token operator">=</span> mnist_train<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 读取数据集第一个元素</span>
mnist_train<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># 读取数据集第一个元素的特征</span>
mnist_train<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 读取数据集第一个元素的标签</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是，这里的<code>feature</code>维度需要特别关注，是<mark>CxHxW</mark>，第一维为通道数。数据集中的图形都是<code>28x28</code>的灰度图像，只有一个通道，所以<code>feature</code>的尺寸是<code>1x28x28</code>。并且由于我们使用了<code>ToTensor()</code>，数据类型已经转换为<code>torch.float32</code>，数据均位于<code>[0-1]</code>区间。</p></div><h3 id="将数值标签转换为文本标签" tabindex="-1"><a class="header-anchor" href="#将数值标签转换为文本标签"><span>将数值标签转换为文本标签</span></a></h3><p>Fashion-MNIST 中一共包括了 10 个类别，分别为 t-shirt（T 恤）、trouser（裤子）、pullover（套衫）、dress（连衣裙）、coat（外套）、sandal（凉鞋）、shirt（衬衫）、sneaker（运动鞋）、bag（包）和 ankle boot（短靴）。以下函数可以将数值标签转成相应的文本标签。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 本函数已保存在 d2lzh 包中以方便后续使用</span>

<span class="token keyword">def</span> <span class="token function">get_fashion_mnist_labels</span><span class="token punctuation">(</span>labels<span class="token punctuation">)</span><span class="token punctuation">:</span>
    text_labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;t-shirt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;trouser&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pullover&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dress&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;coat&#39;</span><span class="token punctuation">,</span>
                   <span class="token string">&#39;sandal&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shirt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sneaker&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bag&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ankle boot&#39;</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>text_labels<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> labels<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一行里面画出多张图像和标签的函数" tabindex="-1"><a class="header-anchor" href="#一行里面画出多张图像和标签的函数"><span>一行里面画出多张图像和标签的函数</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 本函数已保存在 d2lzh 包中以方便后续使用</span>
<span class="token keyword">from</span> IPython <span class="token keyword">import</span> display
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt

<span class="token keyword">def</span> <span class="token function">use_svg_display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    display<span class="token punctuation">.</span>set_matplotlib_formats<span class="token punctuation">(</span><span class="token string">&#39;svg&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">show_fashion_mnist</span><span class="token punctuation">(</span>images<span class="token punctuation">,</span> labels<span class="token punctuation">)</span><span class="token punctuation">:</span>
    d2l<span class="token punctuation">.</span>use_svg_display<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 这里的_表示我们忽略（不使用）的变量</span>
    _<span class="token punctuation">,</span> figs <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>images<span class="token punctuation">)</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> f<span class="token punctuation">,</span> img<span class="token punctuation">,</span> lbl <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>figs<span class="token punctuation">,</span> images<span class="token punctuation">,</span> labels<span class="token punctuation">)</span><span class="token punctuation">:</span>
        f<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        f<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span>lbl<span class="token punctuation">)</span>
        f<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>get_xaxis<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        f<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>get_yaxis<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此我们可以显示出 10 个数据集中的图像。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>X <span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  X<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mnist_train<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mnist_train<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
d2l<span class="token punctuation">.</span>show_fashion_mnist<span class="token punctuation">(</span>X<span class="token punctuation">,</span> d2l<span class="token punctuation">.</span>get_fashion_mnist_labels<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function g(_,f){const t=p("RouteLink");return o(),c("div",null,[r,s("ul",null,[d,s("li",null,[n("函数返回的"),k,n("和"),m,n("都是"),h,n("的子类，对应了"),i(t,{to:"/code/python/pytorch/2.1linear_regression.html#%E7%94%9F%E6%88%90%E5%B9%B6%E5%88%B6%E4%BD%9C%E6%95%B0%E6%8D%AE%E9%9B%86"},{default:l(()=>[n("线性回归模型中制作数据集的步骤")]),_:1}),n("，直接获得了"),v,n("和"),b,n("的映射。")])]),y])}const x=e(u,[["render",g],["__file","2.2FashionMNIST.html.vue"]]),N=JSON.parse('{"path":"/code/python/pytorch/2.2FashionMNIST.html","title":"FashionMNIST 数据集","lang":"zh-CN","frontmatter":{"date":"2024-02-17T00:00:00.000Z","description":"FashionMNIST 数据集 FashionMNIST 数据集是一个包含 60,000 个训练图像和 10,000 个测试图像的数据集。引入该数据集后，我们可以更方便和直观地比较模型精度和计算效率。 导入本文所需要的包 获取数据集 我们通过torchvision.datasets来下载数据集，第一次调用时会从网上获取数据，该函数包括多个参数，写完代...","head":[["meta",{"property":"og:url","content":"https://dream-oyh.github.io/code/python/pytorch/2.2FashionMNIST.html"}],["meta",{"property":"og:site_name","content":"Dream_oyh 的 blog"}],["meta",{"property":"og:title","content":"FashionMNIST 数据集"}],["meta",{"property":"og:description","content":"FashionMNIST 数据集 FashionMNIST 数据集是一个包含 60,000 个训练图像和 10,000 个测试图像的数据集。引入该数据集后，我们可以更方便和直观地比较模型精度和计算效率。 导入本文所需要的包 获取数据集 我们通过torchvision.datasets来下载数据集，第一次调用时会从网上获取数据，该函数包括多个参数，写完代..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-18T13:18:03.000Z"}],["meta",{"property":"article:author","content":"OYH"}],["meta",{"property":"article:published_time","content":"2024-02-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-18T13:18:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"FashionMNIST 数据集\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-18T13:18:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OYH\\",\\"email\\":\\"19859860010@163.com\\"}]}"]]},"headers":[{"level":2,"title":"导入本文所需要的包","slug":"导入本文所需要的包","link":"#导入本文所需要的包","children":[]},{"level":2,"title":"获取数据集","slug":"获取数据集","link":"#获取数据集","children":[{"level":3,"title":"将数值标签转换为文本标签","slug":"将数值标签转换为文本标签","link":"#将数值标签转换为文本标签","children":[]},{"level":3,"title":"一行里面画出多张图像和标签的函数","slug":"一行里面画出多张图像和标签的函数","link":"#一行里面画出多张图像和标签的函数","children":[]}]}],"git":{"createdTime":1708138728000,"updatedTime":1708262283000,"contributors":[{"name":"dream_linux","email":"1399541701@qq.com","commits":3},{"name":"dream同学0","email":"1399541701@qq.com","commits":1}]},"readingTime":{"minutes":2.63,"words":788},"filePathRelative":"code/python/pytorch/2.2FashionMNIST.md","localizedDate":"2024年2月17日","excerpt":"\\n<p>FashionMNIST 数据集是一个包含 60,000 个训练图像和 10,000 个测试图像的数据集。引入该数据集后，我们可以更方便和直观地比较模型精度和计算效率。</p>\\n<h2>导入本文所需要的包</h2>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> torch<span class=\\"token punctuation\\">.</span>utils<span class=\\"token punctuation\\">.</span>data <span class=\\"token keyword\\">as</span> Data\\n<span class=\\"token keyword\\">import</span> torchvision\\n\\n<span class=\\"token keyword\\">from</span> <span class=\\"token punctuation\\">.</span> <span class=\\"token keyword\\">import</span> d2lzh_pytorch <span class=\\"token keyword\\">as</span> d2l  <span class=\\"token comment\\"># 需要根据实际目录更改</span>\\n</code></pre></div>","autoDesc":true}');export{x as comp,N as data};
