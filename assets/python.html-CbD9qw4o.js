import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as u,c as h,d as n,b as a,a as s,w as t,e as o}from"./app-DZBbp9UH.js";const m={},k=o('<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h2 id="为什么我选择了-python" tabindex="-1"><a class="header-anchor" href="#为什么我选择了-python"><span>为什么我选择了 Python</span></a></h2><p>从大一我就开始接触 MATLAB，并且认为 python 能做的，MATLAB 也能做，而且实现起来更简单，毕竟 MATLAB 作为一个已经商业化的工具，其工作区的可视化和交互性、对于环境的依赖程度确实是 python 不可比拟的。</p><p>但是 MATLAB 完整体量高达 50G，对于磁盘的占用率是不言而喻的，Python 借用包管理器，将体量减小到 MATLAB 远不及的水平。其次，MATLAB 在拟合、神经网络、深度学习等领域，采用已经打包好的工具箱，这对于算法学习是极其不利的，但是 Python 通过各种库的调用，能够从底层逻辑实现各算法，对于个人学习而言是更为有益的。</p><h2 id="包管理器" tabindex="-1"><a class="header-anchor" href="#包管理器"><span>包管理器</span></a></h2><h3 id="pip" tabindex="-1"><a class="header-anchor" href="#pip"><span>pip</span></a></h3>',6),v=n("h3",{id:"poetry-在用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#poetry-在用"},[n("span",null,"poetry（在用）")])],-1),g={href:"https://absx.pages.dev/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://absx.pages.dev/",target:"_blank",rel:"noopener noreferrer"},y=n("h4",{id:"安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安装"},[n("span",null,"安装")])],-1),_={href:"https://python-poetry.org/docs/#installing-with-pipx",target:"_blank",rel:"noopener noreferrer"},f=o(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> poetry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h4><p>poetry 默认在 C 盘创建虚拟环境，不利于使用，将配置更改至项目所在文件夹，方便环境的调用和管理。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>poetry config virtualenvs.in-project <span class="token boolean">true</span>
poetry config cache-dir D:<span class="token punctuation">\\</span><span class="token punctuation">\\</span>poetry_enev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="基本命令" tabindex="-1"><a class="header-anchor" href="#基本命令"><span>基本命令</span></a></h4><p><strong>新建项目：</strong></p><ul><li><p><code>poetry new &lt;package name&gt;</code></p></li><li><p>创建 <code>.toml</code> 文件：<code>poetry init</code>，然后跟着提示填入信息</p><p><strong>包管理</strong></p></li><li><p>添加包：<code>poetry add &lt;package name&gt;</code></p></li><li><p>移除包：<code>poetry remove &lt;package name&gt;</code></p></li><li><p>列出可用包：<code>poetry show</code></p><p><strong>安装依赖</strong></p></li><li><p>从现有 <code>pyproject.toml</code> 安装：<code>poetry install</code>，会自动新建虚拟环境</p></li><li><p>从 <code>requirements.txt</code> 安装（不够完善）：<code>cat requirements.txt | xargs -I % sh -c &#39;poetry add &quot;%&quot;&#39; (ref)</code></p><p><strong>虚拟环境</strong></p></li><li><p>激活：<code>poetry shell</code></p></li><li><p>删除虚拟环境：<code>poetry env remove --all</code></p></li><li><p>运行：<code>poetry run python &lt;filename&gt;.py</code></p></li></ul><h3 id="conda" tabindex="-1"><a class="header-anchor" href="#conda"><span>conda</span></a></h3><p>拒绝 Anaconda 的大体积，建议安装 Miniconda 作为环境管理器。</p><h4 id="安装-1" tabindex="-1"><a class="header-anchor" href="#安装-1"><span>安装</span></a></h4>`,10),x=n("p",null,"scoop 一行搞定",-1),A=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[a("scoop "),n("span",{class:"token function"},"install"),a(` miniconda
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),w=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"wget"),a(` https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
`),n("span",{class:"token function"},"bash"),a(" Miniconda3-latest-Linux-x86_64.sh  "),n("span",{class:"token comment"},"# 接下来一路空格"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=o(`<h4 id="基本命令-1" tabindex="-1"><a class="header-anchor" href="#基本命令-1"><span>基本命令</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda <span class="token parameter variable">-V</span> <span class="token comment"># 查看 conda 版本</span>
conda create <span class="token parameter variable">-n</span> <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token operator">&lt;</span>version<span class="token operator">&gt;</span> <span class="token comment"># 创建环境</span>
conda activate <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> <span class="token comment"># 激活环境</span>
conda deactivate    <span class="token comment"># 关闭环境</span>
conda remove <span class="token parameter variable">-n</span> <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> <span class="token parameter variable">--all</span>  <span class="token comment"># 删除环境，也可进入 conda 安装目录下的 /envs/ 删除文件夹</span>
conda list  <span class="token comment"># 查看环境内工具包</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gui" tabindex="-1"><a class="header-anchor" href="#gui"><span>GUI</span></a></h2>`,3),L={href:"https://customtkinter.tomschimansky.com/documentation/",target:"_blank",rel:"noopener noreferrer"},B=n("s",null,"文档写的依托",-1),M={href:"https://github.com/tomschimansky/customtkinter",target:"_blank",rel:"noopener noreferrer"},P=o(`<h3 id="快捷键绑定" tabindex="-1"><a class="header-anchor" href="#快捷键绑定"><span>快捷键绑定</span></a></h3><p><strong>踩坑 1：快捷键的前提是有焦点，但是焦点一般不在控件身上，而是在整个窗口上</strong></p><p>customtkinter 的每个 widget 都是支持快捷键的，并且提供了<code>bind()</code>函数绑定快捷键，但是这个前提在于，计算机系统的焦点要在该 widget 上。但是在刚进入窗口时，计算机的焦点是整个窗口，而非特定的 widget。</p><p>在查询很多资料后，我采用的方法是为窗口绑定快捷键。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> costumtkinter <span class="token keyword">as</span> tk
app <span class="token operator">=</span> tk<span class="token punctuation">.</span>CTk<span class="token punctuation">(</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">&quot;&lt;Return&gt;&quot;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> <span class="token keyword">_</span><span class="token punctuation">:</span> app<span class="token punctuation">.</span>call_func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样窗口绑定了快捷键，并且与响应的回调函数匹配。</p><div class="hint-container important"><p class="hint-container-title">理解</p><p>这里的回调函数，是和你想要的那个按钮/标签/滑动条的参数匹配的，比如说，你的按钮回调函数是<code>step_forward()</code>，那这里的回调函数也是调用<code>step_forward()</code>函数，其实本质上是让 app 窗口替这个按钮执行该函数。</p><blockquote><p>但是一般谁会想到让窗口代替执行啊，最直接的想法难道不就是让按钮直接绑定吗？可恶的 Tkinter</p></blockquote></div><p><strong>踩坑 2：回调函数的写法</strong></p><p>这里的之所以采用<code>lambda</code>关键字，是因为<code>bind()</code>的第二个参数会返回一个事件作为参数输入后面的函数中。但是在我的项目里，我是不需要这个事件作为输入的，所以采用<code>_</code>抛弃了这个参数。</p><p>其次，<code>lambda</code>里面的可调用对象是需要加<code>()</code>的，否则没法用。 <s>这个盲点看了好久才发现</s></p><p><strong>踩坑 3：按键的写法</strong></p>`,11),q=n("code",null,"事件",-1),G={href:"https://www.cnblogs.com/yuanqiangfei/p/11624546.html",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"事件",-1),C=o(`<ol><li>我本来想要设置<code>&lt;Enter&gt;</code>作为快捷键的，但是<code>&lt;Enter&gt;</code>代表的意思是鼠标进入窗口，真正的回车键应该打作<code>&lt;Return&gt;</code></li><li><code>&lt;Key-s&gt;</code>表示按下<code>s</code>键，<code>Key</code>三个字决定了这个信号来自键盘</li><li><code>&lt;Button-1&gt;</code>表示按下鼠标左键，左中右三者数字分别是<code>123</code>，<code>&lt;Button&gt;</code>表示信号来自鼠标。</li></ol><h2 id="修饰符" tabindex="-1"><a class="header-anchor" href="#修饰符"><span>修饰符</span></a></h2><h3 id="classmethod" tabindex="-1"><a class="header-anchor" href="#classmethod"><span>@classmethod</span></a></h3><p>classmethod 修饰的方法不需要实例化，不需要 self 参数，但第一个参数需要是表示自身类的 cls 参数，可以来调用类的属性，类型，实例化对象等。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  bar <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span>
  <span class="token decorator annotation punctuation">@classmate</span>
  <span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&#39;func2&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span>cls<span class="token punctuation">.</span>bar<span class="token punctuation">)</span>
    cls<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fun1<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 调用 foo 方法</span>
A<span class="token punctuation">.</span>func2<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment"># 不需要实例化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>func2
1
foo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自带模块库" tabindex="-1"><a class="header-anchor" href="#自带模块库"><span>自带模块库</span></a></h2><h3 id="os" tabindex="-1"><a class="header-anchor" href="#os"><span>os</span></a></h3><p><code>os</code>库让 Python 能够与系统命令行交互，通过 python 操作系统文件，运行脚本，基本命令如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> os <span class="token comment"># 导入 os 库</span>
os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 切换到指定目录</span>
os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">&#39;&lt;cmd&gt;&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 在命令行运行指定命令</span>
os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 列出当前目录下的文件</span>
os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&#39;&lt;file&gt;&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 删除指定文件</span>
os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">&#39;&lt;dir&gt;&#39;</span><span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 创建指定目录</span>
os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span><span class="token string">&#39;&lt;dir&gt;&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 删除指定目录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="csv" tabindex="-1"><a class="header-anchor" href="#csv"><span>csv</span></a></h3><blockquote><p>2024.3 写视频打标签 GUI 工具的时候，师兄让我把标签写入 csv 文件，但是我对 pandas 又用的不熟练，就只能用 csv 先做一个替代，现将使用方式记录如下</p></blockquote><h4 id="csv-读取文件" tabindex="-1"><a class="header-anchor" href="#csv-读取文件"><span>csv 读取文件</span></a></h4><p>读取文件我还是觉得 pandas 会更方便一点，用<code>.head()</code>和<code>.tail()</code>读取头行和尾行，再用<code>.iloc[]</code>定位到具体数值，比 csv 方便很多。</p><h4 id="csv-写入文件" tabindex="-1"><a class="header-anchor" href="#csv-写入文件"><span>csv 写入文件</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;example.csv&quot;</span><span class="token punctuation">,</span>mode <span class="token operator">=</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
  csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>调用该语句就能在 csv 文件中写入<code>data</code>数据</p><blockquote><p>我最开始的时候没加<code>newline=&#39;&#39;</code>导致我遇到一个问题，就是我一旦<code>writerow</code>写进一个新的行，软件总会自动先跳一空行，再写入数据，就使文档结构很奇怪</p><p>网上查找后才发现需要加上<code>newline=&#39;&#39;</code>参数，规避空行 <s>（python 设计师你怎么回事）</s></p></blockquote><h4 id="csv-追加文件" tabindex="-1"><a class="header-anchor" href="#csv-追加文件"><span>csv 追加文件</span></a></h4><p>如果将<code>mode</code>设成<code>&#39;w&#39;</code>，会导致写入时覆盖已有数据。解决方法时将<code>&#39;w&#39;</code>修改为<code>&#39;a+&#39;</code>，将模式改为“追加”模式，这样再用<code>writerow</code>写入时，就会在 csv 文件的最下方加入新数据，而非完全覆盖了。</p><h2 id="生成器函数" tabindex="-1"><a class="header-anchor" href="#生成器函数"><span>生成器函数</span></a></h2>`,22),E=n("code",null,"yield",-1),N={href:"https://blog.csdn.net/mieleizhi0522/article/details/82142856",target:"_blank",rel:"noopener noreferrer"},z=n("h2",{id:"async-await-协程函数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#async-await-协程函数"},[n("span",null,"Async / Await 协程函数")])],-1),Z=n("p",null,"Async 为 Python 提供了协程函数的定义，相较于传统的单线程工作方式，协程函数可以实现异步执行和多线程工作，并且可以暂停和恢复执行。",-1),R={href:"https://zhuanlan.zhihu.com/p/27258289",target:"_blank",rel:"noopener noreferrer"},U=n("p",null,"async 定义了协程函数，await 定义了协程函数的暂停和恢复执行。",-1);function V(j,D){const i=l("RouteLink"),e=l("ExternalLinkIcon"),d=l("Tabs");return u(),h("div",null,[k,n("p",null,[a("这是 Python 自带的包管理器，但是存在一定的问题，后将其弃用，改用"),s(i,{to:"/code/python.html#poetry-%E5%9C%A8%E7%94%A8"},{default:t(()=>[a("poetry")]),_:1}),a("，其问题可见"),s(i,{to:"/artical/weakness.html#pip"},{default:t(()=>[a("产品吐槽")]),_:1}),a("板块。")]),v,n("p",null,[a("听从"),n("a",g,[a("绝对值_x"),s(e)]),a("的意见，选用了更为轻量且方便的 poetry 包管理器，有效解决了 pip 存在的两个问题，以下内容参考来源于"),n("a",b,[a("绝对值_x"),s(e)]),a("博客。")]),y,n("p",null,[a("这里是 poetry 的"),n("a",_,[a("官方文档"),s(e)]),a("，安装方法：")]),f,s(d,{id:"117",data:[{id:"Windows"},{id:"Linux"}]},{title0:t(({value:p,isActive:c})=>[a("Windows")]),title1:t(({value:p,isActive:c})=>[a("Linux")]),tab0:t(({value:p,isActive:c})=>[x,A]),tab1:t(({value:p,isActive:c})=>[w]),_:1}),T,n("p",null,[a("我现在正在使用的 GUI 库是 customtkinter，其基于 python 原生 tkinter GUI 库开发，对原生控件在美观和易用性上做了处理，用熟练之后个人认为还是挺好用的（反正比原生好看太多），使用文档"),n("a",L,[a("在这"),s(e)]),a(),B,a("，github 源码"),n("a",M,[a("点击此处"),s(e)])]),P,n("p",null,[a("这里就不得不提到 python 里"),q,a("这个概念了，详情可以看"),n("a",G,[a("这篇博客"),s(e)]),a("，他对"),I,a("这个概念做了比较深的剖析，在这里说一下我的踩坑点和学到的快捷键。")]),C,n("p",null,[a("Python 中提供了关键字"),E,a("，用来定义生成器函数，可以看看"),n("a",N,[a("这篇教程"),s(e)])]),z,Z,n("p",null,[n("a",R,[a("tutorial"),s(e)])]),U])}const K=r(m,[["render",V],["__file","python.html.vue"]]),S=JSON.parse('{"path":"/code/python.html","title":"Python","lang":"zh-CN","frontmatter":{"date":"2024-01-24T00:00:00.000Z","icon":"python","category":"编程","tag":"教程","description":"Python 为什么我选择了 Python 从大一我就开始接触 MATLAB，并且认为 python 能做的，MATLAB 也能做，而且实现起来更简单，毕竟 MATLAB 作为一个已经商业化的工具，其工作区的可视化和交互性、对于环境的依赖程度确实是 python 不可比拟的。 但是 MATLAB 完整体量高达 50G，对于磁盘的占用率是不言而喻的，Py...","head":[["meta",{"property":"og:url","content":"https://dream-oyh.github.io/code/python.html"}],["meta",{"property":"og:site_name","content":"Dream_oyh 的 blog"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 为什么我选择了 Python 从大一我就开始接触 MATLAB，并且认为 python 能做的，MATLAB 也能做，而且实现起来更简单，毕竟 MATLAB 作为一个已经商业化的工具，其工作区的可视化和交互性、对于环境的依赖程度确实是 python 不可比拟的。 但是 MATLAB 完整体量高达 50G，对于磁盘的占用率是不言而喻的，Py..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-18T16:27:30.000Z"}],["meta",{"property":"article:author","content":"OYH"}],["meta",{"property":"article:tag","content":"教程"}],["meta",{"property":"article:published_time","content":"2024-01-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-18T16:27:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-18T16:27:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OYH\\",\\"email\\":\\"19859860010@163.com\\"}]}"]]},"headers":[{"level":2,"title":"为什么我选择了 Python","slug":"为什么我选择了-python","link":"#为什么我选择了-python","children":[]},{"level":2,"title":"包管理器","slug":"包管理器","link":"#包管理器","children":[{"level":3,"title":"pip","slug":"pip","link":"#pip","children":[]},{"level":3,"title":"poetry（在用）","slug":"poetry-在用","link":"#poetry-在用","children":[]},{"level":3,"title":"conda","slug":"conda","link":"#conda","children":[]}]},{"level":2,"title":"GUI","slug":"gui","link":"#gui","children":[{"level":3,"title":"快捷键绑定","slug":"快捷键绑定","link":"#快捷键绑定","children":[]}]},{"level":2,"title":"修饰符","slug":"修饰符","link":"#修饰符","children":[{"level":3,"title":"@classmethod","slug":"classmethod","link":"#classmethod","children":[]}]},{"level":2,"title":"自带模块库","slug":"自带模块库","link":"#自带模块库","children":[{"level":3,"title":"os","slug":"os","link":"#os","children":[]},{"level":3,"title":"csv","slug":"csv","link":"#csv","children":[]}]},{"level":2,"title":"生成器函数","slug":"生成器函数","link":"#生成器函数","children":[]},{"level":2,"title":"Async / Await 协程函数","slug":"async-await-协程函数","link":"#async-await-协程函数","children":[]}],"git":{"createdTime":1707929375000,"updatedTime":1710779250000,"contributors":[{"name":"dream同学0","email":"1399541701@qq.com","commits":10},{"name":"dream_linux","email":"1399541701@qq.com","commits":1}]},"readingTime":{"minutes":6.44,"words":1932},"filePathRelative":"code/python.md","localizedDate":"2024年1月24日","excerpt":"\\n<h2>为什么我选择了 Python</h2>\\n<p>从大一我就开始接触 MATLAB，并且认为 python 能做的，MATLAB 也能做，而且实现起来更简单，毕竟 MATLAB 作为一个已经商业化的工具，其工作区的可视化和交互性、对于环境的依赖程度确实是 python 不可比拟的。</p>\\n<p>但是 MATLAB 完整体量高达 50G，对于磁盘的占用率是不言而喻的，Python 借用包管理器，将体量减小到 MATLAB 远不及的水平。其次，MATLAB 在拟合、神经网络、深度学习等领域，采用已经打包好的工具箱，这对于算法学习是极其不利的，但是 Python 通过各种库的调用，能够从底层逻辑实现各算法，对于个人学习而言是更为有益的。</p>","autoDesc":true}');export{K as comp,S as data};
